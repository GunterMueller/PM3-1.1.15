	.file	"BldFace.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 BldFace__Init__GetIt.0,@function
BldFace__Init__GetIt.0:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl %ecx,-4(%ebp)
	movl 8(%ebp),%edi
	movl -4(%ebp),%esi
	movl %esi,-20(%ebp)
.L3:
	movl $MM_BldFace+200,-8(%ebp)
	movl $4,-12(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-16(%ebp)
	leal -16(%ebp),%esi
	movl %esi,RTThread__handlerStack
	pushl $0
	pushl %edi
	movl MI_M3ID+44,%eax
	call *%eax
	movl -20(%ebp),%esi
	movl %eax,%ebx
	movl -16(%esi),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 12(%eax),%ecx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	pushl %edx
	call *%ecx
	movl %eax,%ebx
	addl $20,%esp
	testl %ebx,%ebx
	jne .L5
	pushl %edi
	pushl $MM_BldFace+212
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_BldFace+252
	movl %eax,%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
	pushl %ebx
	pushl %ebx
	pushl %eax
	pushl %ebx
	movl MI_Msg+56,%eax
	call *%eax
	addl $36,%esp
	pushl %ebx
	pushl $MI_BldFace+44
	movl MI_RTHooks+52,%eax
	call *%eax
.L5:
	movl -16(%ebp),%eax
	leal -32(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 BldFace__Init__GetIt.0,.Lfe1-BldFace__Init__GetIt.0
	.align 16
	.type	 BldFace__Init__GetOptionValue.1,@function
BldFace__Init__GetOptionValue.1:
	pushl %ebp
	movl %esp,%ebp
	subl $36,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl %ecx,-4(%ebp)
	movl 8(%ebp),%edi
	movl -4(%ebp),%esi
	movl %esi,-36(%ebp)
.L7:
	movl $MM_BldFace+276,-20(%ebp)
	movl $4,-24(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-28(%ebp)
	leal -28(%ebp),%esi
	movl %esi,RTThread__handlerStack
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	xorl %ebx,%ebx
	pushl %ebx
	pushl %edi
	movl MI_M3ID+44,%eax
	call *%eax
	movl -36(%ebp),%esi
	movl %eax,%ecx
	movl -20(%esi),%eax
	movl (%eax),%eax
	movl 4(%eax),%edx
	movl %ecx,-32(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	leal -32(%ebp),%eax
	pushl %eax
	movl -20(%esi),%eax
	pushl %eax
	call *%edx
	addl $20,%esp
	testl %eax,%eax
	je .L8
	cmpb $4,-16(%ebp)
	je .L9
.L8:
	pushl %edi
	pushl $MM_BldFace+292
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
	pushl %ebx
	pushl %ebx
	movl %eax,%edx
	pushl %edx
	pushl %ebx
	movl MI_Msg+56,%eax
	call *%eax
	pushl %ebx
	pushl $MI_BldFace+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $36,%esp
.L9:
	leal -16(%ebp),%eax
	pushl %eax
	movl -36(%ebp),%esi
	movl -16(%esi),%eax
	movl 4(%eax),%eax
	pushl %eax
	movl MI_QVal+68,%eax
	call *%eax
	movl %eax,%edx
	movl %edx,%ebx
	movl (%ebx),%eax
	movl 32(%eax),%edx
	pushl %ebx
	call *%edx
	addl $12,%esp
	testl %eax,%eax
	jg .L10
	pushl %edi
	pushl $MM_BldFace+332
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl $0
	pushl $0
	movl %eax,%edx
	pushl %edx
	pushl $0
	movl MI_Msg+56,%eax
	call *%eax
	pushl $0
	pushl $MI_BldFace+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $36,%esp
.L10:
	movl (%ebx),%eax
	movl 44(%eax),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl $0
	pushl %ebx
	call *%edx
.L11:
	movl -28(%ebp),%eax
	leal -48(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 BldFace__Init__GetOptionValue.1,.Lfe2-BldFace__Init__GetOptionValue.1
	.align 16
	.type	 BldFace__Init,@function
BldFace__Init:
	pushl %ebp
	movl %esp,%ebp
	subl $220,%esp
	pushl %edi
	pushl %esi
	leal 8(%ebp),%edi
	pushl %ebx
	movl %edi,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	movl $0,-20(%ebp)
.L12:
	movl $MM_BldFace+364,-192(%ebp)
	movl $0,-196(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-200(%ebp)
	leal -200(%ebp),%edi
	movl %edi,RTThread__handlerStack
	leal -180(%ebp),%eax
	pushl %eax
	call _setjmp
	movl %eax,-220(%ebp)
	addl $4,%esp
	testl %eax,%eax
	jne .L13
	movl 12(%ebp),%edx
	movl 8(%ebp),%edi
	leal -12(%ebp),%ebx
	movl %edx,60(%edi)
	movl 188(%edx),%eax
	movl %eax,20(%edi)
	movl 192(%edx),%eax
	movl %eax,24(%edi)
	movb 196(%edx),%al
	movb %al,28(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+376
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+56,%eax
	call *%eax
	movl %eax,%esi
	movl %esi,32(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+404
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	testl %eax,%eax
	sete %al
	movb %al,49(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+436
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,6(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+464
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+60,%eax
	call *%eax
	movl %eax,%ebx
	movl -220(%ebp),%edx
	addl $32,%esp
.L14:
	movb %dl,%cl
	xorl %eax,%eax
	movb %cl,%al
	cmpl %ebx,MM_BldFace+156(,%eax,4)
	jne .L15
	movl 8(%ebp),%edi
	movb %cl,51(%edi)
	jmp .L16
	.align 16
.L15:
	incl %edx
	cmpl $1,%edx
	jle .L14
.L16:
	movl 8(%ebp),%edi
	leal -12(%ebp),%ebx
	cmpb $0,51(%edi)
	sete %al
	movb %al,50(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+496
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+56,%eax
	call *%eax
	movl %eax,44(%edi)
	movb $0,52(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+516
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,7(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+540
	call BldFace__Init__GetIt.0
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+64,%eax
	call *%eax
	movl %eax,%esi
	movl %esi,-20(%ebp)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+560
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	testl %eax,%eax
	sete %al
	movb %al,48(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+584
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,53(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+608
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,54(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+632
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $16,%esp
	testl %eax,%eax
	je .L18
	movb $0,55(%edi)
	jmp .L19
	.align 16
.L18:
	movl 8(%ebp),%edi
	movb $1,55(%edi)
.L19:
	leal -12(%ebp),%ebx
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+656
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movl 8(%ebp),%edi
	movb %al,4(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+680
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,5(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+704
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,8(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+728
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,9(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+752
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,10(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+776
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,11(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+800
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $16,%esp
	testl %eax,%eax
	sete %al
	movb %al,12(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+820
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,13(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+848
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,14(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+876
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,15(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+900
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	addl $32,%esp
	movb %al,16(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+920
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+48,%eax
	call *%eax
	movb %al,17(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+944
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+52,%eax
	call *%eax
	addl $32,%esp
	movl %eax,36(%edi)
	pushl %ebx
	movl %ebp,%ecx
	pushl $MM_BldFace+968
	call BldFace__Init__GetOptionValue.1
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_QVal+52,%eax
	call *%eax
	movl %eax,40(%edi)
	movl 12(%ebp),%eax
	movl 492(%eax),%esi
	pushl %ebx
	pushl %eax
	movl MI_QVal+56,%eax
	call *%eax
	pushl %eax
	pushl $MM_BldFace+996
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ecx
	movl (%esi),%eax
	addl $32,%esp
	movl 12(%eax),%edx
	movl %ecx,-204(%ebp)
	leal -204(%ebp),%eax
	pushl %eax
	pushl %esi
	call *%edx
	movl -200(%ebp),%eax
	movl %eax,RTThread__handlerStack
	jmp .L28
	.align 16
.L13:
	pushl $0
	pushl $MI_BldFace+44
	movl MI_RTHooks+52,%eax
	call *%eax
.L28:
	addl $8,%esp
	leal -208(%ebp),%edi
	movl %edi,-216(%ebp)
	movl 12(%ebp),%eax
	movl $1,-212(%ebp)
	movl 492(%eax),%edx
	movl (%edx),%eax
	leal -216(%ebp),%ebx
	movl 32(%eax),%ecx
	pushl %edx
	call *%ecx
	movl %eax,-208(%ebp)
	pushl %ebx
	movl MM_BldFace+1008,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl 8(%ebp),%edi
	addl $12,%esp
	movl %eax,56(%edi)
	testl %eax,%eax
	jne .L22
	pushl $2516
	call _m3_fault
	.align 16
.L22:
	xorl %ebx,%ebx
	movl 4(%eax),%eax
	decl %eax
	movl %eax,-220(%ebp)
	jmp .L23
	.align 16
.L24:
	movl 12(%ebp),%eax
	movl 492(%eax),%esi
	movl (%esi),%eax
	movl 44(%eax),%eax
	pushl %ebx
	pushl %esi
	call *%eax
	movl %eax,%ecx
	movl 8(%ebp),%edi
	addl $8,%esp
	movl 56(%edi),%eax
	testl %eax,%eax
	jne .L25
	pushl $2532
	call _m3_fault
	.align 16
.L25:
	movl %eax,%edx
	cmpl %ebx,4(%edx)
	ja .L26
	pushl $2530
	call _m3_fault
	.align 16
.L26:
	movl (%edx),%eax
	movl %ecx,(%eax,%ebx,4)
	incl %ebx
.L23:
	cmpl %ebx,-220(%ebp)
	jge .L24
	leal -232(%ebp),%esp
	movl 8(%ebp),%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 BldFace__Init,.Lfe3-BldFace__Init
	.align 16
	.type	 BldFace__CompileC,@function
BldFace__CompileC:
	pushl %ebp
	movl %esp,%ebp
	subl $196,%esp
	pushl %esi
	pushl %ebx
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	movl MM_BldFace+1016,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl 20(%ebp),%edx
	movl %eax,%ebx
	movl (%edx),%eax
	movl 32(%eax),%eax
	pushl %edx
	call *%eax
	movl %eax,%esi
	movl (%ebx),%eax
	movl 4(%eax),%ecx
	pushl %esi
	pushl %ebx
	call *%ecx
	movl %eax,-196(%ebp)
	addl $16,%esp
.L30:
	movl $MM_BldFace+364,-184(%ebp)
	movl $0,-188(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-192(%ebp)
	leal -192(%ebp),%edx
	movl %edx,RTThread__handlerStack
	leal -172(%ebp),%eax
	pushl %eax
	call _setjmp
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	jne .L31
	movl 20(%ebp),%edx
	movb $2,-12(%ebp)
	movl (%edx),%eax
	movl 32(%eax),%eax
	pushl %edx
	call *%eax
	movl %eax,%esi
	decl %esi
	addl $4,%esp
	jmp .L32
	.align 16
.L33:
	movl 20(%ebp),%edx
	movl (%edx),%eax
	movl 44(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	pushl $0
	movl %eax,%ecx
	pushl %ecx
	movl MI_M3ID+44,%eax
	call *%eax
	movl -196(%ebp),%edx
	movl %eax,-8(%ebp)
	movl (%edx),%eax
	movl 12(%eax),%ecx
	leal -12(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	incl %ebx
	addl $24,%esp
.L32:
	cmpl %esi,%ebx
	jle .L33
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	movl -196(%ebp),%edx
	pushl %edx
	movl 16(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	movl 8(%ebp),%edx
	movl 60(%edx),%eax
	pushl %eax
	movl MI_BldHooks+176,%eax
	call *%eax
	addl $28,%esp
	testl %eax,%eax
	je .L35
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L35:
	movl -192(%ebp),%eax
	movl %eax,RTThread__handlerStack
	jmp .L29
	.align 16
.L31:
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L29:
	leal -204(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 BldFace__CompileC,.Lfe4-BldFace__CompileC
	.align 16
	.type	 BldFace__Backend,@function
BldFace__Backend:
	pushl %ebp
	movl %esp,%ebp
	subl $180,%esp
	pushl %ebx
.L39:
	movl $MM_BldFace+364,-172(%ebp)
	movl $0,-176(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-180(%ebp)
	leal -180(%ebp),%edx
	movl %edx,RTThread__handlerStack
	leal -160(%ebp),%eax
	pushl %eax
	call _setjmp
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	jne .L40
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 16(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	movl 8(%ebp),%edx
	movl 60(%edx),%eax
	pushl %eax
	movl MI_BldHooks+196,%eax
	call *%eax
	addl $24,%esp
	testl %eax,%eax
	je .L41
	pushl %ebx
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L41:
	movl -180(%ebp),%eax
	movl %eax,RTThread__handlerStack
	jmp .L38
	.align 16
.L40:
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L38:
	movl -184(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe5:
	.size	 BldFace__Backend,.Lfe5-BldFace__Backend
	.align 16
	.type	 BldFace__Assemble,@function
BldFace__Assemble:
	pushl %ebp
	movl %esp,%ebp
	subl $180,%esp
	pushl %ebx
.L45:
	movl $MM_BldFace+364,-172(%ebp)
	movl $0,-176(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-180(%ebp)
	leal -180(%ebp),%edx
	movl %edx,RTThread__handlerStack
	leal -160(%ebp),%eax
	pushl %eax
	call _setjmp
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	jne .L46
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 16(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	movl 8(%ebp),%edx
	movl 60(%edx),%eax
	pushl %eax
	movl MI_BldHooks+192,%eax
	call *%eax
	addl $24,%esp
	testl %eax,%eax
	je .L47
	pushl %ebx
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L47:
	movl -180(%ebp),%eax
	movl %eax,RTThread__handlerStack
	jmp .L44
	.align 16
.L46:
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L44:
	movl -184(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe6:
	.size	 BldFace__Assemble,.Lfe6-BldFace__Assemble
	.align 16
	.type	 BldFace__Link,@function
BldFace__Link:
	pushl %ebp
	movl %esp,%ebp
	subl $220,%esp
	pushl %edi
	pushl %esi
	xorl %edi,%edi
	pushl %ebx
	movl $0,-20(%ebp)
	movl $0,-16(%ebp)
	movl %edi,-12(%ebp)
	movl %edi,-8(%ebp)
	movl %edi,-4(%ebp)
	movl MM_BldFace+1016,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl 16(%ebp),%ecx
	movl %eax,%edi
	movl (%ecx),%eax
	movl 32(%eax),%ebx
	pushl %ecx
	call *%ebx
	movl %eax,%edx
	movl (%edi),%eax
	movl 4(%eax),%esi
	pushl %edx
	pushl %edi
	call *%esi
	movl %eax,-208(%ebp)
	movl MM_BldFace+1016,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl 20(%ebp),%ecx
	movl %eax,%edi
	movl (%ecx),%eax
	movl 32(%eax),%esi
	pushl %ecx
	call *%esi
	movl %eax,%edx
	movl (%edi),%eax
	movl 4(%eax),%ebx
	pushl %edx
	pushl %edi
	call *%ebx
	movl %eax,-204(%ebp)
	addl $32,%esp
.L51:
	movl $MM_BldFace+364,-192(%ebp)
	movl $0,-196(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-200(%ebp)
	leal -200(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	leal -180(%ebp),%eax
	pushl %eax
	call _setjmp
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	jne .L52
	movl 16(%ebp),%ecx
	movb $2,-12(%ebp)
	movl (%ecx),%eax
	movl 32(%eax),%edi
	pushl %ecx
	call *%edi
	movl %eax,%edx
	movl %ebx,%esi
	decl %edx
	movl %edx,-212(%ebp)
	addl $4,%esp
	jmp .L53
	.align 16
.L54:
	movl 16(%ebp),%ecx
	movl (%ecx),%eax
	movl 44(%eax),%edi
	pushl %esi
	pushl %ecx
	call *%edi
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_M3ID+44,%eax
	call *%eax
	movl -208(%ebp),%ecx
	movl %eax,-8(%ebp)
	movl (%ecx),%eax
	movl 12(%eax),%ebx
	leal -12(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%ebx
	incl %esi
	addl $24,%esp
.L53:
	cmpl %esi,-212(%ebp)
	jge .L54
	movl 20(%ebp),%ecx
	movl (%ecx),%eax
	movl 32(%eax),%ebx
	pushl %ecx
	call *%ebx
	movl %eax,%edx
	movl $0,-216(%ebp)
	decl %edx
	movl %edx,-220(%ebp)
	addl $4,%esp
	jmp .L56
	.align 16
.L57:
	movl 20(%ebp),%ecx
	movl (%ecx),%eax
	movl 44(%eax),%ebx
	leal -20(%ebp),%eax
	pushl %eax
	movl -216(%ebp),%ecx
	pushl %ecx
	movl 20(%ebp),%ecx
	pushl %ecx
	call *%ebx
	movl MM_BldFace+1016,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movl (%ebx),%eax
	movl 4(%eax),%edi
	pushl $2
	pushl %ebx
	call *%edi
	movl %eax,%esi
	movl %esi,%edi
	movb $2,-12(%ebp)
	addl $24,%esp
	movl -20(%ebp),%eax
	testl %eax,%eax
	je .L58
	pushl $0
	pushl %eax
	jmp .L64
	.align 16
.L58:
	pushl %eax
	pushl $MM_BldFace+1028
.L64:
	movl MI_M3ID+44,%eax
	call *%eax
	movl %eax,-8(%ebp)
	addl $8,%esp
	movl (%edi),%eax
	leal -12(%ebp),%ebx
	movl 12(%eax),%esi
	pushl %ebx
	pushl %edi
	call *%esi
	pushl $0
	movl -16(%ebp),%eax
	pushl %eax
	movl MI_M3ID+44,%eax
	call *%eax
	movl %eax,-8(%ebp)
	movl (%edi),%eax
	movl 12(%eax),%esi
	pushl %ebx
	pushl %edi
	call *%esi
	movl %edi,-4(%ebp)
	movl -204(%ebp),%ecx
	movb $4,-12(%ebp)
	movl (%ecx),%eax
	movl 12(%eax),%esi
	pushl %ebx
	pushl %ecx
	call *%esi
	incl -216(%ebp)
	addl $32,%esp
.L56:
	movl -220(%ebp),%ecx
	cmpl %ecx,-216(%ebp)
	jle .L57
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	movl -204(%ebp),%ecx
	pushl %ecx
	movl -208(%ebp),%ecx
	pushl %ecx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 8(%ebp),%ecx
	movl 60(%ecx),%eax
	pushl %eax
	movl MI_BldHooks+180,%eax
	call *%eax
	addl $24,%esp
	testl %eax,%eax
	je .L61
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L61:
	movl -200(%ebp),%eax
	movl %eax,RTThread__handlerStack
	jmp .L50
	.align 16
.L52:
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L50:
	leal -232(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe7:
	.size	 BldFace__Link,.Lfe7-BldFace__Link
	.align 16
	.type	 BldFace__MakeLib,@function
BldFace__MakeLib:
	pushl %ebp
	movl %esp,%ebp
	subl $208,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	movl MM_BldFace+1016,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl 16(%ebp),%ecx
	movl %eax,%esi
	movl (%ecx),%eax
	movl 32(%eax),%ebx
	pushl %ecx
	call *%ebx
	movl %eax,%edx
	movl (%esi),%eax
	movl 4(%eax),%ebx
	pushl %edx
	pushl %esi
	call *%ebx
	movl %eax,-200(%ebp)
	movl MM_BldFace+1016,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl 20(%ebp),%ecx
	movl %eax,%esi
	movl (%ecx),%eax
	movl 32(%eax),%ebx
	pushl %ecx
	call *%ebx
	movl %eax,%edx
	movl (%esi),%eax
	movl 4(%eax),%ebx
	pushl %edx
	pushl %esi
	call *%ebx
	movl %eax,-196(%ebp)
	addl $32,%esp
.L66:
	movl $MM_BldFace+364,-184(%ebp)
	movl $0,-188(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-192(%ebp)
	leal -192(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	leal -172(%ebp),%eax
	pushl %eax
	call _setjmp
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	jne .L67
	movl 16(%ebp),%ecx
	movb $2,-12(%ebp)
	movl (%ecx),%eax
	movl 32(%eax),%esi
	pushl %ecx
	call *%esi
	movl %eax,%edx
	movl %ebx,%edi
	decl %edx
	movl %edx,-204(%ebp)
	addl $4,%esp
	jmp .L68
	.align 16
.L69:
	movl 16(%ebp),%ecx
	movl (%ecx),%eax
	movl 44(%eax),%esi
	pushl %edi
	pushl %ecx
	call *%esi
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_M3ID+44,%eax
	call *%eax
	movl -200(%ebp),%ecx
	movl %eax,-8(%ebp)
	movl (%ecx),%eax
	movl 12(%eax),%ebx
	leal -12(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%ebx
	incl %edi
	addl $24,%esp
.L68:
	cmpl %edi,-204(%ebp)
	jge .L69
	movl 20(%ebp),%ecx
	movl (%ecx),%eax
	movl 32(%eax),%ebx
	pushl %ecx
	call *%ebx
	movl %eax,%edx
	xorl %edi,%edi
	decl %edx
	movl %edx,-208(%ebp)
	addl $4,%esp
	jmp .L71
	.align 16
.L72:
	movl 20(%ebp),%ecx
	movl (%ecx),%eax
	movl 44(%eax),%ebx
	pushl %edi
	pushl %ecx
	call *%ebx
	pushl $0
	movl %eax,%esi
	pushl %esi
	movl MI_M3ID+44,%eax
	call *%eax
	movl -196(%ebp),%ecx
	movl %eax,-8(%ebp)
	movl (%ecx),%eax
	movl 12(%eax),%esi
	leal -12(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%esi
	incl %edi
	addl $24,%esp
.L71:
	cmpl %edi,-208(%ebp)
	jge .L72
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	movl -196(%ebp),%ecx
	pushl %ecx
	movl -200(%ebp),%ecx
	pushl %ecx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 8(%ebp),%ecx
	movl 60(%ecx),%eax
	pushl %eax
	movl MI_BldHooks+184,%eax
	call *%eax
	addl $24,%esp
	testl %eax,%eax
	je .L74
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L74:
	movl -192(%ebp),%eax
	movl %eax,RTThread__handlerStack
	jmp .L65
	.align 16
.L67:
	pushl $0
	pushl $MI_M3Driver+432
	movl MI_RTHooks+52,%eax
	call *%eax
.L65:
	leal -220(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe8:
	.size	 BldFace__MakeLib,.Lfe8-BldFace__MakeLib
	.align 16
	.type	 _INITM_BldFace,@function
_INITM_BldFace:
	pushl %ebp
	movl %esp,%ebp
	pushl $0
	pushl $MM_BldFace+1044
	movl MI_M3ID+44,%eax
	call *%eax
	movl %eax,MM_BldFace+148
	pushl $0
	pushl $MM_BldFace+1068
	movl MI_M3ID+44,%eax
	call *%eax
	movl %eax,MM_BldFace+152
	pushl $0
	pushl $MM_BldFace+1088
	movl MI_M3ID+44,%eax
	call *%eax
	movl %eax,MM_BldFace+156
	pushl $0
	pushl $MM_BldFace+1104
	movl MI_M3ID+44,%eax
	call *%eax
	movl %eax,MM_BldFace+160
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe9:
	.size	 _INITM_BldFace,.Lfe9-_INITM_BldFace
	.align 16
	.type	 M_BldFace_t6dddefbd_LINK,@function
M_BldFace_t6dddefbd_LINK:
	pushl %ebp
	movl %esp,%ebp
	movl MM_BldFace+1476,%eax
	movl %ebp,%esp
	movl 52(%eax),%edx
	movl MM_BldFace+164,%eax
	movl %eax,24(%edx)
	movl MM_BldFace+168,%eax
	movl %eax,4(%edx)
	movl MM_BldFace+172,%eax
	movl %eax,8(%edx)
	movl MM_BldFace+176,%eax
	movl %eax,12(%edx)
	movl MM_BldFace+180,%eax
	movl %eax,16(%edx)
	movl MM_BldFace+184,%eax
	movl %eax,20(%edx)
	popl %ebp
	ret
.Lfe10:
	.size	 M_BldFace_t6dddefbd_LINK,.Lfe10-M_BldFace_t6dddefbd_LINK
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_BldFace
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe11:
	.size	 _m3_fault,.Lfe11-_m3_fault
.globl MM_BldFace
.data
	.align 4
	.type	 MM_BldFace,@object
	.size	 MM_BldFace,1516
MM_BldFace:
	.long MM_BldFace+1320
	.long MM_BldFace+44
	.long MM_BldFace+1008
	.long MM_BldFace+188
	.zero	4
	.long MM_BldFace+1208
	.zero	16
	.long _INITM_BldFace
	.zero	8
	.long 1843261373
.byte 67
.byte 125
.byte 187
.byte 124
.byte 254
.byte 146
.byte 102
.byte 17
	.long 1
	.zero	4
	.long 4
	.long 4
	.zero	4
	.long 0
	.zero	12
	.long MM_BldFace+1462
	.long MM_BldFace+1464
	.long MM_BldFace+1466
	.zero	4
	.long M_BldFace_t6dddefbd_LINK
	.long -1683032271
	.zero	12
	.long MM_BldFace+1484
	.long MM_BldFace+1505
	.zero	20
	.long BldFace__Init
	.long BldFace__CompileC
	.long BldFace__Backend
	.long BldFace__Assemble
	.long BldFace__Link
	.long BldFace__MakeLib
	.long -1683032270
	.long 1843261373
	.zero	4
	.long MI_BldFace+44
	.zero	4
	.long 2
	.long MM_BldFace+220
	.long 25
	.ascii	"Quake template variable "
	.zero	4
	.long 2
	.long MM_BldFace+260
	.long 13
	.ascii	" not defined"
	.zero	4
	.long MI_BldFace+44
	.long MI_Quake+44
	.zero	4
	.long 2
	.long MM_BldFace+300
	.long 27
	.ascii	"No array value for option "
	.zero	2
	.long 2
	.long MM_BldFace+340
	.long 21
	.ascii	"No value for option "
	.zero	4
	.long MI_Quake+44
	.zero	4
	.long 2
	.long MM_BldFace+384
	.long 16
	.ascii	"M3_COVERAGE_LIB"
	.zero	1
	.long 2
	.long MM_BldFace+412
	.long 17
	.ascii	"INTERNAL_BACKEND"
	.zero	4
	.long 2
	.long MM_BldFace+444
	.long 16
	.ascii	"BOOTSTRAP_TO_IL"
	.zero	1
	.long 2
	.long MM_BldFace+472
	.long 18
	.ascii	"M3_BACKEND_OUTPUT"
	.zero	3
	.long 2
	.long MM_BldFace+504
	.long 7
	.ascii	"TARGET"
	.zero	2
	.long 2
	.long MM_BldFace+524
	.long 11
	.ascii	"OPTION_GUI"
	.zero	2
	.long 2
	.long MM_BldFace+548
	.long 8
	.ascii	"Options"
	.zero	1
	.long 2
	.long MM_BldFace+568
	.long 11
	.ascii	"standalone"
	.zero	2
	.long 2
	.long MM_BldFace+592
	.long 11
	.ascii	"shared_lib"
	.zero	2
	.long 2
	.long MM_BldFace+616
	.long 11
	.ascii	"static_lib"
	.zero	2
	.long 2
	.long MM_BldFace+640
	.long 12
	.ascii	"m3main_in_C"
	.zero	1
	.long 2
	.long MM_BldFace+664
	.long 12
	.ascii	"dump_config"
	.zero	1
	.long 2
	.long MM_BldFace+688
	.long 10
	.ascii	"bootstrap"
	.zero	3
	.long 2
	.long MM_BldFace+712
	.long 10
	.ascii	"debuginfo"
	.zero	3
	.long 2
	.long MM_BldFace+736
	.long 11
	.ascii	"heap_stats"
	.zero	2
	.long 2
	.long MM_BldFace+760
	.long 11
	.ascii	"keep_cache"
	.zero	2
	.long 2
	.long MM_BldFace+784
	.long 11
	.ascii	"keep_files"
	.zero	2
	.long 2
	.long MM_BldFace+808
	.long 8
	.ascii	"no_make"
	.zero	1
	.long 2
	.long MM_BldFace+828
	.long 13
	.ascii	"compile_once"
	.zero	4
	.long 2
	.long MM_BldFace+856
	.long 13
	.ascii	"optimization"
	.zero	4
	.long 2
	.long MM_BldFace+884
	.long 10
	.ascii	"skip_link"
	.zero	3
	.long 2
	.long MM_BldFace+908
	.long 6
	.ascii	"times"
	.zero	3
	.long 2
	.long MM_BldFace+928
	.long 9
	.ascii	"coverage"
	.zero	4
	.long 2
	.long MM_BldFace+952
	.long 10
	.ascii	"msg_level"
	.zero	3
	.long 2
	.long MM_BldFace+976
	.long 14
	.ascii	"warning_level"
	.zero	3
	.long 2
	.long MM_BldFace+1004
	.long 3
	.ascii	"-w"
	.zero	2
	.long MM_BldFace+1016
	.long -244065135
	.long MM_BldFace+1476
	.long 971574223
	.long 2
	.long MM_BldFace+1036
	.long 1
	.zero	4
	.long 2
	.long MM_BldFace+1052
	.long 9
	.ascii	"COMPILER"
	.zero	4
	.long 2
	.long MM_BldFace+1076
	.long 8
	.ascii	"BACKEND"
	.zero	1
	.long 2
	.long MM_BldFace+1096
	.long 4
	.ascii	"ASM"
	.zero	1
	.long 2
	.long MM_BldFace+1112
	.long 4
	.ascii	"OBJ"
	.zero	1
	.ascii	"_INITM_BldFace"
	.zero	1
	.ascii	"MakeLib"
	.zero	1
	.ascii	"Link"
	.zero	1
	.ascii	"Assemble"
	.zero	1
	.ascii	"Backend"
	.zero	1
	.ascii	"CompileC"
	.zero	1
	.ascii	"Init"
	.zero	1
	.ascii	"Init.GetOptionValue"
	.zero	1
	.ascii	"Init.GetIt"
	.zero	3
	.long _INITM_BldFace
	.long MM_BldFace+1116
	.zero	4
	.long BldFace__MakeLib
	.long MM_BldFace+1131
	.zero	4
	.long BldFace__Link
	.long MM_BldFace+1139
	.zero	4
	.long BldFace__Assemble
	.long MM_BldFace+1144
	.zero	4
	.long BldFace__Backend
	.long MM_BldFace+1153
	.zero	4
	.long BldFace__CompileC
	.long MM_BldFace+1161
	.zero	4
	.long BldFace__Init
	.long MM_BldFace+1170
	.zero	4
	.long BldFace__Init__GetOptionValue.1
	.long MM_BldFace+1175
	.zero	4
	.long BldFace__Init__GetIt.0
	.long MM_BldFace+1195
	.zero	8
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/m3tem"
	.ascii	"plates/src/BldFace.m3"
	.zero	1
.byte 4
.byte 0
.byte 4
.byte 0
.byte 2
.byte 10
.byte 1
.byte 16
.byte 185
.byte 107
.byte 68
.byte 227
	.zero	6
	.long 1843261373
	.ascii	"BldFace_^%#%^__0001M"
	.zero	1
	.ascii	"BldFace.T"
	.zero	2
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
