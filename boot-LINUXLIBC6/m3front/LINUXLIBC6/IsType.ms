	.file	"IsType.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 IsType__Check,@function
IsType__Check:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl $0,-4(%ebp)
	movl 20(%ebx),%eax
	testl %eax,%eax
	jne .L2
	pushl $308
	call _m3_fault
	.align 16
.L2:
	movl %eax,%edx
	cmpl $1,4(%edx)
	ja .L3
	pushl $306
	call _m3_fault
	.align 16
.L3:
	leal -4(%ebp),%eax
	pushl %eax
	movl (%edx),%eax
	movl 4(%eax),%eax
	pushl %eax
	movl MI_TypeExpr+48,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jne .L4
	pushl $MM_IsType+72
	movl MI_Error+44,%eax
	call *%eax
	movl 20(%ebx),%eax
	addl $4,%esp
	testl %eax,%eax
	jne .L5
	pushl $340
	call _m3_fault
	.align 16
.L5:
	movl %eax,%edx
	cmpl $0,4(%edx)
	jne .L6
	pushl $338
	call _m3_fault
	.align 16
.L6:
	movl (%edx),%eax
	movl (%eax),%eax
	pushl %eax
	movl MI_Expr+152,%eax
	call *%eax
	movl %eax,-4(%ebp)
	addl $4,%esp
.L4:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,-4(%ebp)
	movl 20(%ebx),%eax
	addl $4,%esp
	testl %eax,%eax
	jne .L7
	pushl $388
	call _m3_fault
	.align 16
.L7:
	cmpl $0,4(%eax)
	jne .L8
	pushl $386
	call _m3_fault
	.align 16
.L8:
	movl (%eax),%eax
	movl (%eax),%eax
	pushl %eax
	movl MI_Expr+152,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+124,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	jne .L9
	pushl $MM_IsType+124
	jmp .L13
	.align 16
.L9:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_ObjectType+52,%eax
	call *%eax
	addl $4,%esp
	testl %eax,%eax
	jne .L10
	movl MI_Reff+44,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+120,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jne .L10
	pushl $MM_IsType+172
.L13:
	movl MI_Error+44,%eax
	call *%eax
.L10:
	movl MI_Bool+44,%eax
	movl %eax,8(%ebx)
	movl -8(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 IsType__Check,.Lfe1-IsType__Check
	.align 16
	.type	 IsType__Prep,@function
IsType__Prep:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl $0,-4(%ebp)
	movl 8(%ebp),%edx
	movl $0,-12(%ebp)
	movl 20(%edx),%eax
	testl %eax,%eax
	jne .L15
	pushl $628
	call _m3_fault
	.align 16
.L15:
	movl 4(%eax),%esi
	testl %esi,%esi
	jne .L16
	pushl $626
	call _m3_fault
	.align 16
.L16:
	movl (%eax),%ecx
	movl (%ecx),%ebx
	cmpl $1,%esi
	ja .L18
	pushl $706
	call _m3_fault
	.align 16
.L18:
	leal -4(%ebp),%eax
	pushl %eax
	movl 4(%ecx),%eax
	pushl %eax
	movl MI_TypeExpr+48,%eax
	call *%eax
	movl %eax,%esi
	addl $8,%esp
	testl %esi,%esi
	jne .L19
	pushl %ebx
	movl MI_Expr+152,%eax
	call *%eax
	movl %eax,-4(%ebp)
	addl $4,%esp
.L19:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+140,%eax
	call *%eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,-4(%ebp)
	pushl %ebx
	movl MI_Expr+152,%eax
	call *%eax
	movl %eax,%ebx
	movl 8(%ebp),%edx
	addl $12,%esp
	movl 20(%edx),%eax
	testl %eax,%eax
	jne .L20
	pushl $820
	call _m3_fault
	.align 16
.L20:
	cmpl $0,4(%eax)
	jne .L21
	pushl $818
	call _m3_fault
	.align 16
.L21:
	movl (%eax),%eax
	movl (%eax),%eax
	pushl %eax
	movl MI_Expr+200,%eax
	call *%eax
	movl 8(%ebp),%edx
	addl $4,%esp
	movl 20(%edx),%eax
	testl %eax,%eax
	jne .L22
	pushl $836
	call _m3_fault
	.align 16
.L22:
	cmpl $0,4(%eax)
	jne .L23
	pushl $834
	call _m3_fault
	.align 16
.L23:
	movl (%eax),%eax
	movl (%eax),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl -4(%ebp),%eax
	pushl %eax
	pushl %ebx
	movl MI_Type+120,%eax
	call *%eax
	movl %eax,%esi
	addl $12,%esp
	testl %esi,%esi
	je .L24
	movl -12(%ebp),%edx
	pushl %edx
	movl MI_CG+640,%eax
	call *%eax
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	jmp .L28
	.align 16
.L24:
	movl -12(%ebp),%edx
	pushl %edx
	movl MI_Null+44,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+116,%eax
	call *%eax
	movl %eax,%esi
	addl $12,%esp
	testl %esi,%esi
	je .L26
	movl MI_CG+416,%eax
	call *%eax
	movl -12(%ebp),%edx
	pushl %edx
	movl MI_CG+436,%eax
.L28:
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl 8(%ebp),%edx
	movl %eax,24(%edx)
	jmp .L14
	.align 16
.L26:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_RefType+56,%eax
	call *%eax
	movl %eax,%esi
	addl $4,%esp
	testl %esi,%esi
	je .L27
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-8(%ebp)
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%edi
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	call *%eax
	movl MI_CG+240,%eax
	call *%eax
	movl MI_CG+224,%eax
	call *%eax
	movl 8(%ebp),%edx
	movl %eax,24(%edx)
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+416,%eax
	call *%eax
	pushl $50
	pushl $0
	movl -8(%ebp),%edx
	pushl %edx
	movl MI_CG+332,%eax
	call *%eax
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+764,%eax
	call *%eax
	pushl $0
	movl MI_M3RT+172,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+144,%eax
	call *%eax
	addl $40,%esp
	pushl $100
	pushl $2
	movl -8(%ebp),%edx
	pushl %edx
	movl MI_CG+332,%eax
	call *%eax
	pushl $MI_TInt+44
	movl MI_CG+428,%eax
	call *%eax
	movl 8(%ebp),%edx
	movl 24(%edx),%eax
	pushl %eax
	movl MI_CG+236,%eax
	call *%eax
	pushl $0
	movl -8(%ebp),%edx
	pushl %edx
	movl MI_CG+316,%eax
	call *%eax
	pushl %edi
	jmp .L29
	.align 16
.L27:
	pushl $2
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-8(%ebp)
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%edi
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	call *%eax
	movl MI_CG+224,%eax
	call *%eax
	movl 8(%ebp),%edx
	movl %eax,24(%edx)
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+416,%eax
	call *%eax
	pushl $50
	pushl %esi
	movl -8(%ebp),%edx
	pushl %edx
	movl MI_CG+332,%eax
	call *%eax
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+764,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,-12(%ebp)
	pushl %eax
	movl MI_CG+228,%eax
	call *%eax
	addl $32,%esp
	pushl %esi
	movl MI_M3RT+172,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+144,%eax
	call *%eax
	pushl %esi
	pushl $2
	movl -8(%ebp),%ebx
	incl %ebx
	pushl %ebx
	movl MI_CG+348,%eax
	call *%eax
	movl -12(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	pushl %esi
	movl MI_M3RT+176,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+144,%eax
	call *%eax
	addl $40,%esp
	pushl %esi
	pushl $2
	movl -8(%ebp),%edx
	pushl %edx
	movl MI_CG+352,%eax
	call *%eax
	pushl %esi
	pushl %ebx
	movl MI_CG+316,%eax
	call *%eax
	pushl $MI_TInt+44
	movl MI_CG+428,%eax
	call *%eax
	movl 8(%ebp),%edx
	movl 24(%edx),%eax
	pushl %eax
	movl MI_CG+236,%eax
	call *%eax
	pushl %esi
	movl -8(%ebp),%edx
	pushl %edx
	movl MI_CG+316,%eax
	call *%eax
	addl $36,%esp
	pushl %edi
	movl MI_CG+232,%eax
	call *%eax
	movl -12(%ebp),%edx
	pushl %edx
.L29:
	movl MI_CG+232,%eax
	call *%eax
.L14:
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 IsType__Prep,.Lfe2-IsType__Prep
	.align 16
	.type	 IsType__Compile,@function
IsType__Compile:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 24(%ebx),%eax
	pushl %eax
	movl MI_CG+228,%eax
	call *%eax
	movl 24(%ebx),%eax
	pushl %eax
	movl MI_CG+232,%eax
	call *%eax
	movl $0,24(%ebx)
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 IsType__Compile,.Lfe3-IsType__Compile
	.align 16
	.type	 IsType__PrepBR,@function
IsType__PrepBR:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	xorl %edi,%edi
	pushl %ebx
	movl 8(%ebp),%ecx
	movl $0,-4(%ebp)
	movl 20(%ecx),%eax
	testl %eax,%eax
	jne .L32
	pushl $2020
	call _m3_fault
	.align 16
.L32:
	movl 4(%eax),%edx
	testl %edx,%edx
	jne .L33
	pushl $2018
	call _m3_fault
	.align 16
.L33:
	movl (%eax),%ebx
	movl (%ebx),%esi
	cmpl $1,%edx
	ja .L35
	pushl $2114
	call _m3_fault
	.align 16
.L35:
	leal -4(%ebp),%eax
	pushl %eax
	movl 4(%ebx),%eax
	pushl %eax
	movl MI_TypeExpr+48,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jne .L36
	pushl %esi
	movl MI_Expr+152,%eax
	call *%eax
	movl %eax,-4(%ebp)
	addl $4,%esp
.L36:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+140,%eax
	call *%eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,-4(%ebp)
	pushl %esi
	movl MI_Expr+152,%eax
	call *%eax
	movl %eax,%ebx
	movl 8(%ebp),%ecx
	addl $12,%esp
	movl 20(%ecx),%eax
	testl %eax,%eax
	jne .L37
	pushl $2228
	call _m3_fault
	.align 16
.L37:
	cmpl $0,4(%eax)
	jne .L38
	pushl $2226
	call _m3_fault
	.align 16
.L38:
	movl (%eax),%eax
	movl (%eax),%eax
	pushl %eax
	movl MI_Expr+200,%eax
	call *%eax
	movl 8(%ebp),%ecx
	addl $4,%esp
	movl 20(%ecx),%eax
	testl %eax,%eax
	jne .L39
	pushl $2244
	call _m3_fault
	.align 16
.L39:
	cmpl $0,4(%eax)
	jne .L40
	pushl $2242
	call _m3_fault
	.align 16
.L40:
	movl (%eax),%eax
	movl (%eax),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl -4(%ebp),%eax
	pushl %eax
	pushl %ebx
	movl MI_Type+120,%eax
	call *%eax
	movl %eax,%ebx
	addl $12,%esp
	testl %ebx,%ebx
	je .L41
	pushl %edi
	movl MI_CG+640,%eax
	call *%eax
	addl $4,%esp
	cmpl $-1,12(%ebp)
	je .L31
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+320,%eax
	jmp .L58
	.align 16
.L41:
	pushl %edi
	movl MI_Null+44,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+116,%eax
	call *%eax
	movl %eax,%ebx
	addl $12,%esp
	testl %ebx,%ebx
	je .L44
	movl MI_CG+416,%eax
	call *%eax
	cmpl $-1,12(%ebp)
	je .L45
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edi
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+332,%eax
	call *%eax
	jmp .L31
	.align 16
.L45:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
	jmp .L31
	.align 16
.L44:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_RefType+56,%eax
	call *%eax
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	je .L47
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-8(%ebp)
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%esi
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+416,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	je .L48
	pushl $50
	pushl $0
	movl 12(%ebp),%ecx
	jmp .L59
	.align 16
.L48:
	pushl $50
	pushl $0
	movl -8(%ebp),%ecx
.L59:
	pushl %ecx
	movl MI_CG+332,%eax
	call *%eax
	addl $12,%esp
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+764,%eax
	call *%eax
	pushl $0
	movl MI_M3RT+172,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+144,%eax
	call *%eax
	addl $16,%esp
	cmpl $-1,12(%ebp)
	je .L50
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $2
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+332,%eax
	call *%eax
	addl $12,%esp
	jmp .L51
	.align 16
.L50:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $2
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
	pushl $0
	movl -8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+316,%eax
	call *%eax
	addl $20,%esp
.L51:
	pushl %esi
	jmp .L60
	.align 16
.L47:
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-8(%ebp)
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%esi
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+416,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	je .L52
	pushl $50
	pushl %ebx
	movl 12(%ebp),%ecx
	jmp .L61
	.align 16
.L52:
	pushl $50
	pushl %ebx
	movl -8(%ebp),%ecx
.L61:
	pushl %ecx
	movl MI_CG+332,%eax
	call *%eax
	addl $12,%esp
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+764,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%edi
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	pushl $0
	movl MI_M3RT+172,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+144,%eax
	call *%eax
	addl $20,%esp
	cmpl $-1,12(%ebp)
	je .L54
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $2
	movl -8(%ebp),%ecx
	jmp .L62
	.align 16
.L54:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $2
	movl 16(%ebp),%ecx
.L62:
	pushl %ecx
	movl MI_CG+348,%eax
	call *%eax
	addl $12,%esp
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	pushl $0
	movl MI_M3RT+176,%eax
	pushl %eax
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Type+144,%eax
	call *%eax
	addl $16,%esp
	cmpl $-1,12(%ebp)
	je .L56
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $2
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+352,%eax
	jmp .L63
	.align 16
.L56:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $2
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+340,%eax
.L63:
	call *%eax
	addl $12,%esp
	pushl $0
	movl -8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+316,%eax
	call *%eax
	pushl %esi
	movl MI_CG+232,%eax
	call *%eax
	pushl %edi
.L60:
	movl MI_CG+232,%eax
.L58:
	call *%eax
.L31:
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 IsType__PrepBR,.Lfe4-IsType__PrepBR
	.align 16
	.type	 IsType__Initialize,@function
IsType__Initialize:
	pushl %ebp
	movl %esp,%ebp
	movl MI_CallExpr+200,%eax
	pushl %eax
	movl MI_CallExpr+164,%eax
	pushl %eax
	pushl %eax
	movl MI_CallExpr+172,%eax
	pushl %eax
	movl MI_CallExpr+196,%eax
	pushl %eax
	movl MM_IsType+60,%eax
	pushl %eax
	movl MI_CallExpr+184,%eax
	pushl %eax
	pushl %eax
	movl MM_IsType+56,%eax
	pushl %eax
	movl MM_IsType+52,%eax
	pushl %eax
	movl MM_IsType+48,%eax
	pushl %eax
	movl MI_CallExpr+176,%eax
	pushl %eax
	pushl $0
	movl MI_Bool+44,%eax
	pushl %eax
	pushl $1
	pushl $0
	pushl $1
	pushl $2
	pushl $2
	movl MI_CallExpr+152,%eax
	call *%eax
	addl $76,%esp
	movl %eax,MM_IsType+44
	pushl $0
	pushl $1
	pushl %eax
	pushl $MM_IsType+236
	movl MI_Procedure+64,%eax
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe5:
	.size	 IsType__Initialize,.Lfe5-IsType__Initialize
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_IsType
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe6:
	.size	 _m3_fault,.Lfe6-_m3_fault
.globl MM_IsType
.data
	.align 4
	.type	 MM_IsType,@object
	.size	 MM_IsType,508
MM_IsType:
	.long MM_IsType+360
	.zero	16
	.long MM_IsType+292
	.zero	4
	.long MM_IsType+356
	.long MM_IsType+356
	.zero	12
	.long IsType__Check
	.long IsType__Prep
	.long IsType__Compile
	.long IsType__PrepBR
	.long IsType__Initialize
	.long 2
	.long MM_IsType+80
	.long 39
	.ascii	"ISTYPE: second argument must be a type"
	.zero	2
	.long 2
	.long MM_IsType+132
	.long 33
	.ascii	"ISTYPE: types must be assignable"
	.zero	4
	.long 2
	.long MM_IsType+180
	.long 50
	.ascii	"ISTYPE: must be a traced reference or object type"
	.zero	3
	.long 2
	.long MM_IsType+244
	.long 7
	.ascii	"ISTYPE"
	.zero	2
	.ascii	"Initialize"
	.zero	1
	.ascii	"PrepBR"
	.zero	1
	.ascii	"Compile"
	.zero	1
	.ascii	"Prep"
	.zero	1
	.ascii	"Check"
	.zero	4
	.long IsType__Initialize
	.long MM_IsType+252
	.long MI_IsType+44
	.long IsType__PrepBR
	.long MM_IsType+263
	.zero	4
	.long IsType__Compile
	.long MM_IsType+270
	.zero	4
	.long IsType__Prep
	.long MM_IsType+278
	.zero	4
	.long IsType__Check
	.long MM_IsType+283
	.zero	8
.byte 42
.byte 44
.byte 4
.byte 0
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/m3fro"
	.ascii	"nt/src/builtinOps/IsType.m3"
	.zero	1
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
