	.file	"EqualExpr.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 EqualExpr__NewEQ,@function
EqualExpr__NewEQ:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl MM_EqualExpr+276,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edi
	pushl %edi
	movl MI_ExprRep+460,%eax
	call *%eax
	movl %ebx,16(%edi)
	movl %esi,20(%edi)
	movb $1,28(%edi)
	movl MI_Bool+44,%eax
	movl %eax,8(%edi)
	movb $0,29(%edi)
	movl $0,32(%edi)
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 EqualExpr__NewEQ,.Lfe1-EqualExpr__NewEQ
	.align 16
	.type	 EqualExpr__NewNE,@function
EqualExpr__NewNE:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl MM_EqualExpr+276,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edi
	pushl %edi
	movl MI_ExprRep+460,%eax
	call *%eax
	movl %ebx,16(%edi)
	movl %esi,20(%edi)
	movb $0,28(%edi)
	movl MI_Bool+44,%eax
	movl %eax,8(%edi)
	movb $0,29(%edi)
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 EqualExpr__NewNE,.Lfe2-EqualExpr__NewNE
	.align 16
	.type	 EqualExpr__Check,@function
EqualExpr__Check:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl $0,-4(%ebp)
	movl 12(%ebp),%eax
	pushl %eax
	movl 16(%edi),%eax
	pushl %eax
	movl MI_Expr+156,%eax
	call *%eax
	movl 12(%ebp),%eax
	pushl %eax
	movl 20(%edi),%eax
	pushl %eax
	movl MI_Expr+156,%eax
	call *%eax
	movl 16(%edi),%eax
	pushl %eax
	movl MI_Expr+152,%eax
	call *%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,%esi
	movl 20(%edi),%eax
	pushl %eax
	movl MI_Expr+152,%eax
	call *%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,%ebx
	addl $32,%esp
	testl %esi,%esi
	je .L4
	testl %ebx,%ebx
	je .L4
	pushl %ebx
	pushl %esi
	movl MI_Type+124,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jne .L5
	pushl %esi
	pushl %ebx
	movl MI_Type+124,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jne .L5
.L4:
	pushl %ebx
	pushl %esi
	xorl %eax,%eax
	movb 28(%edi),%al
	movl MM_EqualExpr+148(,%eax,4),%eax
	pushl %eax
	movl MI_Expr+248,%eax
	call *%eax
	movl %eax,8(%edi)
	addl $12,%esp
.L5:
	pushl %ebx
	pushl %esi
	call EqualExpr__Classify
	movb %al,29(%edi)
	addl $8,%esp
	testb %al,%al
	jne .L3
	movl MI_Textt+44,%eax
	cmpl %eax,%esi
	je .L7
	cmpl %eax,%ebx
	jne .L3
.L7:
	leal -4(%ebp),%ebx
	pushl %ebx
	movl 16(%edi),%eax
	pushl %eax
	movl MI_TextExpr+52,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jne .L8
	pushl %ebx
	movl 20(%edi),%eax
	pushl %eax
	movl MI_TextExpr+52,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	je .L3
.L8:
	pushl $MM_EqualExpr+288
	pushl $1
	movl MI_Error+64,%eax
	call *%eax
.L3:
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 EqualExpr__Check,.Lfe3-EqualExpr__Check
.section	.rodata
	.align 4
	.type	 L_1.0,@object
	.size	 L_1.0,68
L_1.0:
	.long .L13
	.long .L14
	.long .L13
	.long .L13
	.long .L13
	.long .L13
	.long .L14
	.long .L13
	.long .L13
	.long .L13
	.long .L14
	.long .L14
	.long .L14
	.long .L14
	.long .L13
	.long .L15
	.long .L13
.text
	.align 16
	.type	 EqualExpr__Classify,@function
EqualExpr__Classify:
	pushl %ebp
	movl %esp,%ebp
	subl $40,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edx
	movl 12(%ebp),%esi
	movl $0,-40(%ebp)
	movl $0,-36(%ebp)
	movl $0,-32(%ebp)
	movl $0,-28(%ebp)
	movl $0,-24(%ebp)
	movl $0,-20(%ebp)
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	cmpl %edx,MI_Int+44
	je .L20
	cmpl %edx,MI_Reel+44
	je .L20
	cmpl %edx,MI_LReel+44
	je .L20
	cmpl %edx,MI_EReel+44
	je .L20
	leal -40(%ebp),%eax
	pushl %eax
	pushl %edx
	movl MI_Type+68,%eax
	call *%eax
	xorl %eax,%eax
	movb -22(%ebp),%al
	addl $8,%esp
	jmp *L_1.0(,%eax,4)
	.align 16
.L13:
	jmp .L20
	.align 16
.L15:
	movl MI_Target+96,%eax
	cmpl %eax,-40(%ebp)
	jg .L17
.L20:
	xorl %eax,%eax
	jmp .L19
	.align 16
.L14:
.L17:
	leal -20(%ebp),%ebx
	pushl %ebx
	pushl %esi
	movl MI_Type+68,%eax
	call *%eax
	leal -40(%ebp),%eax
	pushl %eax
	call EqualExpr__SimpleStructType
	addl $12,%esp
	testl %eax,%eax
	je .L18
	pushl %ebx
	call EqualExpr__SimpleStructType
	testl %eax,%eax
	je .L18
	movl $1,%eax
	jmp .L19
	.align 16
.L18:
	movl $2,%eax
.L19:
	leal -48(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 EqualExpr__Classify,.Lfe4-EqualExpr__Classify
	.align 16
	.type	 EqualExpr__SimpleStructType,@function
EqualExpr__SimpleStructType:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %ebx
.L22:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl 8(%ebp),%edx
	xorl %ebx,%ebx
	testb $4,19(%edx)
	je .L23
	xorl %eax,%eax
	movb 18(%edx),%al
	cmpl $12,%eax
	je .L23
	cmpl $10,%eax
	je .L23
	movl (%edx),%eax
	testl %eax,%eax
	jl .L23
	pushl %eax
	movl 8(%edx),%eax
	pushl %eax
	call m3_mod
	addl $8,%esp
	testl %eax,%eax
	jne .L23
	movl 8(%ebp),%eax
	movl (%eax),%edx
	pushl %edx
	movl 8(%eax),%eax
	pushl %eax
	call m3_div
	addl $8,%esp
	cmpl $4,%eax
	jg .L23
	movl 8(%ebp),%edx
	movl 8(%edx),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	call EqualExpr__FindCompareType
	cmpl $15,%eax
	setne %al
	xorl %ebx,%ebx
	movb %al,%bl
.L23:
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl %ebx,%eax
.L24:
	movl -12(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe5:
	.size	 EqualExpr__SimpleStructType,.Lfe5-EqualExpr__SimpleStructType
	.align 16
	.type	 EqualExpr__FindCompareType,@function
EqualExpr__FindCompareType:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L26:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl $7,%ebx
.L27:
	leal (%ebx,%ebx,8),%edx
	movl MI_TargetMap+316,%eax
	leal (%eax,%edx,4),%eax
	movl %eax,-12(%ebp)
	cmpl %esi,8(%eax)
	jne .L28
	pushl %edi
	movl 4(%eax),%eax
	pushl %eax
	call m3_mod
	addl $8,%esp
	testl %eax,%eax
	jne .L28
	movl -12(%ebp),%edx
	xorl %eax,%eax
	movb (%edx),%al
	cmpb $1,MI_TargetMap+300(%eax)
	jne .L28
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	xorl %eax,%eax
	movb (%edx),%al
	jmp .L25
	.align 16
.L28:
	decl %ebx
	jns .L27
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl $15,%eax
.L31:
.L25:
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe6:
	.size	 EqualExpr__FindCompareType,.Lfe6-EqualExpr__FindCompareType
	.align 16
	.type	 EqualExpr__EqCheck,@function
EqualExpr__EqCheck:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
	testl %esi,%esi
	je .L36
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%ebx
	shrl $12,%ebx
	cmpl %ebx,MM_EqualExpr+280
	jg .L36
	movl MM_EqualExpr+276,%eax
	cmpl %ebx,4(%eax)
	jl .L36
	xorl %ebx,%ebx
	movb 28(%edi),%al
	cmpb %al,28(%esi)
	jne .L38
	movl 16(%ebp),%edx
	pushl %edx
	movl 16(%esi),%eax
	pushl %eax
	movl 16(%edi),%eax
	pushl %eax
	movl MI_Expr+232,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	je .L38
	movl 16(%ebp),%edx
	pushl %edx
	movl 20(%esi),%eax
	pushl %eax
	movl 20(%edi),%eax
	pushl %eax
	movl MI_Expr+232,%eax
	call *%eax
	testl %eax,%eax
	setne %al
	xorl %ebx,%ebx
	movb %al,%bl
.L38:
	movl %ebx,%eax
	jmp .L40
	.align 16
.L36:
	xorl %eax,%eax
.L40:
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe7:
	.size	 EqualExpr__EqCheck,.Lfe7-EqualExpr__EqCheck
	.align 16
	.type	 EqualExpr__Prep,@function
EqualExpr__Prep:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 16(%edi),%eax
	pushl %eax
	movl MI_Expr+200,%eax
	call *%eax
	movl 20(%edi),%eax
	pushl %eax
	movl MI_Expr+200,%eax
	call *%eax
	xorl %eax,%eax
	movb 29(%edi),%al
	addl $8,%esp
	cmpl $2,%eax
	jne .L41
	pushl %eax
	movl MI_CG+52,%eax
	call *%eax
	pushl $50
	movl %eax,%esi
	pushl %esi
	pushl $-1
	pushl %edi
	call EqualExpr__PrepBR
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	call *%eax
	movl MI_CG+224,%eax
	call *%eax
	movl %eax,32(%edi)
	leal 1(%esi),%ebx
	pushl %ebx
	movl MI_CG+320,%eax
	call *%eax
	pushl $0
	pushl %esi
	movl MI_CG+316,%eax
	call *%eax
	addl $36,%esp
	pushl $MI_TInt+44
	movl MI_CG+428,%eax
	call *%eax
	movl 32(%edi),%eax
	pushl %eax
	movl MI_CG+236,%eax
	call *%eax
	pushl $0
	pushl %ebx
	movl MI_CG+316,%eax
	call *%eax
.L41:
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe8:
	.size	 EqualExpr__Prep,.Lfe8-EqualExpr__Prep
	.align 16
	.type	 EqualExpr__Compile,@function
EqualExpr__Compile:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 16(%ebx),%edx
	movb 29(%ebx),%al
	movl 8(%edx),%esi
	testb %al,%al
	jne .L44
	pushl %edx
	movl MI_Expr+204,%eax
	call *%eax
	movl 20(%ebx),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	addl $8,%esp
	cmpb $0,28(%ebx)
	je .L45
	pushl $0
	pushl %esi
	movl MI_Type+84,%eax
	call *%eax
	addl $8,%esp
	cmpl $5,%eax
	jle .L46
	pushl $3185
	call _m3_fault
	.align 16
.L46:
	pushl %eax
	movl MI_CG+436,%eax
	call *%eax
	jmp .L43
	.align 16
.L45:
	pushl $0
	pushl %esi
	movl MI_Type+84,%eax
	call *%eax
	addl $8,%esp
	cmpl $5,%eax
	jle .L48
	pushl $3201
	call _m3_fault
	.align 16
.L48:
	pushl %eax
	movl MI_CG+440,%eax
	call *%eax
	jmp .L43
	.align 16
.L44:
	cmpb $1,%al
	jne .L50
	pushl %ebx
	call EqualExpr__CompileSolidUnrolled
	jmp .L43
	.align 16
.L50:
	movl 32(%ebx),%eax
	pushl %eax
	movl MI_CG+228,%eax
	call *%eax
	movl 32(%ebx),%eax
	pushl %eax
	movl MI_CG+232,%eax
	call *%eax
	movl $0,32(%ebx)
.L43:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe9:
	.size	 EqualExpr__Compile,.Lfe9-EqualExpr__Compile
	.align 16
	.type	 EqualExpr__CompileSolidUnrolled,@function
EqualExpr__CompileSolidUnrolled:
	pushl %ebp
	movl %esp,%ebp
	subl $48,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
.L52:
	movl $5,-24(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-28(%ebp)
	leal -28(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-20(%ebp)
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl 8(%ebp),%edx
	movl $0,-4(%ebp)
	movl 16(%edx),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl 8(%ebp),%edx
	movl %eax,-44(%ebp)
	movl 20(%edx),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,-40(%ebp)
	leal -20(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%edx
	movl 16(%edx),%eax
	movl 8(%eax),%eax
	pushl %eax
	movl MI_Type+68,%eax
	call *%eax
	movl -12(%ebp),%eax
	pushl %eax
	movl -20(%ebp),%eax
	pushl %eax
	call EqualExpr__FindCompareType
	movb %al,-36(%ebp)
	xorl %eax,%eax
	movb -36(%ebp),%al
	addl $24,%esp
	cmpl $15,%eax
	jne .L53
	pushl $3600
	call _m3_fault
	.align 16
.L53:
	movl MI_TargetMap+172(,%eax,4),%eax
	movl %eax,-32(%ebp)
	movl -20(%ebp),%eax
	pushl %eax
	movl -32(%ebp),%edx
	pushl %edx
	call m3_div
	xorl %edi,%edi
	decl %eax
	movl %eax,-48(%ebp)
	addl $8,%esp
	jmp .L54
	.align 16
.L55:
	movl -44(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	addl $4,%esp
	cmpl $0,-32(%ebp)
	jge .L56
	pushl $3697
	call _m3_fault
	.align 16
.L56:
	movl -32(%ebp),%edx
	pushl %edx
	movl -32(%ebp),%esi
	imull %edi,%esi
	pushl %esi
	xorl %ebx,%ebx
	movb -36(%ebp),%bl
	pushl %ebx
	movl MI_CG+376,%eax
	call *%eax
	movl -40(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	addl $16,%esp
	movl -32(%ebp),%edx
	pushl %edx
	pushl %esi
	pushl %ebx
	movl MI_CG+376,%eax
	call *%eax
	movl 8(%ebp),%edx
	addl $12,%esp
	cmpb $0,28(%edx)
	je .L58
	pushl $1
	movl MI_CG+436,%eax
	call *%eax
	addl $4,%esp
	testl %edi,%edi
	jle .L60
	movl MI_CG+576,%eax
	jmp .L64
	.align 16
.L58:
	pushl $1
	movl MI_CG+440,%eax
	call *%eax
	addl $4,%esp
	testl %edi,%edi
	jle .L60
	movl MI_CG+580,%eax
.L64:
	call *%eax
.L60:
	incl %edi
.L54:
	cmpl %edi,-48(%ebp)
	jge .L55
	movl -44(%ebp),%edx
	pushl %edx
	movl MI_CG+232,%eax
	call *%eax
	movl -40(%ebp),%edx
	pushl %edx
	movl MI_CG+232,%eax
	call *%eax
.L63:
	movl -28(%ebp),%eax
	leal -60(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe10:
	.size	 EqualExpr__CompileSolidUnrolled,.Lfe10-EqualExpr__CompileSolidUnrolled
	.align 16
	.type	 EqualExpr__PrepBR,@function
EqualExpr__PrepBR:
	pushl %ebp
	movl %esp,%ebp
	subl $32,%esp
	pushl %edi
	pushl %esi
	xorl %edi,%edi
	pushl %ebx
	movl 8(%ebp),%esi
	movl %edi,-20(%ebp)
	movl %edi,-16(%ebp)
	movl %edi,-12(%ebp)
	movl %edi,-8(%ebp)
	movl %edi,-4(%ebp)
	movl 16(%esi),%eax
	movl 8(%eax),%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,%ebx
	movl %ebx,-32(%ebp)
	movl 20(%esi),%eax
	movl 8(%eax),%eax
	pushl %eax
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,%ebx
	movl %ebx,-28(%ebp)
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+200,%eax
	call *%eax
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+200,%eax
	call *%eax
	leal -20(%ebp),%eax
	pushl %eax
	movl -32(%ebp),%ecx
	pushl %ecx
	movl MI_Type+68,%eax
	call *%eax
	movl %eax,%ebx
	movl %ebx,-32(%ebp)
	addl $24,%esp
	cmpb $0,29(%esi)
	jne .L66
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	je .L67
	cmpb $0,28(%esi)
	je .L68
	xorl %edx,%edx
	movb -4(%ebp),%dl
	cmpl $5,%edx
	jle .L69
	pushl $4225
	call _m3_fault
	.align 16
.L69:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edx
	movl 12(%ebp),%ecx
	jmp .L97
	.align 16
.L68:
	xorl %edx,%edx
	movb -4(%ebp),%dl
	cmpl $5,%edx
	jle .L71
	pushl $4241
	call _m3_fault
	.align 16
.L71:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edx
	movl 12(%ebp),%ecx
	jmp .L98
	.align 16
.L67:
	cmpb $0,28(%esi)
	je .L73
	xorl %edx,%edx
	movb -4(%ebp),%dl
	cmpl $5,%edx
	jle .L74
	pushl $4305
	call _m3_fault
	.align 16
.L74:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edx
	movl 16(%ebp),%ecx
.L98:
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
	jmp .L65
	.align 16
.L73:
	xorl %edx,%edx
	movb -4(%ebp),%dl
	cmpl $5,%edx
	jle .L76
	pushl $4321
	call _m3_fault
	.align 16
.L76:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edx
	movl 16(%ebp),%ecx
.L97:
	pushl %ecx
	movl MI_CG+332,%eax
	call *%eax
	jmp .L65
	.align 16
.L66:
	xorl %eax,%eax
	movb -2(%ebp),%al
	cmpl $15,%eax
	jne .L77
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	addl $8,%esp
	cmpb $0,28(%esi)
	je .L78
	movl -20(%ebp),%eax
	testl %eax,%eax
	jge .L79
	pushl $4625
	call _m3_fault
	.align 16
.L79:
	pushl %eax
	movl MI_CG+540,%eax
	jmp .L99
	.align 16
.L78:
	movl -20(%ebp),%eax
	testl %eax,%eax
	jge .L81
	pushl $4641
	call _m3_fault
	.align 16
.L81:
	pushl %eax
	movl MI_CG+544,%eax
.L99:
	call *%eax
	addl $4,%esp
	cmpl $-1,12(%ebp)
	jne .L82
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+328,%eax
	call *%eax
	jmp .L65
	.align 16
.L82:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+324,%eax
	call *%eax
	jmp .L65
	.align 16
.L77:
	cmpl $12,%eax
	je .L84
	movl -28(%ebp),%ecx
	pushl %ecx
	movl MI_ProcType+56,%eax
	call *%eax
	addl $4,%esp
	testl %eax,%eax
	je .L85
.L84:
	cmpb $0,28(%esi)
	je .L86
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	movl 12(%ebp),%ecx
	jmp .L100
	.align 16
.L86:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 16(%ebp),%ecx
.L100:
	pushl %ecx
	pushl %esi
	call EqualExpr__CompileProcs
	jmp .L65
	.align 16
.L85:
	xorl %eax,%eax
	movb -2(%ebp),%al
	cmpl $13,%eax
	je .L89
	cmpl $6,%eax
	je .L89
	cmpl $10,%eax
	jne .L90
.L89:
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	movl %ebx,-24(%ebp)
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	movl %ebx,%edi
	addl $8,%esp
	cmpb $0,28(%esi)
	je .L91
	cmpl $-1,16(%ebp)
	jne .L92
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,%esi
	xorl %edx,%edx
	movb 20(%ebp),%dl
	movl $100,%eax
	subl %edx,%eax
	pushl %eax
	pushl %esi
	movl -28(%ebp),%ecx
	pushl %ecx
	movl -32(%ebp),%ecx
	pushl %ecx
	pushl %ebx
	movl -24(%ebp),%ecx
	pushl %ecx
	call EqualExpr__CompileTest
	movl 12(%ebp),%ecx
	jmp .L101
	.align 16
.L92:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 16(%ebp),%ecx
	jmp .L102
	.align 16
.L91:
	cmpl $-1,12(%ebp)
	jne .L95
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,%esi
	xorl %edx,%edx
	movb 20(%ebp),%dl
	movl $100,%eax
	subl %edx,%eax
	pushl %eax
	pushl %esi
	movl -28(%ebp),%ecx
	pushl %ecx
	movl -32(%ebp),%ecx
	pushl %ecx
	pushl %ebx
	movl -24(%ebp),%ecx
	pushl %ecx
	call EqualExpr__CompileTest
	movl 16(%ebp),%ecx
.L101:
	pushl %ecx
	movl MI_CG+320,%eax
	call *%eax
	addl $32,%esp
	pushl $0
	pushl %esi
	movl MI_CG+316,%eax
	call *%eax
	addl $8,%esp
	jmp .L94
	.align 16
.L95:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 12(%ebp),%ecx
.L102:
	pushl %ecx
	movl -28(%ebp),%ecx
	pushl %ecx
	movl -32(%ebp),%ecx
	pushl %ecx
	pushl %ebx
	movl -24(%ebp),%ecx
	pushl %ecx
	call EqualExpr__CompileTest
	addl $24,%esp
.L94:
	movl -24(%ebp),%ecx
	pushl %ecx
	movl MI_CG+232,%eax
	call *%eax
	pushl %edi
	movl MI_CG+232,%eax
	call *%eax
	jmp .L65
	.align 16
.L90:
	movl -28(%ebp),%ecx
	pushl %ecx
	pushl %ebx
	xorl %eax,%eax
	movb 28(%esi),%al
	movl MM_EqualExpr+148(,%eax,4),%eax
	pushl %eax
	movl MI_Expr+248,%eax
	call *%eax
.L65:
	leal -44(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe11:
	.size	 EqualExpr__PrepBR,.Lfe11-EqualExpr__PrepBR
.section	.rodata
	.align 4
	.type	 L_7.1,@object
	.size	 L_7.1,36
L_7.1:
	.long .L116
	.long .L117
	.long .L118
	.long .L115
	.long .L116
	.long .L119
	.long .L115
	.long .L115
	.long .L120
.text
	.align 16
	.type	 EqualExpr__CompileProcs,@function
EqualExpr__CompileProcs:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	leal -8(%ebp),%eax
	pushl %ebx
	movl 8(%ebp),%esi
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	movb $0,-16(%ebp)
	pushl %eax
	movl 16(%esi),%eax
	pushl %eax
	movl MI_UserProc+52,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	je .L104
	movl -8(%ebp),%eax
	testl %eax,%eax
	je .L105
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_EqualExpr+356
	jg .L106
	movl MM_EqualExpr+352,%eax
	cmpl %edx,4(%eax)
	jge .L105
.L106:
	pushl $5637
	call _m3_fault
	.align 16
.L105:
	movl -8(%ebp),%eax
	pushl %eax
	movl MI_Procedure+56,%eax
	call *%eax
	addl $4,%esp
	testl %eax,%eax
	je .L104
	movb $1,-16(%ebp)
	jmp .L107
	.align 16
.L104:
	movl 16(%esi),%eax
	pushl %eax
	call EqualExpr__CanHaveFrame
	addl $4,%esp
	testl %eax,%eax
	je .L107
	movb $2,-16(%ebp)
.L107:
	leal -4(%ebp),%eax
	pushl %eax
	movl 20(%esi),%eax
	pushl %eax
	movl MI_UserProc+52,%eax
	xorb %bl,%bl
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	je .L109
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L110
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_EqualExpr+356
	jg .L111
	movl MM_EqualExpr+352,%eax
	cmpl %edx,4(%eax)
	jge .L110
.L111:
	pushl $5717
	call _m3_fault
	.align 16
.L110:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Procedure+56,%eax
	call *%eax
	addl $4,%esp
	testl %eax,%eax
	je .L109
	movb $1,%bl
	jmp .L112
	.align 16
.L109:
	movl 20(%esi),%eax
	pushl %eax
	call EqualExpr__CanHaveFrame
	addl $4,%esp
	testl %eax,%eax
	je .L112
	movb $2,%bl
.L112:
	cmpb %bl,-16(%ebp)
	jbe .L114
	movb -16(%ebp),%al
	movb %bl,-16(%ebp)
	movb %al,%bl
	movl 16(%esi),%edx
	movl 20(%esi),%eax
	movl %eax,16(%esi)
	movl %edx,20(%esi)
	movl -8(%ebp),%edx
	movl -4(%ebp),%eax
	movl %eax,-8(%ebp)
	movl %edx,-4(%ebp)
.L114:
	xorl %eax,%eax
	movb -16(%ebp),%al
	leal (%eax,%eax,2),%eax
	xorl %edx,%edx
	movb %bl,%dl
	addl %eax,%edx
	js .L115
	cmpl $8,%edx
	jg .L115
	jmp *L_7.1(,%edx,4)
	.align 16
.L116:
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L121
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
	jmp .L103
	.align 16
.L121:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+332,%eax
	call *%eax
	jmp .L103
	.align 16
.L117:
	cmpl $-1,12(%ebp)
	jne .L103
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+320,%eax
	call *%eax
	jmp .L103
	.align 16
.L118:
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,%edi
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L125
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 16(%ebp),%ecx
	pushl %ecx
	jmp .L147
	.align 16
.L125:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $-1
	pushl %edi
.L147:
	pushl %ebx
	movl MI_CG+776,%eax
	call *%eax
	addl $16,%esp
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L127
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	jmp .L148
	.align 16
.L127:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+332,%eax
.L148:
	call *%eax
	addl $12,%esp
	pushl $0
	pushl %edi
	movl MI_CG+316,%eax
	call *%eax
	pushl %ebx
	jmp .L149
	.align 16
.L119:
	pushl $1
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,%edi
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L129
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	movl 12(%ebp),%ecx
	pushl %ecx
	jmp .L150
	.align 16
.L129:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl %edi
	pushl $-1
.L150:
	pushl %ebx
	movl MI_CG+776,%eax
	call *%eax
	addl $16,%esp
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+780,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L131
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	jmp .L151
	.align 16
.L131:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $0
	pushl %edi
.L151:
	movl MI_CG+336,%eax
	call *%eax
	addl $12,%esp
	movl -8(%ebp),%eax
	testl %eax,%eax
	je .L133
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_EqualExpr+356
	jg .L134
	movl MM_EqualExpr+352,%eax
	cmpl %edx,4(%eax)
	jge .L133
.L134:
	pushl $6725
	call _m3_fault
	.align 16
.L133:
	movl -8(%ebp),%eax
	pushl %eax
	movl MI_Procedure+84,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+784,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L135
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	jmp .L152
	.align 16
.L135:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+332,%eax
.L152:
	call *%eax
	addl $12,%esp
	pushl $0
	pushl %edi
	movl MI_CG+316,%eax
	call *%eax
	pushl %ebx
	jmp .L149
	.align 16
.L120:
	pushl $2
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-12(%ebp)
	movl %eax,%edi
	movl 16(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	movl 20(%esi),%eax
	pushl %eax
	movl MI_Expr+204,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	pushl $50
	movl -12(%ebp),%ecx
	pushl %ecx
	pushl $-1
	movl %eax,%esi
	pushl %ebx
	movl MI_CG+776,%eax
	incl %edi
	call *%eax
	addl $28,%esp
	cmpl $-1,12(%ebp)
	jne .L137
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 16(%ebp),%ecx
	pushl %ecx
	jmp .L153
	.align 16
.L137:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $-1
	pushl %edi
.L153:
	pushl %esi
	movl MI_CG+776,%eax
	call *%eax
	addl $16,%esp
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+780,%eax
	call *%eax
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+780,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L139
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	jmp .L154
	.align 16
.L139:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $0
	pushl %edi
.L154:
	movl MI_CG+336,%eax
	call *%eax
	addl $12,%esp
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+784,%eax
	call *%eax
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl MI_CG+784,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L141
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	jmp .L155
	.align 16
.L141:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $0
	pushl %edi
.L155:
	movl MI_CG+336,%eax
	call *%eax
	addl $12,%esp
	pushl $0
	movl -12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+316,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L143
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 16(%ebp),%ecx
	pushl %ecx
	jmp .L156
	.align 16
.L143:
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl $100,%edx
	subl %eax,%edx
	pushl %edx
	pushl $-1
	pushl %edi
.L156:
	pushl %esi
	movl MI_CG+776,%eax
	call *%eax
	addl $16,%esp
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	addl $8,%esp
	cmpl $-1,12(%ebp)
	jne .L145
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	jmp .L157
	.align 16
.L145:
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl $0
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+332,%eax
.L157:
	call *%eax
	addl $12,%esp
	pushl $0
	pushl %edi
	movl MI_CG+316,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+232,%eax
	call *%eax
	pushl %esi
.L149:
	movl MI_CG+232,%eax
	call *%eax
	jmp .L103
	.align 16
.L115:
	pushl $7712
	call _m3_fault
	.align 16
.L103:
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe12:
	.size	 EqualExpr__CompileProcs,.Lfe12-EqualExpr__CompileProcs
	.align 16
	.type	 EqualExpr__CanHaveFrame,@function
EqualExpr__CanHaveFrame:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	leal -4(%ebp),%esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl $0,-4(%ebp)
	pushl %esi
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edi
	movl MI_NamedExpr+52,%eax
	call *%eax
	movl %eax,%ebx
	addl $12,%esp
	testl %ebx,%ebx
	jne .L159
	pushl %esi
	pushl %edi
	movl MI_QualifyExpr+48,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	je .L161
.L159:
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Value+80,%eax
	call *%eax
	addl $4,%esp
	cmpl $4,%eax
	je .L161
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Value+80,%eax
	call *%eax
	addl $4,%esp
	cmpl $1,%eax
	jne .L161
	movl -4(%ebp),%eax
	pushl %eax
	movl MI_Value+104,%eax
	call *%eax
	movl %eax,%edx
	addl $4,%esp
	testl %edx,%edx
	je .L162
	movl -4(%edx),%eax
	sall $11,%eax
	movl %eax,%ecx
	shrl $12,%ecx
	cmpl %ecx,MM_EqualExpr+364
	jg .L163
	movl MM_EqualExpr+360,%eax
	cmpl %ecx,4(%eax)
	jge .L162
.L163:
	pushl $7925
	call _m3_fault
	.align 16
.L162:
	pushl %edx
	movl MI_Variable+68,%eax
	call *%eax
	movl %eax,%ebx
	testl %ebx,%ebx
	je .L161
	movl $1,%eax
	jmp .L164
	.align 16
.L161:
	xorl %eax,%eax
.L164:
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe13:
	.size	 EqualExpr__CanHaveFrame,.Lfe13-EqualExpr__CanHaveFrame
	.align 16
	.type	 EqualExpr__CompileTest,@function
EqualExpr__CompileTest:
	pushl %ebp
	movl %esp,%ebp
	subl $44,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl $0,-40(%ebp)
	movl $0,-36(%ebp)
	movl $0,-32(%ebp)
	movl $0,-28(%ebp)
	movl $0,-24(%ebp)
	movl $0,-20(%ebp)
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_Type+80,%eax
	call *%eax
	movl %eax,%ebx
	movl 20(%ebp),%ecx
	pushl %ecx
	movl MI_Type+80,%eax
	call *%eax
	leal -40(%ebp),%ecx
	movl %ecx,-44(%ebp)
	pushl %ecx
	movl %eax,%esi
	pushl %ebx
	movl MI_Type+68,%eax
	call *%eax
	leal -20(%ebp),%edi
	pushl %edi
	pushl %esi
	movl MI_Type+68,%eax
	call *%eax
	xorl %eax,%eax
	movb -22(%ebp),%al
	addl $24,%esp
	cmpl $13,%eax
	jne .L166
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	movl 24(%ebp),%ecx
	pushl %ecx
	pushl %ebx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 8(%ebp),%ecx
	pushl %ecx
	call EqualExpr__CompileRecord
	jmp .L165
	.align 16
.L166:
	cmpl $6,%eax
	je .L168
	cmpl $10,%eax
	jne .L169
.L168:
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	movl 24(%ebp),%ecx
	pushl %ecx
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 8(%ebp),%ecx
	pushl %ecx
	call EqualExpr__CompileArray
	jmp .L165
	.align 16
.L169:
	cmpl $15,%eax
	jne .L170
	movl 8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_Target+96,%eax
	addl $4,%esp
	cmpl %eax,-40(%ebp)
	jg .L171
	pushl %eax
	pushl $0
	pushl $1
	movl MI_CG+376,%eax
	call *%eax
	addl $12,%esp
.L171:
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_Target+96,%eax
	addl $4,%esp
	cmpl %eax,-40(%ebp)
	jg .L172
	pushl %eax
	pushl $0
	pushl $1
	movl MI_CG+376,%eax
	call *%eax
	addl $12,%esp
.L172:
	movl -40(%ebp),%eax
	testl %eax,%eax
	jge .L173
	pushl $8481
	call _m3_fault
	.align 16
.L173:
	pushl %eax
	movl MI_CG+540,%eax
	call *%eax
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	movl 24(%ebp),%ecx
	pushl %ecx
	movl MI_CG+328,%eax
	call *%eax
	jmp .L165
	.align 16
.L170:
	cmpl $12,%eax
	je .L174
	cmpb $12,-2(%ebp)
	jne .L175
.L174:
	movl 8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_Target+60,%eax
	pushl %eax
	pushl $0
	pushl $0
	movl MI_CG+376,%eax
	call *%eax
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl MI_Target+60,%eax
	pushl %eax
	pushl $0
	pushl $0
	movl MI_CG+376,%eax
	call *%eax
	addl $32,%esp
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	pushl $0
	jmp .L181
	.align 16
.L175:
	movl -44(%ebp),%ecx
	pushl %ecx
	movl 16(%ebp),%ecx
	pushl %ecx
	movl MI_Type+68,%eax
	call *%eax
	pushl %edi
	movl 20(%ebp),%ecx
	pushl %ecx
	movl MI_Type+68,%eax
	call *%eax
	movl 8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl -32(%ebp),%eax
	addl $20,%esp
	testl %eax,%eax
	jge .L176
	pushl $8737
	call _m3_fault
	.align 16
.L176:
	pushl %eax
	movl MI_CG+720,%eax
	call *%eax
	movl -40(%ebp),%eax
	addl $4,%esp
	testl %eax,%eax
	jge .L177
	pushl $8753
	call _m3_fault
	.align 16
.L177:
	pushl %eax
	pushl $0
	xorl %eax,%eax
	movb -24(%ebp),%al
	pushl %eax
	movl MI_CG+376,%eax
	call *%eax
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl -12(%ebp),%eax
	addl $16,%esp
	testl %eax,%eax
	jge .L178
	pushl $8785
	call _m3_fault
	.align 16
.L178:
	pushl %eax
	movl MI_CG+720,%eax
	call *%eax
	movl -20(%ebp),%eax
	addl $4,%esp
	testl %eax,%eax
	jge .L179
	pushl $8801
	call _m3_fault
	.align 16
.L179:
	pushl %eax
	pushl $0
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	movl MI_CG+376,%eax
	call *%eax
	xorl %edx,%edx
	movb -24(%ebp),%dl
	addl $12,%esp
	cmpl $5,%edx
	jle .L180
	pushl $8817
	call _m3_fault
	.align 16
.L180:
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	pushl %edx
.L181:
	movl 24(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
.L165:
	leal -56(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe14:
	.size	 EqualExpr__CompileTest,.Lfe14-EqualExpr__CompileTest
	.align 16
	.type	 EqualExpr__CompileArray,@function
EqualExpr__CompileArray:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%edi
	movl 24(%ebp),%esi
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	xorl %ebx,%ebx
	movb 28(%ebp),%bl
	pushl %ebx
	pushl %esi
	movl 20(%ebp),%edx
	pushl %edx
	movl 16(%ebp),%edx
	pushl %edx
	pushl %edi
	movl 8(%ebp),%edx
	pushl %edx
	call EqualExpr__CompileSolid
	addl $24,%esp
	testl %eax,%eax
	jne .L182
	leal -8(%ebp),%eax
	pushl %eax
	leal -16(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%edx
	pushl %edx
	movl MI_ArrayType+52,%eax
	call *%eax
	leal -4(%ebp),%eax
	pushl %eax
	leal -12(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%edx
	pushl %edx
	movl MI_ArrayType+52,%eax
	call *%eax
	pushl %ebx
	pushl %esi
	movl -4(%ebp),%eax
	pushl %eax
	movl -12(%ebp),%eax
	pushl %eax
	movl -8(%ebp),%eax
	pushl %eax
	movl -16(%ebp),%eax
	pushl %eax
	pushl %edi
	movl 8(%ebp),%edx
	pushl %edx
	call EqualExpr__GenShapeCheck
	addl $56,%esp
	pushl %ebx
	pushl %esi
	pushl %edi
	movl -4(%ebp),%eax
	pushl %eax
	movl -12(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%edx
	pushl %edx
	movl 8(%ebp),%edx
	pushl %edx
	movl -8(%ebp),%eax
	pushl %eax
	movl -16(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%edx
	pushl %edx
	call EqualExpr__GenValueCheck
.L182:
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe15:
	.size	 EqualExpr__CompileArray,.Lfe15-EqualExpr__CompileArray
	.align 16
	.type	 EqualExpr__GenShapeCheck,@function
EqualExpr__GenShapeCheck:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	xorl %esi,%esi
	pushl %ebx
	movl 32(%ebp),%edi
.L185:
	movl 16(%ebp),%eax
	testl %eax,%eax
	je .L194
	cmpl $0,24(%ebp)
	jne .L184
	jmp .L187
	.align 16
.L194:
	movl 8(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	pushl %esi
	movl MI_CG+772,%eax
	call *%eax
	addl $8,%esp
	jmp .L188
	.align 16
.L187:
	leal -8(%ebp),%ebx
	pushl %ebx
	pushl %eax
	movl MI_Type+108,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+428,%eax
	call *%eax
	addl $12,%esp
.L188:
	movl 24(%ebp),%eax
	testl %eax,%eax
	jne .L189
	movl 12(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	pushl %esi
	movl MI_CG+772,%eax
	call *%eax
	addl $8,%esp
	jmp .L190
	.align 16
.L189:
	leal -8(%ebp),%ebx
	pushl %ebx
	pushl %eax
	movl MI_Type+108,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+428,%eax
	call *%eax
	addl $12,%esp
.L190:
	xorl %eax,%eax
	movb 36(%ebp),%al
	pushl %eax
	pushl $2
	pushl %edi
	movl MI_CG+336,%eax
	call *%eax
	leal 20(%ebp),%eax
	pushl %eax
	leal 16(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl MI_ArrayType+52,%eax
	call *%eax
	addl $24,%esp
	testl %eax,%eax
	je .L184
	leal 28(%ebp),%eax
	pushl %eax
	leal 24(%ebp),%eax
	pushl %eax
	movl 28(%ebp),%eax
	pushl %eax
	movl MI_ArrayType+52,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	je .L184
	incl %esi
	jmp .L185
	.align 16
.L184:
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe16:
	.size	 EqualExpr__GenShapeCheck,.Lfe16-EqualExpr__GenShapeCheck
	.align 16
	.type	 EqualExpr__GenValueCheck,@function
EqualExpr__GenValueCheck:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 20(%ebp),%edi
	movl 36(%ebp),%esi
	movl 8(%ebp),%edx
	pushl %edx
	movl MI_OpenArrayType+64,%eax
	call *%eax
	movl %eax,%ebx
	movl 24(%ebp),%edx
	pushl %edx
	movl MI_OpenArrayType+64,%eax
	call *%eax
	addl $8,%esp
	testl %ebx,%ebx
	jle .L200
	testl %eax,%eax
	jle .L196
	cmpl %eax,%ebx
	jg .L197
	xorl %eax,%eax
	movb 44(%ebp),%al
	pushl %eax
	movl 40(%ebp),%edx
	pushl %edx
	pushl %esi
	pushl %edi
	movl 8(%ebp),%edx
	jmp .L204
	.align 16
.L197:
	xorl %eax,%eax
	movb 44(%ebp),%al
	pushl %eax
	movl 40(%ebp),%edx
	pushl %edx
	pushl %esi
	pushl %edi
	movl 24(%ebp),%edx
.L204:
	pushl %edx
	call EqualExpr__GenOpenValueCheck
	jmp .L195
	.align 16
.L196:
	pushl %edi
	movl MI_CG+228,%eax
	call *%eax
	movl 8(%ebp),%edx
	pushl %edx
	movl MI_OpenArrayType+60,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jge .L201
	pushl $9841
	call _m3_fault
	.align 16
.L201:
	pushl %eax
	movl MI_CG+768,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	xorl %eax,%eax
	movb 44(%ebp),%al
	pushl %eax
	movl 40(%ebp),%edx
	pushl %edx
	pushl %esi
	pushl %ebx
	movl 32(%ebp),%edx
	pushl %edx
	movl 28(%ebp),%edx
	pushl %edx
	movl 24(%ebp),%edx
	jmp .L205
	.align 16
.L200:
	testl %eax,%eax
	jle .L202
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	movl 24(%ebp),%edx
	pushl %edx
	movl MI_OpenArrayType+60,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jge .L203
	pushl $9937
	call _m3_fault
	.align 16
.L203:
	pushl %eax
	movl MI_CG+768,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	xorl %eax,%eax
	movb 44(%ebp),%al
	pushl %eax
	movl 40(%ebp),%edx
	pushl %edx
	pushl %ebx
	pushl %edi
	movl 16(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	movl 8(%ebp),%edx
.L205:
	pushl %edx
	call EqualExpr__GenFixedValueCheck
	addl $32,%esp
	pushl %ebx
	movl MI_CG+232,%eax
	call *%eax
	jmp .L195
	.align 16
.L202:
	xorl %eax,%eax
	movb 44(%ebp),%al
	pushl %eax
	movl 40(%ebp),%edx
	pushl %edx
	pushl %esi
	pushl %edi
	movl 16(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	movl 8(%ebp),%edx
	pushl %edx
	call EqualExpr__GenFixedValueCheck
.L195:
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe17:
	.size	 EqualExpr__GenValueCheck,.Lfe17-EqualExpr__GenValueCheck
	.align 16
	.type	 EqualExpr__GenOpenValueCheck,@function
EqualExpr__GenOpenValueCheck:
	pushl %ebp
	movl %esp,%ebp
	subl $44,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
.L207:
	movl $5,-24(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-28(%ebp)
	leal -28(%ebp),%edx
	movl %edx,RTThread__handlerStack
	xorl %ebx,%ebx
	movl %ebx,-20(%ebp)
	movl %ebx,-16(%ebp)
	movl %ebx,-12(%ebp)
	movl %ebx,-8(%ebp)
	movl %ebx,-4(%ebp)
	pushl %edi
	movl MI_OpenArrayType+64,%eax
	call *%eax
	movl %eax,%esi
	pushl %edi
	movl MI_OpenArrayType+68,%eax
	call *%eax
	movl %eax,-40(%ebp)
	leal -20(%ebp),%eax
	pushl %eax
	movl -40(%ebp),%edx
	pushl %edx
	movl MI_Type+68,%eax
	call *%eax
	movl %eax,-40(%ebp)
	movl -12(%ebp),%edi
	movl -20(%ebp),%eax
	addl %edi,%eax
	decl %eax
	pushl %eax
	pushl %edi
	call m3_div
	imull %edi,%eax
	movl %eax,-36(%ebp)
	decl %esi
	addl $24,%esp
	jmp .L208
	.align 16
.L209:
	movl 12(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+772,%eax
	call *%eax
	addl $8,%esp
	testl %ebx,%ebx
	je .L210
	pushl $2
	movl MI_CG+468,%eax
	call *%eax
	addl $4,%esp
.L210:
	incl %ebx
.L208:
	cmpl %esi,%ebx
	jle .L209
	pushl $1
	movl MI_CG+424,%eax
	call *%eax
	pushl $2
	movl MI_CG+464,%eax
	call *%eax
	movl MI_CG+224,%eax
	call *%eax
	movl %eax,%ebx
	pushl $2
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,%esi
	leal 1(%esi),%edx
	movl %edx,-44(%ebp)
	pushl %edx
	movl MI_CG+320,%eax
	call *%eax
	pushl $0
	pushl %esi
	movl MI_CG+316,%eax
	call *%eax
	movl 12(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	addl $28,%esp
	testl %edi,%edi
	jge .L212
	pushl $10609
	call _m3_fault
	.align 16
.L212:
	pushl %edi
	movl MI_CG+768,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl -36(%ebp),%edx
	pushl %edx
	movl MI_CG+712,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,-32(%ebp)
	movl 16(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	addl $16,%esp
	pushl %edi
	movl MI_CG+768,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl -36(%ebp),%edx
	pushl %edx
	movl MI_CG+712,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%edi
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	movl 20(%ebp),%edx
	pushl %edx
	movl -40(%ebp),%edx
	pushl %edx
	pushl %edx
	pushl %edi
	movl -32(%ebp),%edx
	pushl %edx
	call EqualExpr__CompileTest
	addl $36,%esp
	movl -32(%ebp),%edx
	pushl %edx
	movl MI_CG+232,%eax
	call *%eax
	pushl %edi
	movl MI_CG+232,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	call *%eax
	pushl $2
	movl MI_CG+464,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+236,%eax
	call *%eax
	pushl $0
	movl -44(%ebp),%edx
	pushl %edx
	movl MI_CG+316,%eax
	call *%eax
	addl $32,%esp
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl $MI_TInt+44
	movl MI_CG+428,%eax
	call *%eax
	pushl $80
	pushl $2
	pushl %esi
	movl MI_CG+344,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+232,%eax
	call *%eax
.L214:
	movl -28(%ebp),%eax
	leal -56(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe18:
	.size	 EqualExpr__GenOpenValueCheck,.Lfe18-EqualExpr__GenOpenValueCheck
	.align 16
	.type	 EqualExpr__GenFixedValueCheck,@function
EqualExpr__GenFixedValueCheck:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%eax
	movl 20(%ebp),%esi
	leal -12(%ebp),%ebx
	pushl %ebx
	pushl %eax
	movl MI_Type+108,%eax
	call *%eax
	leal -4(%ebp),%eax
	pushl %eax
	pushl %ebx
	movl MI_TInt+72,%eax
	xorl %edi,%edi
	call *%eax
	addl $16,%esp
	testb %al,%al
	jne .L216
	pushl $11280
	call _m3_fault
	.align 16
.L216:
	movl -4(%ebp),%eax
	testl %eax,%eax
	jle .L215
	decl %eax
	pushl %eax
	movl MI_CG+424,%eax
	call *%eax
	movl MI_CG+224,%eax
	call *%eax
	movl %eax,%ebx
	pushl $2
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-16(%ebp)
	pushl %edi
	movl -16(%ebp),%edx
	pushl %edx
	movl MI_CG+316,%eax
	call *%eax
	pushl %esi
	movl MI_CG+228,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl 8(%ebp),%edx
	pushl %edx
	movl MI_ArrayType+72,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%edi
	movl 24(%ebp),%edx
	pushl %edx
	movl MI_CG+228,%eax
	call *%eax
	addl $32,%esp
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	movl 8(%ebp),%edx
	pushl %edx
	movl MI_ArrayType+72,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%esi
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	movl 28(%ebp),%edx
	pushl %edx
	movl 16(%ebp),%edx
	pushl %edx
	pushl %edx
	pushl %esi
	pushl %edi
	call EqualExpr__CompileTest
	addl $32,%esp
	pushl %edi
	movl MI_CG+232,%eax
	call *%eax
	pushl %esi
	movl MI_CG+232,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	call *%eax
	pushl $2
	movl MI_CG+464,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+236,%eax
	call *%eax
	pushl $0
	movl -16(%ebp),%eax
	incl %eax
	pushl %eax
	movl MI_CG+316,%eax
	call *%eax
	addl $32,%esp
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl $MI_TInt+44
	movl MI_CG+428,%eax
	call *%eax
	pushl $80
	pushl $2
	movl -16(%ebp),%edx
	pushl %edx
	movl MI_CG+344,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+232,%eax
	call *%eax
.L215:
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe19:
	.size	 EqualExpr__GenFixedValueCheck,.Lfe19-EqualExpr__GenFixedValueCheck
	.align 16
	.type	 EqualExpr__CompileRecord,@function
EqualExpr__CompileRecord:
	pushl %ebp
	movl %esp,%ebp
	subl $24,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 16(%ebp),%ebx
	movl 20(%ebp),%edi
	movl $0,-24(%ebp)
	movl $0,-20(%ebp)
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %edi
	pushl %ebx
	pushl %ebx
	movl 12(%ebp),%ecx
	pushl %ecx
	movl 8(%ebp),%ecx
	pushl %ecx
	call EqualExpr__CompileSolid
	addl $24,%esp
	testl %eax,%eax
	jne .L218
	leal -24(%ebp),%eax
	pushl %eax
	pushl %ebx
	movl MI_RecordType+52,%eax
	call *%eax
	addl $8,%esp
	jmp .L220
	.align 16
.L221:
	leal -20(%ebp),%eax
	pushl %eax
	pushl %edx
	movl MI_Field+56,%eax
	call *%eax
	movl 8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl -12(%ebp),%eax
	pushl %eax
	movl MI_CG+708,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%esi
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	movl -12(%ebp),%eax
	pushl %eax
	movl MI_CG+708,%eax
	call *%eax
	movl MI_CG+220,%eax
	call *%eax
	movl %eax,%ebx
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %edi
	movl -8(%ebp),%eax
	pushl %eax
	pushl %eax
	pushl %ebx
	pushl %esi
	call EqualExpr__CompileTest
	addl $48,%esp
	pushl %esi
	movl MI_CG+232,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+232,%eax
	call *%eax
	movl -24(%ebp),%eax
	addl $8,%esp
	movl 8(%eax),%eax
	movl %eax,-24(%ebp)
.L220:
	movl -24(%ebp),%edx
	testl %edx,%edx
	jne .L221
.L218:
	leal -36(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe20:
	.size	 EqualExpr__CompileRecord,.Lfe20-EqualExpr__CompileRecord
	.align 16
	.type	 EqualExpr__CompileSolid,@function
EqualExpr__CompileSolid:
	pushl %ebp
	movl %esp,%ebp
	subl $64,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 16(%ebp),%edx
	movl 20(%ebp),%esi
.L224:
	movl $5,-44(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-48(%ebp)
	leal -48(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl $0,-40(%ebp)
	movl $0,-36(%ebp)
	movl $0,-32(%ebp)
	movl $0,-28(%ebp)
	movl $0,-24(%ebp)
	movl $0,-20(%ebp)
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	leal -40(%ebp),%eax
	pushl %eax
	pushl %edx
	movl MI_Type+68,%eax
	call *%eax
	leal -20(%ebp),%eax
	pushl %eax
	pushl %esi
	movl MI_Type+68,%eax
	xorl %ebx,%ebx
	call *%eax
	addl $16,%esp
	testb $4,-21(%ebp)
	je .L241
	testb $4,-1(%ebp)
	je .L241
	movl -40(%ebp),%esi
	testl %esi,%esi
	jl .L241
	cmpl %esi,-20(%ebp)
	jne .L241
	movl -32(%ebp),%edx
	movl -12(%ebp),%eax
	cmpl %edx,%eax
	jle .L229
	movl %edx,%eax
.L229:
	pushl %eax
	pushl %esi
	call EqualExpr__FindCompareType
	movb %al,-52(%ebp)
	movl %eax,%esi
	andl $255,%esi
	addl $8,%esp
	cmpl $15,%esi
	jne .L230
.L241:
	movl -48(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl %ebx,%eax
	jmp .L223
	.align 16
.L230:
	movl MI_TargetMap+172(,%esi,4),%edi
	movl -40(%ebp),%eax
	pushl %eax
	pushl %edi
	call m3_div
	addl $8,%esp
	cmpl $4,%eax
	jg .L231
	movl %ebx,-60(%ebp)
	decl %eax
	movl %eax,-64(%ebp)
	jmp .L232
	.align 16
.L233:
	movl 8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	addl $4,%esp
	testl %edi,%edi
	jge .L234
	pushl $12737
	call _m3_fault
	.align 16
.L234:
	pushl %edi
	movl -60(%ebp),%esi
	imull %edi,%esi
	pushl %esi
	xorl %ebx,%ebx
	movb -52(%ebp),%bl
	pushl %ebx
	movl MI_CG+376,%eax
	call *%eax
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	addl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl MI_CG+376,%eax
	call *%eax
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	pushl $1
	movl 24(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
	incl -60(%ebp)
	addl $24,%esp
.L232:
	movl -64(%ebp),%ecx
	cmpl %ecx,-60(%ebp)
	jle .L233
	jmp .L237
	.align 16
.L231:
	decl %eax
	pushl %eax
	movl MI_CG+424,%eax
	call *%eax
	movl MI_CG+224,%eax
	call *%eax
	movl %eax,%ebx
	pushl $2
	movl MI_CG+52,%eax
	call *%eax
	movl %eax,-56(%ebp)
	pushl $0
	movl -56(%ebp),%ecx
	pushl %ecx
	movl MI_CG+316,%eax
	call *%eax
	movl 8(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl %edi
	movl MI_CG+712,%eax
	call *%eax
	addl $28,%esp
	testl %edi,%edi
	jge .L238
	pushl $13025
	call _m3_fault
	.align 16
.L238:
	pushl %edi
	pushl $0
	pushl %esi
	movl MI_CG+376,%eax
	call *%eax
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_CG+228,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl %edi
	movl MI_CG+712,%eax
	call *%eax
	addl $24,%esp
	pushl %edi
	pushl $0
	pushl %esi
	movl MI_CG+376,%eax
	call *%eax
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	pushl $1
	movl 24(%ebp),%ecx
	pushl %ecx
	movl MI_CG+336,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl $MI_TInt+52
	movl MI_CG+428,%eax
	call *%eax
	addl $32,%esp
	pushl $2
	movl MI_CG+464,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+236,%eax
	call *%eax
	pushl $0
	movl -56(%ebp),%eax
	incl %eax
	pushl %eax
	movl MI_CG+316,%eax
	call *%eax
	pushl %ebx
	movl MI_CG+228,%eax
	call *%eax
	pushl $MI_TInt+44
	movl MI_CG+428,%eax
	call *%eax
	pushl $80
	pushl $2
	movl -56(%ebp),%ecx
	pushl %ecx
	movl MI_CG+344,%eax
	call *%eax
	addl $36,%esp
	pushl %ebx
	movl MI_CG+232,%eax
	call *%eax
.L237:
	movl -48(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl $1,%eax
.L240:
.L223:
	leal -76(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe21:
	.size	 EqualExpr__CompileSolid,.Lfe21-EqualExpr__CompileSolid
	.align 16
	.type	 EqualExpr__Fold,@function
EqualExpr__Fold:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ecx
	movl 16(%ecx),%eax
	pushl %eax
	movl MI_Expr+160,%eax
	call *%eax
	movl %eax,%esi
	addl $4,%esp
	testl %esi,%esi
	je .L253
	movl 8(%ebp),%ecx
	movl 20(%ecx),%eax
	pushl %eax
	movl MI_Expr+160,%eax
	call *%eax
	movl %eax,%ebx
	addl $4,%esp
	testl %ebx,%ebx
	je .L253
	leal -4(%ebp),%edi
	pushl %edi
	pushl %ebx
	pushl %esi
	movl MI_IntegerExpr+52,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	jne .L245
	pushl %edi
	pushl %ebx
	pushl %esi
	movl MI_EnumExpr+56,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	jne .L245
	pushl %edi
	pushl %ebx
	pushl %esi
	movl MI_ReelExpr+48,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	jne .L245
	pushl %edi
	pushl %ebx
	pushl %esi
	movl MI_AddressExpr+52,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	jne .L245
	pushl %edi
	pushl %ebx
	pushl %esi
	movl MI_SetExpr+52,%eax
	call *%eax
	addl $12,%esp
	testl %eax,%eax
	jne .L245
	pushl %edi
	pushl %ebx
	pushl %esi
	movl MI_ProcExpr+52,%eax
	call *%eax
	testl %eax,%eax
	je .L246
.L245:
	movl 8(%ebp),%ecx
	movl $MI_Bool+56,%eax
	xorl %edx,%edx
	movb 28(%ecx),%dl
	cmpl $0,-4(%ebp)
	jne .L247
	cmpl $1,%edx
	jne .L248
	jmp .L254
	.align 16
.L247:
	testl %edx,%edx
	jne .L248
.L254:
	movl $MI_Bool+60,%eax
.L248:
	movl (%eax),%eax
.L246:
.L253:
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe22:
	.size	 EqualExpr__Fold,.Lfe22-EqualExpr__Fold
	.align 16
	.type	 M_EqualExpr_t2c0b6faf_LINK,@function
M_EqualExpr_t2c0b6faf_LINK:
	pushl %ebp
	movl %esp,%ebp
	movl MM_EqualExpr+276,%eax
	movl %ebp,%esp
	movl 52(%eax),%edx
	movl MI_ExprRep+468,%eax
	movl %eax,4(%edx)
	movl MM_EqualExpr+156,%eax
	movl %eax,8(%edx)
	movl MI_ExprRep+464,%eax
	movl %eax,36(%edx)
	movl MM_EqualExpr+176,%eax
	movl %eax,52(%edx)
	movl MM_EqualExpr+180,%eax
	movl %eax,56(%edx)
	movl MI_ExprRep+520,%eax
	movl %eax,60(%edx)
	movl %eax,64(%edx)
	movl MM_EqualExpr+188,%eax
	movl %eax,68(%edx)
	movl MI_ExprRep+532,%eax
	movl %eax,72(%edx)
	movl MM_EqualExpr+232,%eax
	movl %eax,16(%edx)
	movl MM_EqualExpr+172,%eax
	movl %eax,12(%edx)
	movl MI_ExprRep+484,%eax
	movl %eax,20(%edx)
	movl MI_ExprRep+488,%eax
	movl %eax,24(%edx)
	movl %eax,28(%edx)
	movl %eax,32(%edx)
	movl MI_ExprRep+500,%eax
	movl %eax,40(%edx)
	movl MI_ExprRep+504,%eax
	movl %eax,44(%edx)
	movl MI_ExprRep+508,%eax
	movl %eax,48(%edx)
	movl MI_ExprRep+536,%eax
	movl %eax,76(%edx)
	popl %ebp
	ret
.Lfe23:
	.size	 M_EqualExpr_t2c0b6faf_LINK,.Lfe23-M_EqualExpr_t2c0b6faf_LINK
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_EqualExpr
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe24:
	.size	 _m3_fault,.Lfe24-_m3_fault
.globl MM_EqualExpr
.data
	.align 4
	.type	 MM_EqualExpr,@object
	.size	 MM_EqualExpr,1088
MM_EqualExpr:
	.long MM_EqualExpr+896
	.long MM_EqualExpr+44
	.long MM_EqualExpr+276
	.zero	8
	.long MM_EqualExpr+628
	.zero	28
	.long 738946991
.byte 226
.byte 238
.byte 238
.byte 56
.byte 77
.byte 129
.byte 229
.byte 20
	.long 1
	.zero	4
	.long 8
	.long 4
	.zero	4
	.long 0
	.zero	12
	.long MM_EqualExpr+1042
	.long MM_EqualExpr+1047
	.long MM_EqualExpr+1050
	.zero	4
	.long M_EqualExpr_t2c0b6faf_LINK
	.long -345747377
	.zero	12
	.long MM_EqualExpr+1061
	.long MM_EqualExpr+1073
	.zero	4
	.long MM_EqualExpr+248
	.long MM_EqualExpr+264
	.long EqualExpr__Check
	.long EqualExpr__Classify
	.long EqualExpr__SimpleStructType
	.long EqualExpr__FindCompareType
	.long EqualExpr__EqCheck
	.long EqualExpr__Prep
	.long EqualExpr__Compile
	.long EqualExpr__CompileSolidUnrolled
	.long EqualExpr__PrepBR
	.long EqualExpr__CompileProcs
	.long EqualExpr__CanHaveFrame
	.long EqualExpr__CompileTest
	.long EqualExpr__CompileArray
	.long EqualExpr__GenShapeCheck
	.long EqualExpr__GenValueCheck
	.long EqualExpr__GenOpenValueCheck
	.long EqualExpr__GenFixedValueCheck
	.long EqualExpr__CompileRecord
	.long EqualExpr__CompileSolid
	.long EqualExpr__Fold
	.long EqualExpr__NewEQ
	.long EqualExpr__NewNE
	.long 2
	.long MM_EqualExpr+256
	.long 4
	.ascii	"'#'"
	.zero	1
	.long 2
	.long MM_EqualExpr+272
	.long 4
	.ascii	"'='"
	.zero	1
	.long MM_EqualExpr+352
	.long 738946991
	.long 2
	.long MM_EqualExpr+296
	.long 54
	.ascii	"comparing pointers, use Text.Equal to compare strings"
	.zero	3
	.long MM_EqualExpr+360
	.long -712670126
	.zero	4
	.long 149856025
	.ascii	"Fold"
	.zero	1
	.ascii	"CompileSolid"
	.zero	1
	.ascii	"CompileRecord"
	.zero	1
	.ascii	"GenFixedValueCheck"
	.zero	1
	.ascii	"GenOpenValueCheck"
	.zero	1
	.ascii	"GenValueCheck"
	.zero	1
	.ascii	"GenShapeCheck"
	.zero	1
	.ascii	"CompileArray"
	.zero	1
	.ascii	"CompileTest"
	.zero	1
	.ascii	"CanHaveFrame"
	.zero	1
	.ascii	"CompileProcs"
	.zero	1
	.ascii	"PrepBR"
	.zero	1
	.ascii	"CompileSolidUnrolled"
	.zero	1
	.ascii	"Compile"
	.zero	1
	.ascii	"Prep"
	.zero	1
	.ascii	"EqCheck"
	.zero	1
	.ascii	"FindCompareType"
	.zero	1
	.ascii	"SimpleStructType"
	.zero	1
	.ascii	"Classify"
	.zero	1
	.ascii	"Check"
	.zero	1
	.ascii	"NewNE"
	.zero	1
	.ascii	"NewEQ"
	.zero	4
	.long EqualExpr__Fold
	.long MM_EqualExpr+368
	.zero	4
	.long EqualExpr__CompileSolid
	.long MM_EqualExpr+373
	.zero	4
	.long EqualExpr__CompileRecord
	.long MM_EqualExpr+386
	.zero	4
	.long EqualExpr__GenFixedValueCheck
	.long MM_EqualExpr+400
	.zero	4
	.long EqualExpr__GenOpenValueCheck
	.long MM_EqualExpr+419
	.zero	4
	.long EqualExpr__GenValueCheck
	.long MM_EqualExpr+437
	.zero	4
	.long EqualExpr__GenShapeCheck
	.long MM_EqualExpr+451
	.zero	4
	.long EqualExpr__CompileArray
	.long MM_EqualExpr+465
	.zero	4
	.long EqualExpr__CompileTest
	.long MM_EqualExpr+478
	.zero	4
	.long EqualExpr__CanHaveFrame
	.long MM_EqualExpr+490
	.zero	4
	.long EqualExpr__CompileProcs
	.long MM_EqualExpr+503
	.zero	4
	.long EqualExpr__PrepBR
	.long MM_EqualExpr+516
	.zero	4
	.long EqualExpr__CompileSolidUnrolled
	.long MM_EqualExpr+523
	.zero	4
	.long EqualExpr__Compile
	.long MM_EqualExpr+544
	.zero	4
	.long EqualExpr__Prep
	.long MM_EqualExpr+552
	.zero	4
	.long EqualExpr__EqCheck
	.long MM_EqualExpr+557
	.zero	4
	.long EqualExpr__FindCompareType
	.long MM_EqualExpr+565
	.zero	4
	.long EqualExpr__SimpleStructType
	.long MM_EqualExpr+581
	.zero	4
	.long EqualExpr__Classify
	.long MM_EqualExpr+598
	.zero	4
	.long EqualExpr__Check
	.long MM_EqualExpr+607
	.zero	4
	.long EqualExpr__NewNE
	.long MM_EqualExpr+613
	.long MI_EqualExpr+48
	.long EqualExpr__NewEQ
	.long MM_EqualExpr+619
	.long MI_EqualExpr+44
	.zero	4
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/m3fro"
	.ascii	"nt/src/exprs/EqualExpr.m3"
	.zero	1
.byte 16
.byte 16
.byte 35
.byte 4
.byte 0
.byte 37
.byte 4
.byte 0
.byte 4
.byte 10
.byte 3
.byte 2
.byte 5
.byte 3
.byte 16
.byte 194
.byte 223
.byte 210
.byte 77
	.ascii	"EqualExpr.P"
	.zero	1
	.ascii	"EqualExpr.P"
	.zero	4
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
