	.file	"M3CG_Rd.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 M3CG_Rd__Inhale,@function
M3CG_Rd__Inhale:
	pushl %ebp
	movl %esp,%ebp
	subl $56,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $36
	pushl $0
	leal -40(%ebp),%eax
	pushl %eax
	call memset
	movl %ebx,-40(%ebp)
	movl %esi,-36(%ebp)
	movb $32,-32(%ebp)
	movl MM_M3CG_Rd+6532,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	movl %ecx,-28(%ebp)
	movl $0,-24(%ebp)
	movl $0,-20(%ebp)
	leal -52(%ebp),%esi
	leal -44(%ebp),%ebx
	movl %ebx,-52(%ebp)
	movl $1,-48(%ebp)
	movl $400,-44(%ebp)
	pushl %esi
	movl MM_M3CG_Rd+6540,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ecx
	movl %ecx,-16(%ebp)
	movl %ebx,-52(%ebp)
	movl $1,-48(%ebp)
	movl $50,-44(%ebp)
	pushl %esi
	movl MM_M3CG_Rd+6548,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ecx
	movl %ecx,-12(%ebp)
	movl %ebx,-52(%ebp)
	movl $1,-48(%ebp)
	addl $32,%esp
	movl $400,-44(%ebp)
	pushl %esi
	movl MM_M3CG_Rd+6556,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ecx
	movl %ecx,-8(%ebp)
	addl $8,%esp
	testl %ecx,%ecx
	jne .L2
	pushl $3604
	call _m3_fault
	.align 16
.L2:
	xorl %edx,%edx
	movl 4(%ecx),%ebx
	decl %ebx
	jmp .L3
	.align 16
.L4:
	movl -8(%ebp),%eax
	testl %eax,%eax
	jne .L5
	pushl $3604
	call _m3_fault
	.align 16
.L5:
	movl %eax,%ecx
	cmpl %edx,4(%ecx)
	ja .L6
	pushl $3602
	call _m3_fault
	.align 16
.L6:
	movl (%ecx),%eax
	movl $-1,(%eax,%edx,4)
	incl %edx
.L3:
	cmpl %ebx,%edx
	jle .L4
	cmpl $0,MM_M3CG_Rd+1668
	jne .L9
	call M3CG_Rd__Init
.L9:
	leal -40(%ebp),%edi
	pushl %edi
	call M3CG_Rd__Skip_white_space
	pushl %edi
	call M3CG_Rd__Scan_id
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	je .L1
	movl MM_M3CG_Rd+1668,%edx
	movl (%edx),%eax
	movl 4(%eax),%ecx
	movl %ebx,-56(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	leal -56(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	movl %eax,%esi
	addl $12,%esp
	testl %esi,%esi
	je .L12
	movl -4(%ebp),%eax
	cmpl $155,%eax
	jbe .L13
	pushl $3713
	call _m3_fault
	.align 16
.L13:
	movl MM_M3CG_Rd+360(,%eax,8),%ecx
	pushl %edi
	call *%ecx
	addl $4,%esp
	jmp .L14
	.align 16
.L12:
	pushl %ebx
	movl MI_M3ID+52,%eax
	call *%eax
	pushl %esi
	movl %eax,%ecx
	pushl %ecx
	pushl $MM_M3CG_Rd+6568
	pushl %edi
	call M3CG_Rd__Error
	addl $20,%esp
.L14:
	leal -40(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Skip_line
	addl $4,%esp
	jmp .L9
	.align 16
.L1:
	leal -68(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 M3CG_Rd__Inhale,.Lfe1-M3CG_Rd__Inhale
	.align 16
	.type	 M3CG_Rd__Init,@function
M3CG_Rd__Init:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %ebx
	movl MM_M3CG_Rd+6600,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl (%edx),%eax
	movl 24(%eax),%ecx
	pushl $312
	pushl %edx
	call *%ecx
	movl %eax,%ecx
	movl %ecx,MM_M3CG_Rd+1668
	movl $0,-4(%ebp)
	addl $12,%esp
.L16:
	pushl $0
	movl -4(%ebp),%eax
	movl MM_M3CG_Rd+356(,%eax,8),%eax
	pushl %eax
	movl MI_M3ID+44,%eax
	call *%eax
	movl MM_M3CG_Rd+1668,%edx
	movl %eax,%ebx
	movl (%edx),%eax
	movl 8(%eax),%ecx
	movl %ebx,-8(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	movl -4(%ebp),%eax
	incl %eax
	movl %eax,-4(%ebp)
	addl $20,%esp
	cmpl $155,%eax
	jle .L16
	movl MM_M3CG_Rd+6600,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	movl (%ecx),%eax
	movl 24(%eax),%edx
	pushl $32
	pushl %ecx
	call *%edx
	movl %eax,%ecx
	movl %ecx,MM_M3CG_Rd+1672
	movl $0,-8(%ebp)
	addl $12,%esp
.L19:
	pushl $0
	movl -8(%ebp),%eax
	movl MM_M3CG_Rd+1604(,%eax,4),%eax
	pushl %eax
	movl MI_M3ID+44,%eax
	call *%eax
	movl MM_M3CG_Rd+1672,%edx
	movl %eax,%ebx
	movl (%edx),%eax
	movl 8(%eax),%ecx
	movl %ebx,-4(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	leal -4(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	movl -8(%ebp),%eax
	incl %eax
	movl %eax,-8(%ebp)
	addl $20,%esp
	cmpl $15,%eax
	jle .L19
	movl -12(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 M3CG_Rd__Init,.Lfe2-M3CG_Rd__Init
	.align 16
	.type	 M3CG_Rd__Error,@function
M3CG_Rd__Error:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%ebx
	movl 16(%ebp),%esi
	movl 20(%ebp),%edi
.L23:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	pushl $MM_M3CG_Rd+6612
	movl MI_Target+816,%eax
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $8,%esp
	testl %ebx,%ebx
	je .L24
	pushl %ebx
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $8,%esp
.L24:
	testl %esi,%esi
	je .L25
	pushl %esi
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $8,%esp
.L25:
	testl %edi,%edi
	je .L26
	pushl %edi
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $8,%esp
.L26:
	pushl $MM_M3CG_Rd+6656
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	movl MI_Target+816,%eax
	pushl %eax
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %eax
	movl MI_Stdio+48,%eax
	pushl %eax
	movl MI_Wr+68,%eax
	call *%eax
.L27:
	movl -8(%ebp),%eax
	leal -20(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 M3CG_Rd__Error,.Lfe3-M3CG_Rd__Error
	.align 16
	.type	 M3CG_Rd__Scan_word,@function
M3CG_Rd__Scan_word:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	pushl %esi
	leal -100(%ebp),%esi
	pushl %ebx
	movl %esi,-108(%ebp)
	movl $100,-104(%ebp)
	leal -108(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%edx
	addl $8,%esp
	testl %eax,%eax
	je .L32
	jge .L30
	pushl $4289
	call _m3_fault
	.align 16
.L30:
	cmpl $100,%eax
	jle .L31
	pushl $4289
	call _m3_fault
	.align 16
.L31:
	movl %edx,-104(%ebp)
	movl %esi,-108(%ebp)
	pushl %ebx
	movl MI_Text+76,%eax
	call *%eax
.L32:
	leal -116(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 M3CG_Rd__Scan_word,.Lfe4-M3CG_Rd__Scan_word
	.align 16
	.type	 M3CG_Rd__Scan_id,@function
M3CG_Rd__Scan_id:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	pushl %esi
	leal -100(%ebp),%esi
	pushl %ebx
	movl %esi,-108(%ebp)
	movl $100,-104(%ebp)
	leal -108(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	addl $8,%esp
	testl %eax,%eax
	je .L37
	jge .L35
	pushl $4401
	call _m3_fault
	.align 16
.L35:
	cmpl $100,%eax
	jle .L36
	pushl $4401
	call _m3_fault
	.align 16
.L36:
	movl %eax,-104(%ebp)
	movl %esi,-108(%ebp)
	pushl $99999
	pushl %ebx
	movl MI_M3ID+48,%eax
	call *%eax
.L37:
	leal -116(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe5:
	.size	 M3CG_Rd__Scan_id,.Lfe5-M3CG_Rd__Scan_id
	.align 16
	.type	 M3CG_Rd__Scan_name,@function
M3CG_Rd__Scan_name:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	leal -100(%ebp),%edx
	leal -108(%ebp),%eax
	pushl %ebx
	movl %edx,-108(%ebp)
	movl $100,-104(%ebp)
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jne .L39
	pushl %ebx
	pushl %ebx
	pushl $MM_M3CG_Rd+6672
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	xorl %eax,%eax
	jmp .L43
	.align 16
.L39:
	cmpl $1,%ebx
	jne .L40
	cmpb $42,-100(%ebp)
	jne .L40
	xorl %eax,%eax
	jmp .L43
	.align 16
.L40:
	testl %eax,%eax
	jge .L41
	pushl $4529
	call _m3_fault
	.align 16
.L41:
	cmpl $100,%eax
	jle .L42
	pushl $4529
	call _m3_fault
	.align 16
.L42:
	movl %eax,-104(%ebp)
	leal -100(%ebp),%edx
	movl %edx,-108(%ebp)
	pushl $99999
	leal -108(%ebp),%eax
	pushl %eax
	movl MI_M3ID+48,%eax
	call *%eax
	movl %eax,%ebx
.L43:
	movl -112(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe6:
	.size	 M3CG_Rd__Scan_name,.Lfe6-M3CG_Rd__Scan_name
	.align 16
	.type	 M3CG_Rd__Scan_text,@function
M3CG_Rd__Scan_text:
	pushl %ebp
	movl %esp,%ebp
	subl $276,%esp
	pushl %edi
	pushl %esi
	movl $MM_M3CG_Rd+6700,%esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Skip_blanks
	movl 8(%ebp),%eax
	addl $4,%esp
	xorl %edx,%edx
	movb 8(%eax),%dl
	cmpl $42,%edx
	jne .L45
	pushl %eax
	call M3CG_Rd__GetCh
	xorl %eax,%eax
	jmp .L60
	.align 16
.L45:
	cmpl $34,%edx
	je .L46
	pushl $0
	pushl $0
	pushl $MM_M3CG_Rd+6716
	pushl %eax
	call M3CG_Rd__Error
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_word
	jmp .L60
	.align 16
.L46:
	pushl %eax
	call M3CG_Rd__GetCh
	xorl %ebx,%ebx
.L61:
	addl $4,%esp
	movl 8(%ebp),%edx
	movb 8(%edx),%al
	xorl %ecx,%ecx
	movb %al,%cl
	cmpl $34,%ecx
	jne .L48
	pushl %edx
	call M3CG_Rd__GetCh
	addl $4,%esp
	jmp .L49
	.align 16
.L48:
	testb %al,%al
	je .L49
	cmpl $92,%ecx
	jne .L51
	leal -12(%ebp),%eax
	pushl %eax
	pushl %edx
	call M3CG_Rd__GetDigit
	addl $8,%esp
	testl %eax,%eax
	je .L51
	leal -8(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetDigit
	addl $8,%esp
	testl %eax,%eax
	je .L51
	leal -4(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetDigit
	addl $8,%esp
	testl %eax,%eax
	je .L51
	movl -12(%ebp),%eax
	sall $6,%eax
	movl -8(%ebp),%edi
	leal 0(,%edi,8),%edx
	addl %edx,%eax
	movl %eax,%edx
	addl -4(%ebp),%edx
	cmpl $255,%edx
	jbe .L53
	pushl $4929
	call _m3_fault
	.align 16
.L53:
	movl 8(%ebp),%eax
	movb %dl,8(%eax)
.L51:
	cmpl $255,%ebx
	jle .L54
	testl %ebx,%ebx
	jge .L55
	pushl $5009
	call _m3_fault
	.align 16
.L55:
	cmpl $256,%ebx
	jle .L56
	pushl $5009
	call _m3_fault
	.align 16
.L56:
	movl %ebx,-272(%ebp)
	leal -268(%ebp),%edi
	movl %edi,-276(%ebp)
	leal -276(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	xorl %ebx,%ebx
	addl $12,%esp
.L54:
	cmpl $255,%ebx
	jbe .L57
	pushl $5073
	call _m3_fault
	.align 16
.L57:
	movl 8(%ebp),%eax
	movb 8(%eax),%al
	movb %al,-268(%ebx,%ebp)
	incl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	jmp .L61
	.align 16
.L49:
	testl %ebx,%ebx
	jge .L58
	pushl $5121
	call _m3_fault
	.align 16
.L58:
	cmpl $256,%ebx
	jle .L59
	pushl $5121
	call _m3_fault
	.align 16
.L59:
	movl %ebx,-272(%ebp)
	leal -268(%ebp),%edi
	movl %edi,-276(%ebp)
	leal -276(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
.L60:
	leal -288(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe7:
	.size	 M3CG_Rd__Scan_text,.Lfe7-M3CG_Rd__Scan_text
	.align 16
	.type	 M3CG_Rd__GetDigit,@function
M3CG_Rd__GetDigit:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 12(%ebp),%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	movl 8(%ebp),%eax
	addl $4,%esp
	movb 8(%eax),%al
	andl $255,%eax
	cmpl $47,%eax
	jle .L63
	cmpl $55,%eax
	jle .L64
.L63:
	pushl %eax
	movl MI_Text+72,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+6740
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl $0,(%ebx)
	xorl %eax,%eax
	jmp .L65
	.align 16
.L64:
	addl $-48,%eax
	movl %eax,(%ebx)
	movl $1,%eax
.L65:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe8:
	.size	 M3CG_Rd__GetDigit,.Lfe8-M3CG_Rd__GetDigit
	.align 16
	.type	 M3CG_Rd__CvtInt,@function
M3CG_Rd__CvtInt:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %ebx
	pushl $10
	leal -4(%ebp),%eax
	pushl %eax
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_Convert+84,%eax
	call *%eax
	movl %eax,%ebx
	movl 12(%ebp),%edx
	movl -4(%ebp),%eax
	addl $12,%esp
	cmpl %eax,4(%edx)
	je .L67
	pushl %edx
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+6772
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
.L67:
	movl %ebx,%eax
	movl -8(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe9:
	.size	 M3CG_Rd__CvtInt,.Lfe9-M3CG_Rd__CvtInt
	.align 16
	.type	 M3CG_Rd__Scan_int,@function
M3CG_Rd__Scan_int:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	pushl %esi
	leal -100(%ebp),%esi
	pushl %ebx
	movl %esi,-108(%ebp)
	movl $100,-104(%ebp)
	leal -108(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	addl $8,%esp
	testl %eax,%eax
	jge .L69
	pushl $5585
	call _m3_fault
	.align 16
.L69:
	cmpl $100,%eax
	jle .L70
	pushl $5585
	call _m3_fault
	.align 16
.L70:
	movl %eax,-104(%ebp)
	movl %esi,-108(%ebp)
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__CvtInt
	leal -116(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe10:
	.size	 M3CG_Rd__Scan_int,.Lfe10-M3CG_Rd__Scan_int
	.align 16
	.type	 M3CG_Rd__Scan_Tint,@function
M3CG_Rd__Scan_Tint:
	pushl %ebp
	movl %esp,%ebp
	subl $136,%esp
	pushl %edi
	leal -136(%ebp),%edi
	pushl %esi
	leal -120(%ebp),%esi
	pushl %ebx
	movl %esi,-136(%ebp)
	movl $100,-132(%ebp)
	pushl %edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jge .L72
	pushl $5697
	call _m3_fault
	.align 16
.L72:
	cmpl $100,%ebx
	jle .L73
	pushl $5697
	call _m3_fault
	.align 16
.L73:
	movl %ebx,-132(%ebp)
	movl %esi,-136(%ebp)
	pushl $10
	leal -4(%ebp),%eax
	pushl %eax
	pushl %edi
	movl MI_Convert+84,%eax
	call *%eax
	movl %eax,%edx
	addl $12,%esp
	cmpl %ebx,-4(%ebp)
	jne .L74
	leal -20(%ebp),%eax
	pushl %eax
	pushl %edx
	movl MI_TInt+68,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	jne .L85
.L74:
	cmpb $45,-120(%ebp)
	je .L75
	testl %ebx,%ebx
	jge .L76
	pushl $5761
	call _m3_fault
	.align 16
.L76:
	cmpl $100,%ebx
	jle .L77
	pushl $5761
	call _m3_fault
	.align 16
.L77:
	movl %ebx,-132(%ebp)
	leal -120(%ebp),%ecx
	movl %ecx,-136(%ebp)
	leal -20(%ebp),%eax
	pushl %eax
	leal -136(%ebp),%eax
	pushl %eax
	movl MI_TInt+76,%eax
	call *%eax
	addl $8,%esp
	jmp .L86
	.align 16
.L75:
	leal -1(%ebx),%eax
	testl %eax,%eax
	jge .L80
	pushl $5793
	call _m3_fault
	.align 16
.L80:
	cmpl $99,%eax
	jle .L81
	pushl $5793
	call _m3_fault
	.align 16
.L81:
	movl %eax,-132(%ebp)
	leal -119(%ebp),%ecx
	movl %ecx,-136(%ebp)
	leal -12(%ebp),%esi
	pushl %esi
	leal -136(%ebp),%eax
	pushl %eax
	movl MI_TInt+76,%eax
	call *%eax
	addl $8,%esp
	testl %eax,%eax
	je .L79
	leal -20(%ebp),%eax
	pushl %eax
	pushl %esi
	pushl $MI_TInt+44
	movl MI_TInt+84,%eax
	call *%eax
	addl $12,%esp
.L86:
	testl %eax,%eax
	je .L79
.L85:
	movl 12(%ebp),%eax
	movl -20(%ebp),%edx
	movl %edx,(%eax)
	movl -16(%ebp),%edx
	movl %edx,4(%eax)
	jmp .L71
	.align 16
.L79:
	testl %ebx,%ebx
	jge .L83
	pushl $5873
	call _m3_fault
	.align 16
.L83:
	cmpl $100,%ebx
	jle .L84
	pushl $5873
	call _m3_fault
	.align 16
.L84:
	movl %ebx,-132(%ebp)
	leal -120(%ebp),%ecx
	movl %ecx,-136(%ebp)
	leal -136(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+6800
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl 12(%ebp),%edx
	movl MI_TInt+44,%eax
	movl %eax,(%edx)
	movl MI_TInt+48,%eax
	movl %eax,4(%edx)
.L71:
	leal -148(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe11:
	.size	 M3CG_Rd__Scan_Tint,.Lfe11-M3CG_Rd__Scan_Tint
	.align 16
	.type	 M3CG_Rd__Scan_float,@function
M3CG_Rd__Scan_float:
	pushl %ebp
	movl %esp,%ebp
	subl $152,%esp
	pushl %edi
	leal -140(%ebp),%edi
	pushl %esi
	leal -116(%ebp),%esi
	pushl %ebx
	movl $0,-16(%ebp)
	movl $0,-12(%ebp)
	movl $0,-8(%ebp)
	movl $0,-4(%ebp)
	movl %esi,-140(%ebp)
	movl $100,-136(%ebp)
	pushl %edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%ebx
	movb $0,-144(%ebp)
	addl $8,%esp
	cmpl $1,%ebx
	jne .L92
	xorl %eax,%eax
	movb -116(%ebp),%al
	cmpl $82,%eax
	je .L89
	cmpl $76,%eax
	jne .L91
	incb -144(%ebp)
	jmp .L89
	.align 16
.L91:
	cmpl $88,%eax
	jne .L92
	movb $2,-144(%ebp)
	jmp .L89
	.align 16
.L92:
	movl %esi,-140(%ebp)
	movl $100,-136(%ebp)
	pushl %ebx
	pushl %edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__BadPrec
	addl $12,%esp
.L89:
	leal -116(%ebp),%edi
	movl %edi,-140(%ebp)
	movl $100,-136(%ebp)
	leal -140(%ebp),%esi
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jge .L93
	pushl $6113
	call _m3_fault
	.align 16
.L93:
	cmpl $100,%ebx
	jle .L94
	pushl $6113
	call _m3_fault
	.align 16
.L94:
	movl %ebx,-136(%ebp)
	movl %edi,-140(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	xorl %eax,%eax
	movb -144(%ebp),%al
	pushl %eax
	pushl %esi
	movl MI_TFloat+92,%eax
	call *%eax
	movl %eax,-148(%ebp)
	addl $12,%esp
	testl %eax,%eax
	je .L95
	movl 12(%ebp),%edx
	movl -16(%ebp),%eax
	movl %eax,(%edx)
	movl -12(%ebp),%eax
	movl %eax,4(%edx)
	movl -8(%ebp),%eax
	movl %eax,8(%edx)
	movl -4(%ebp),%eax
	movl %eax,12(%edx)
	jmp .L87
	.align 16
.L95:
	testl %ebx,%ebx
	jge .L96
	pushl $6129
	call _m3_fault
	.align 16
.L96:
	cmpl $100,%ebx
	jle .L97
	pushl $6129
	call _m3_fault
	.align 16
.L97:
	movl %ebx,-136(%ebp)
	movl %edi,-140(%ebp)
	pushl %esi
	movl MI_Text+76,%eax
	call *%eax
	movl -148(%ebp),%ecx
	pushl %ecx
	pushl %eax
	pushl $MM_M3CG_Rd+6832
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl 12(%ebp),%ecx
	movl $MI_TFloat+44,%edx
	movl MI_TFloat+44,%eax
	movl %eax,(%ecx)
	movl 4(%edx),%eax
	movl %eax,4(%ecx)
	movl 8(%edx),%eax
	movl %eax,8(%ecx)
	movl 12(%edx),%eax
	movl %eax,12(%ecx)
.L87:
	leal -164(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe12:
	.size	 M3CG_Rd__Scan_float,.Lfe12-M3CG_Rd__Scan_float
	.align 16
	.type	 M3CG_Rd__BadPrec,@function
M3CG_Rd__BadPrec:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	movl 16(%ebp),%eax
	testl %eax,%eax
	jge .L99
	pushl $6225
	call _m3_fault
	.align 16
.L99:
	movl 12(%ebp),%edx
	movl %eax,-4(%ebp)
	subl 4(%edx),%eax
	testl %eax,%eax
	jle .L100
	pushl $6225
	call _m3_fault
	.align 16
.L100:
	movl (%edx),%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+6860
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe13:
	.size	 M3CG_Rd__BadPrec,.Lfe13-M3CG_Rd__BadPrec
	.align 16
	.type	 M3CG_Rd__Scan_type,@function
M3CG_Rd__Scan_type:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_id
	movl MM_M3CG_Rd+1672,%edx
	movl %eax,%esi
	movl (%edx),%eax
	movl 4(%eax),%ecx
	movl %esi,-8(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	movl %eax,%ebx
	addl $16,%esp
	testl %ebx,%ebx
	je .L102
	movl -4(%ebp),%eax
	cmpl $15,%eax
	jbe .L104
	pushl $6337
	call _m3_fault
	.align 16
.L102:
	pushl %esi
	movl MI_M3ID+52,%eax
	call *%eax
	pushl %ebx
	movl %eax,%ecx
	pushl %ecx
	pushl $MM_M3CG_Rd+6904
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl $2,%eax
.L104:
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe14:
	.size	 M3CG_Rd__Scan_type,.Lfe14-M3CG_Rd__Scan_type
	.align 16
	.type	 M3CG_Rd__Scan_bool,@function
M3CG_Rd__Scan_bool:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	leal -100(%ebp),%ecx
	leal -108(%ebp),%eax
	movl %ecx,-108(%ebp)
	movl $100,-104(%ebp)
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	addl $8,%esp
	cmpl $1,%eax
	jne .L106
	xorl %edx,%edx
	movb -100(%ebp),%dl
	cmpl $84,%edx
	je .L111
	cmpl $70,%edx
	jne .L106
	xorl %eax,%eax
	jmp .L111
	.align 16
.L106:
	testl %eax,%eax
	jge .L109
	pushl $6545
	call _m3_fault
	.align 16
.L109:
	cmpl $100,%eax
	jle .L110
	pushl $6545
	call _m3_fault
	.align 16
.L110:
	movl %eax,-104(%ebp)
	leal -100(%ebp),%ecx
	movl %ecx,-108(%ebp)
	leal -108(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+6932
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl $1,%eax
.L111:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe15:
	.size	 M3CG_Rd__Scan_bool,.Lfe15-M3CG_Rd__Scan_bool
	.align 16
	.type	 M3CG_Rd__Scan_label,@function
M3CG_Rd__Scan_label:
	pushl %ebp
	movl %esp,%ebp
	subl $112,%esp
	pushl %edi
	leal -100(%ebp),%ecx
	pushl %esi
	leal -108(%ebp),%eax
	pushl %ebx
	movl %ecx,-108(%ebp)
	movl $100,-104(%ebp)
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%ebx
	addl $8,%esp
	cmpl $1,%ebx
	jne .L113
	cmpb $42,-100(%ebp)
	jne .L113
	movl $-1,%eax
	jmp .L132
	.align 16
.L113:
	cmpl $2,%ebx
	jle .L114
	cmpb $76,-100(%ebp)
	jne .L114
	cmpb $46,-99(%ebp)
	je .L115
.L114:
	testl %ebx,%ebx
	jge .L116
	pushl $6705
	call _m3_fault
	.align 16
.L116:
	cmpl $100,%ebx
	jle .L117
	pushl $6705
	call _m3_fault
	.align 16
.L117:
	movl %ebx,-104(%ebp)
	leal -100(%ebp),%ecx
	movl %ecx,-108(%ebp)
	leal -108(%ebp),%eax
	pushl %eax
	jmp .L133
	.align 16
.L115:
	leal -2(%ebx),%eax
	testl %eax,%eax
	jge .L118
	pushl $6769
	call _m3_fault
	.align 16
.L118:
	cmpl $98,%eax
	jle .L119
	pushl $6769
	call _m3_fault
	.align 16
.L119:
	movl %eax,-104(%ebp)
	leal -100(%ebp),%ecx
	movl %ecx,-112(%ebp)
	leal -98(%ebp),%ecx
	movl %ecx,-108(%ebp)
	leal -108(%ebp),%edi
	pushl %edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__CvtInt
	movl %eax,%esi
	addl $8,%esp
	testl %esi,%esi
	jge .L123
	testl %ebx,%ebx
	jge .L121
	pushl $6801
	call _m3_fault
	.align 16
.L121:
	cmpl $100,%ebx
	jle .L122
	pushl $6801
	call _m3_fault
	.align 16
.L122:
	movl %ebx,-104(%ebp)
	movl -112(%ebp),%ecx
	movl %ecx,-108(%ebp)
	pushl %edi
.L133:
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	pushl $MM_M3CG_Rd+6964
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl $-1,%eax
	jmp .L132
	.align 16
.L124:
	pushl %ebx
	call M3CG_Rd__ExpandLabels
	addl $4,%esp
.L123:
	movl 8(%ebp),%ebx
	movl 32(%ebx),%edx
	testl %edx,%edx
	jne .L125
	pushl $6868
	call _m3_fault
	.align 16
.L125:
	movl 4(%edx),%edi
	leal -1(%edi),%eax
	cmpl %esi,%eax
	jl .L124
	cmpl %edi,%esi
	jb .L128
	pushl $6898
	call _m3_fault
	.align 16
.L128:
	movl (%edx),%eax
	movl (%eax,%esi,4),%edx
	cmpl $-1,%edx
	jne .L129
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 4(%eax),%eax
	pushl $1
	pushl %edx
	call *%eax
	movl %eax,%edx
	movl 8(%ebp),%eax
	addl $8,%esp
	movl 32(%eax),%eax
	testl %eax,%eax
	jne .L130
	pushl $6948
	call _m3_fault
	.align 16
.L130:
	cmpl %esi,4(%eax)
	ja .L131
	pushl $6946
	call _m3_fault
	.align 16
.L131:
	movl (%eax),%eax
	movl %edx,(%eax,%esi,4)
.L129:
	movl %edx,%eax
.L132:
	leal -124(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe16:
	.size	 M3CG_Rd__Scan_label,.Lfe16-M3CG_Rd__Scan_label
	.align 16
	.type	 M3CG_Rd__ExpandLabels,@function
M3CG_Rd__ExpandLabels:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	leal -12(%ebp),%edx
	pushl %esi
	leal -4(%ebp),%edi
	pushl %ebx
	movl %edi,-12(%ebp)
	movl 8(%ebp),%eax
	movl $1,-8(%ebp)
	movl 32(%eax),%eax
	testl %eax,%eax
	jne .L135
	pushl $7044
	call _m3_fault
	.align 16
.L135:
	movl 4(%eax),%eax
	addl %eax,%eax
	movl %eax,-4(%ebp)
	pushl %edx
	movl MM_M3CG_Rd+6556,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jne .L136
	pushl $7076
	call _m3_fault
	.align 16
.L136:
	movl 8(%ebp),%edx
	movl 32(%edx),%eax
	testl %eax,%eax
	jne .L137
	pushl $7076
	call _m3_fault
	.align 16
.L137:
	movl 4(%eax),%ecx
	movl %ecx,-16(%ebp)
	movl %ecx,%eax
	subl 4(%ebx),%eax
	testl %eax,%eax
	jle .L138
	pushl $7073
	call _m3_fault
	.align 16
.L138:
	movl (%ebx),%esi
	movl %esi,-20(%ebp)
	movl 32(%edx),%eax
	testl %eax,%eax
	jne .L139
	pushl $7076
	call _m3_fault
	.align 16
.L139:
	movl %eax,%edx
	cmpl %ecx,4(%edx)
	je .L140
	pushl $7075
	call _m3_fault
	.align 16
.L140:
	leal 0(,%ecx,4),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	pushl %esi
	call memmove
	movl 8(%ebp),%eax
	addl $12,%esp
	movl 32(%eax),%eax
	testl %eax,%eax
	jne .L141
	pushl $7092
	call _m3_fault
	.align 16
.L141:
	movl 4(%eax),%edx
	movl 4(%ebx),%ecx
	decl %ecx
	jmp .L143
	.align 16
.L144:
	testl %ebx,%ebx
	jne .L145
	pushl $7092
	call _m3_fault
	.align 16
.L145:
	cmpl %edx,4(%ebx)
	ja .L146
	pushl $7090
	call _m3_fault
	.align 16
.L146:
	movl (%ebx),%eax
	movl $-1,(%eax,%edx,4)
	incl %edx
.L143:
	cmpl %ecx,%edx
	jle .L144
	movl 8(%ebp),%edx
	leal -32(%ebp),%esp
	movl %ebx,32(%edx)
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe17:
	.size	 M3CG_Rd__ExpandLabels,.Lfe17-M3CG_Rd__ExpandLabels
	.align 16
	.type	 M3CG_Rd__Scan_tipe,@function
M3CG_Rd__Scan_tipe:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	pushl %esi
	leal -100(%ebp),%esi
	pushl %ebx
	movl %esi,-108(%ebp)
	movl $100,-104(%ebp)
	leal -108(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	addl $8,%esp
	testl %eax,%eax
	jge .L149
	pushl $7201
	call _m3_fault
	.align 16
.L149:
	cmpl $100,%eax
	jle .L150
	pushl $7201
	call _m3_fault
	.align 16
.L150:
	movl %eax,-104(%ebp)
	movl %esi,-108(%ebp)
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__CvtInt
	leal -116(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe18:
	.size	 M3CG_Rd__Scan_tipe,.Lfe18-M3CG_Rd__Scan_tipe
	.align 16
	.type	 M3CG_Rd__Scan_varName,@function
M3CG_Rd__Scan_varName:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	leal -100(%ebp),%edx
	leal -108(%ebp),%eax
	movl %edx,-108(%ebp)
	movl $100,-104(%ebp)
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	addl $8,%esp
	cmpl $1,%eax
	jne .L152
	cmpb $42,-100(%ebp)
	jne .L152
	movl $-1,%eax
	jmp .L159
	.align 16
.L152:
	cmpl $2,%eax
	jle .L153
	cmpb $118,-100(%ebp)
	jne .L153
	cmpb $46,-99(%ebp)
	je .L154
.L153:
	testl %eax,%eax
	jge .L155
	pushl $7345
	call _m3_fault
	.align 16
.L155:
	cmpl $100,%eax
	jle .L156
	pushl $7345
	call _m3_fault
	.align 16
.L156:
	movl %eax,-104(%ebp)
	leal -100(%ebp),%edx
	movl %edx,-108(%ebp)
	leal -108(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+6988
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl $-1,%eax
	jmp .L159
	.align 16
.L154:
	addl $-2,%eax
	jns .L157
	pushl $7393
	call _m3_fault
	.align 16
.L157:
	cmpl $98,%eax
	jle .L158
	pushl $7393
	call _m3_fault
	.align 16
.L158:
	movl %eax,-104(%ebp)
	leal -98(%ebp),%edx
	movl %edx,-108(%ebp)
	leal -108(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__CvtInt
.L159:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe19:
	.size	 M3CG_Rd__Scan_varName,.Lfe19-M3CG_Rd__Scan_varName
	.align 16
	.type	 M3CG_Rd__Scan_var,@function
M3CG_Rd__Scan_var:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%edx
	movl %edx,%ecx
	addl $4,%esp
	testl %edx,%edx
	jge .L161
	xorl %eax,%eax
	jmp .L164
	.align 16
.L161:
	movl 8(%ebp),%eax
	movl 24(%eax),%eax
	testl %eax,%eax
	jne .L162
	pushl $7540
	call _m3_fault
	.align 16
.L162:
	cmpl %edx,4(%eax)
	ja .L163
	pushl $7538
	call _m3_fault
	.align 16
.L163:
	movl (%eax),%eax
	movl (%eax,%ecx,4),%eax
.L164:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe20:
	.size	 M3CG_Rd__Scan_var,.Lfe20-M3CG_Rd__Scan_var
	.align 16
	.type	 M3CG_Rd__Scan_procName,@function
M3CG_Rd__Scan_procName:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	leal -100(%ebp),%edx
	leal -108(%ebp),%eax
	movl %edx,-108(%ebp)
	movl $100,-104(%ebp)
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	addl $8,%esp
	cmpl $1,%eax
	jne .L166
	cmpb $42,-100(%ebp)
	jne .L166
	movl $-1,%eax
	jmp .L173
	.align 16
.L166:
	cmpl $2,%eax
	jle .L167
	cmpb $112,-100(%ebp)
	jne .L167
	cmpb $46,-99(%ebp)
	je .L168
.L167:
	testl %eax,%eax
	jge .L169
	pushl $7697
	call _m3_fault
	.align 16
.L169:
	cmpl $100,%eax
	jle .L170
	pushl $7697
	call _m3_fault
	.align 16
.L170:
	movl %eax,-104(%ebp)
	leal -100(%ebp),%edx
	movl %edx,-108(%ebp)
	leal -108(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+7020
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl $-1,%eax
	jmp .L173
	.align 16
.L168:
	addl $-2,%eax
	jns .L171
	pushl $7745
	call _m3_fault
	.align 16
.L171:
	cmpl $98,%eax
	jle .L172
	pushl $7745
	call _m3_fault
	.align 16
.L172:
	movl %eax,-104(%ebp)
	leal -98(%ebp),%edx
	movl %edx,-108(%ebp)
	leal -108(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__CvtInt
.L173:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe21:
	.size	 M3CG_Rd__Scan_procName,.Lfe21-M3CG_Rd__Scan_procName
	.align 16
	.type	 M3CG_Rd__Scan_proc,@function
M3CG_Rd__Scan_proc:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_procName
	movl %eax,%edx
	movl %edx,%ecx
	addl $4,%esp
	testl %edx,%edx
	jge .L175
	xorl %eax,%eax
	jmp .L178
	.align 16
.L175:
	movl 8(%ebp),%eax
	movl 28(%eax),%eax
	testl %eax,%eax
	jne .L176
	pushl $7892
	call _m3_fault
	.align 16
.L176:
	cmpl %edx,4(%eax)
	ja .L177
	pushl $7890
	call _m3_fault
	.align 16
.L177:
	movl (%eax),%eax
	movl (%eax,%ecx,4),%eax
.L178:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe22:
	.size	 M3CG_Rd__Scan_proc,.Lfe22-M3CG_Rd__Scan_proc
	.align 16
	.type	 M3CG_Rd__Scan_sign,@function
M3CG_Rd__Scan_sign:
	pushl %ebp
	movl %esp,%ebp
	subl $108,%esp
	pushl %esi
	leal -100(%ebp),%esi
	pushl %ebx
	movl %esi,-108(%ebp)
	movl $100,-104(%ebp)
	leal -108(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_buf
	movl %eax,%ecx
	addl $8,%esp
	cmpl $1,%eax
	je .L180
	testl %eax,%eax
	jge .L181
	pushl $8017
	call _m3_fault
	.align 16
.L181:
	cmpl $100,%eax
	jle .L182
	pushl $8017
	call _m3_fault
	.align 16
.L182:
	movl %eax,-104(%ebp)
	jmp .L190
	.align 16
.L180:
	xorl %edx,%edx
	movb -100(%ebp),%dl
	cmpl $88,%edx
	je .L191
	cmpl $78,%edx
	je .L189
	cmpl $80,%edx
	jne .L188
	xorl %eax,%eax
	jmp .L189
	.align 16
.L188:
	movl %ecx,-104(%ebp)
.L190:
	movl %esi,-108(%ebp)
	pushl %ebx
	movl MI_Text+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Rd+7056
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
.L191:
	movl $2,%eax
.L189:
	leal -116(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe23:
	.size	 M3CG_Rd__Scan_sign,.Lfe23-M3CG_Rd__Scan_sign
	.align 16
	.type	 M3CG_Rd__Scan_callConv,@function
M3CG_Rd__Scan_callConv:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	pushl %esi
	movl MI_Target+760,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jne .L193
	pushl $10
	pushl %esi
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %ebx
	pushl %eax
	pushl $MM_M3CG_Rd+7080
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
.L193:
	leal -8(%ebp),%esp
	movl %ebx,%eax
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe24:
	.size	 M3CG_Rd__Scan_callConv,.Lfe24-M3CG_Rd__Scan_callConv
	.align 16
	.type	 M3CG_Rd__Scan_line,@function
M3CG_Rd__Scan_line:
	pushl %ebp
	movl %esp,%ebp
	subl $520,%esp
	pushl %ebx
	xorl %ebx,%ebx
.L195:
	movl 8(%ebp),%eax
	movb 8(%eax),%al
	cmpb $10,%al
	je .L198
	testb %al,%al
	je .L198
	cmpl $511,%ebx
	jg .L199
	jbe .L200
	pushl $8433
	call _m3_fault
	.align 16
.L200:
	movb %al,-512(%ebx,%ebp)
	incl %ebx
.L199:
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	addl $4,%esp
	jmp .L195
	.align 16
.L198:
	testl %ebx,%ebx
	jge .L201
	pushl $8481
	call _m3_fault
	.align 16
.L201:
	cmpl $512,%ebx
	jle .L202
	pushl $8481
	call _m3_fault
	.align 16
.L202:
	movl %ebx,-516(%ebp)
	leal -512(%ebp),%edx
	movl %edx,-520(%ebp)
	leal -520(%ebp),%eax
	pushl %eax
	movl MI_Text+76,%eax
	call *%eax
	movl -524(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe25:
	.size	 M3CG_Rd__Scan_line,.Lfe25-M3CG_Rd__Scan_line
	.align 16
	.type	 M3CG_Rd__Scan_buf,@function
M3CG_Rd__Scan_buf:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Skip_blanks
	xorl %ebx,%ebx
.L211:
	addl $4,%esp
	movl 8(%ebp),%eax
	movb 8(%eax),%cl
	testb %cl,%cl
	je .L206
	xorl %eax,%eax
	movb %cl,%al
	cmpl $32,%eax
	je .L206
	cmpl $9,%eax
	je .L206
	cmpl $10,%eax
	je .L206
	movl 12(%ebp),%esi
	movl 4(%esi),%edx
	leal -1(%edx),%eax
	cmpl %ebx,%eax
	jl .L209
	cmpl %edx,%ebx
	jb .L210
	pushl $8658
	call _m3_fault
	.align 16
.L210:
	movl (%esi),%eax
	movb %cl,(%ebx,%eax)
	incl %ebx
.L209:
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	jmp .L211
	.align 16
.L206:
	leal -8(%ebp),%esp
	movl %ebx,%eax
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe26:
	.size	 M3CG_Rd__Scan_buf,.Lfe26-M3CG_Rd__Scan_buf
	.align 16
	.type	 M3CG_Rd__Skip_blanks,@function
M3CG_Rd__Skip_blanks:
	pushl %ebp
	movl %esp,%ebp
	jmp .L213
	.align 16
.L214:
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	addl $4,%esp
.L213:
	movl 8(%ebp),%eax
	movb 8(%eax),%al
	andl $255,%eax
	cmpl $32,%eax
	je .L214
	cmpl $9,%eax
	je .L214
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe27:
	.size	 M3CG_Rd__Skip_blanks,.Lfe27-M3CG_Rd__Skip_blanks
	.align 16
	.type	 M3CG_Rd__Skip_white_space,@function
M3CG_Rd__Skip_white_space:
	pushl %ebp
	movl %esp,%ebp
	jmp .L217
	.align 16
.L218:
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	addl $4,%esp
.L217:
	movl 8(%ebp),%eax
	movb 8(%eax),%al
	andl $255,%eax
	cmpl $32,%eax
	je .L218
	cmpl $10,%eax
	je .L218
	cmpl $9,%eax
	je .L218
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe28:
	.size	 M3CG_Rd__Skip_white_space,.Lfe28-M3CG_Rd__Skip_white_space
	.align 16
	.type	 M3CG_Rd__Skip_line,@function
M3CG_Rd__Skip_line:
	pushl %ebp
	movl %esp,%ebp
	jmp .L221
	.align 16
.L222:
	pushl %eax
	call M3CG_Rd__GetCh
	addl $4,%esp
.L221:
	movl 8(%ebp),%eax
	movb 8(%eax),%dl
	cmpb $10,%dl
	je .L224
	testb %dl,%dl
	jne .L222
.L224:
	pushl %eax
	call M3CG_Rd__GetCh
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe29:
	.size	 M3CG_Rd__Skip_line,.Lfe29-M3CG_Rd__Skip_line
	.align 16
	.type	 M3CG_Rd__GetCh,@function
M3CG_Rd__GetCh:
	pushl %ebp
	movl %esp,%ebp
.L226:
	movl 8(%ebp),%edx
	movl 16(%edx),%eax
	cmpl %eax,20(%edx)
	jl .L227
	pushl %edx
	call M3CG_Rd__RefillBuffer
	addl $4,%esp
.L227:
	movl 8(%ebp),%edx
	movl 12(%edx),%ecx
	testl %ecx,%ecx
	jne .L228
	pushl $9076
	call _m3_fault
	.align 16
.L228:
	movl 20(%edx),%eax
	cmpl $4095,%eax
	jle .L229
	pushl $9073
	call _m3_fault
	.align 16
.L229:
	movb (%eax,%ecx),%al
	movb %al,8(%edx)
	movl 8(%ebp),%eax
	incl 20(%eax)
	cmpb $13,8(%eax)
	je .L226
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe30:
	.size	 M3CG_Rd__GetCh,.Lfe30-M3CG_Rd__GetCh
	.align 16
	.type	 M3CG_Rd__RefillBuffer,@function
M3CG_Rd__RefillBuffer:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
.L232:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl 8(%ebp),%edx
	movl %ecx,RTThread__handlerStack
	movl $0,20(%edx)
	movl 12(%edx),%eax
	testl %eax,%eax
	jne .L233
	pushl $9220
	call _m3_fault
	.align 16
.L233:
	movl %eax,-16(%ebp)
	movl $4096,-12(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	movl MI_Rd+96,%eax
	call *%eax
	movl 8(%ebp),%edx
	addl $8,%esp
	movl %eax,16(%edx)
	cmpl $4095,%eax
	jg .L237
	movl 12(%edx),%edx
	testl %edx,%edx
	jne .L236
	pushl $9268
	call _m3_fault
	.align 16
.L236:
	movb $0,(%eax,%edx)
	movl 8(%ebp),%eax
	incl 16(%eax)
.L237:
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe31:
	.size	 M3CG_Rd__RefillBuffer,.Lfe31-M3CG_Rd__RefillBuffer
	.align 16
	.type	 M3CG_Rd__begin_unit,@function
M3CG_Rd__begin_unit:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 12(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe32:
	.size	 M3CG_Rd__begin_unit,.Lfe32-M3CG_Rd__begin_unit
	.align 16
	.type	 M3CG_Rd__end_unit,@function
M3CG_Rd__end_unit:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 16(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe33:
	.size	 M3CG_Rd__end_unit,.Lfe33-M3CG_Rd__end_unit
	.align 16
	.type	 M3CG_Rd__import_unit,@function
M3CG_Rd__import_unit:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 20(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe34:
	.size	 M3CG_Rd__import_unit,.Lfe34-M3CG_Rd__import_unit
	.align 16
	.type	 M3CG_Rd__export_unit,@function
M3CG_Rd__export_unit:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 24(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe35:
	.size	 M3CG_Rd__export_unit,.Lfe35-M3CG_Rd__export_unit
	.align 16
	.type	 M3CG_Rd__set_source_file,@function
M3CG_Rd__set_source_file:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_word
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 28(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe36:
	.size	 M3CG_Rd__set_source_file,.Lfe36-M3CG_Rd__set_source_file
	.align 16
	.type	 M3CG_Rd__set_source_line,@function
M3CG_Rd__set_source_line:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 32(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe37:
	.size	 M3CG_Rd__set_source_line,.Lfe37-M3CG_Rd__set_source_line
	.align 16
	.type	 M3CG_Rd__declare_typename,@function
M3CG_Rd__declare_typename:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 36(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe38:
	.size	 M3CG_Rd__declare_typename,.Lfe38-M3CG_Rd__declare_typename
	.align 16
	.type	 M3CG_Rd__declare_array,@function
M3CG_Rd__declare_array:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $16,%esp
	movl 40(%eax),%eax
	testl %edx,%edx
	jge .L246
	pushl $10209
	call _m3_fault
	.align 16
.L246:
	pushl %edx
	pushl %ebx
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe39:
	.size	 M3CG_Rd__declare_array,.Lfe39-M3CG_Rd__declare_array
	.align 16
	.type	 M3CG_Rd__declare_open_array,@function
M3CG_Rd__declare_open_array:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 44(%eax),%eax
	testl %edx,%edx
	jge .L248
	pushl $10337
	call _m3_fault
	.align 16
.L248:
	pushl %edx
	pushl %ebx
	pushl %esi
	pushl %ecx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe40:
	.size	 M3CG_Rd__declare_open_array,.Lfe40-M3CG_Rd__declare_open_array
	.align 16
	.type	 M3CG_Rd__declare_enum,@function
M3CG_Rd__declare_enum:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 48(%eax),%eax
	testl %edx,%edx
	jge .L250
	pushl $10465
	call _m3_fault
	.align 16
.L250:
	pushl %edx
	pushl %ebx
	pushl %esi
	pushl %ecx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe41:
	.size	 M3CG_Rd__declare_enum,.Lfe41-M3CG_Rd__declare_enum
	.align 16
	.type	 M3CG_Rd__declare_enum_elt,@function
M3CG_Rd__declare_enum_elt:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 52(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe42:
	.size	 M3CG_Rd__declare_enum_elt,.Lfe42-M3CG_Rd__declare_enum_elt
	.align 16
	.type	 M3CG_Rd__declare_packed,@function
M3CG_Rd__declare_packed:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $12,%esp
	movl 56(%eax),%eax
	testl %ebx,%ebx
	jge .L253
	pushl $10689
	call _m3_fault
	.align 16
.L253:
	pushl %ecx
	pushl %ebx
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe43:
	.size	 M3CG_Rd__declare_packed,.Lfe43-M3CG_Rd__declare_packed
	.align 16
	.type	 M3CG_Rd__declare_record,@function
M3CG_Rd__declare_record:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $12,%esp
	movl 60(%eax),%eax
	testl %ebx,%ebx
	jge .L255
	pushl $10817
	call _m3_fault
	.align 16
.L255:
	pushl %ecx
	pushl %ebx
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe44:
	.size	 M3CG_Rd__declare_record,.Lfe44-M3CG_Rd__declare_record
	.align 16
	.type	 M3CG_Rd__declare_field,@function
M3CG_Rd__declare_field:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $16,%esp
	movl 64(%eax),%eax
	testl %ebx,%ebx
	jge .L257
	pushl $10961
	call _m3_fault
	.align 16
.L257:
	pushl %ecx
	pushl %ebx
	pushl %esi
	pushl %edi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe45:
	.size	 M3CG_Rd__declare_field,.Lfe45-M3CG_Rd__declare_field
	.align 16
	.type	 M3CG_Rd__declare_set,@function
M3CG_Rd__declare_set:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 68(%eax),%eax
	testl %edx,%edx
	jge .L259
	pushl $11089
	call _m3_fault
	.align 16
.L259:
	pushl %edx
	pushl %ebx
	pushl %esi
	pushl %ecx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe46:
	.size	 M3CG_Rd__declare_set,.Lfe46-M3CG_Rd__declare_set
	.align 16
	.type	 M3CG_Rd__declare_subrange,@function
M3CG_Rd__declare_subrange:
	pushl %ebp
	movl %esp,%ebp
	subl $24,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-24(%ebp)
	leal -16(%ebp),%esi
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	leal -8(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $28,%esp
	movl 72(%eax),%eax
	testl %edx,%edx
	jge .L261
	pushl $11249
	call _m3_fault
	.align 16
.L261:
	pushl %edx
	pushl %ebx
	pushl %esi
	movl -24(%ebp),%edi
	pushl %edi
	movl -20(%ebp),%edi
	pushl %edi
	pushl %ecx
	call *%eax
	leal -36(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe47:
	.size	 M3CG_Rd__declare_subrange,.Lfe47-M3CG_Rd__declare_subrange
	.align 16
	.type	 M3CG_Rd__declare_pointer,@function
M3CG_Rd__declare_pointer:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl %esi,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_text
	movl %eax,%ebx
	movl %ebx,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ebx
	movl (%ebx),%eax
	movl 76(%eax),%ecx
	xorl %eax,%eax
	movb %dl,%al
	pushl %eax
	movl -8(%ebp),%edi
	pushl %edi
	pushl %esi
	movl -4(%ebp),%edi
	pushl %edi
	pushl %ebx
	call *%ecx
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe48:
	.size	 M3CG_Rd__declare_pointer,.Lfe48-M3CG_Rd__declare_pointer
	.align 16
	.type	 M3CG_Rd__declare_indirect,@function
M3CG_Rd__declare_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 80(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe49:
	.size	 M3CG_Rd__declare_indirect,.Lfe49-M3CG_Rd__declare_indirect
	.align 16
	.type	 M3CG_Rd__declare_proctype,@function
M3CG_Rd__declare_proctype:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl %ebx,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl %ebx,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_callConv
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl -8(%ebp),%ecx
	movl 84(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %esi
	pushl %edi
	movl -4(%ebp),%ecx
	pushl %ecx
	pushl %edx
	call *%eax
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe50:
	.size	 M3CG_Rd__declare_proctype,.Lfe50-M3CG_Rd__declare_proctype
	.align 16
	.type	 M3CG_Rd__declare_formal,@function
M3CG_Rd__declare_formal:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 88(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe51:
	.size	 M3CG_Rd__declare_formal,.Lfe51-M3CG_Rd__declare_formal
	.align 16
	.type	 M3CG_Rd__declare_raises,@function
M3CG_Rd__declare_raises:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 92(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe52:
	.size	 M3CG_Rd__declare_raises,.Lfe52-M3CG_Rd__declare_raises
	.align 16
	.type	 M3CG_Rd__declare_object,@function
M3CG_Rd__declare_object:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_text
	movl %eax,%edx
	movl %edx,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $28,%esp
	movl 96(%eax),%esi
	testl %ecx,%ecx
	jge .L268
	pushl $12065
	call _m3_fault
	.align 16
.L268:
	pushl %ecx
	movl -20(%ebp),%ebx
	pushl %ebx
	pushl %edi
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	movl -8(%ebp),%ebx
	pushl %ebx
	movl -12(%ebp),%ebx
	pushl %ebx
	movl -16(%ebp),%ebx
	pushl %ebx
	pushl %edx
	call *%esi
	leal -32(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe53:
	.size	 M3CG_Rd__declare_object,.Lfe53-M3CG_Rd__declare_object
	.align 16
	.type	 M3CG_Rd__declare_method,@function
M3CG_Rd__declare_method:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 100(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe54:
	.size	 M3CG_Rd__declare_method,.Lfe54-M3CG_Rd__declare_method
	.align 16
	.type	 M3CG_Rd__declare_opaque,@function
M3CG_Rd__declare_opaque:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 104(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe55:
	.size	 M3CG_Rd__declare_opaque,.Lfe55-M3CG_Rd__declare_opaque
	.align 16
	.type	 M3CG_Rd__reveal_opaque,@function
M3CG_Rd__reveal_opaque:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 108(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe56:
	.size	 M3CG_Rd__reveal_opaque,.Lfe56-M3CG_Rd__reveal_opaque
	.align 16
	.type	 M3CG_Rd__declare_exception,@function
M3CG_Rd__declare_exception:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl %ecx,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ecx
	movl %ecx,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%esi
	movl %esi,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%esi
	movl (%esi),%eax
	movl 112(%eax),%edx
	pushl %ecx
	movl -12(%ebp),%edi
	pushl %edi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	movl -4(%ebp),%edi
	pushl %edi
	movl -8(%ebp),%edi
	pushl %edi
	pushl %esi
	call *%edx
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe57:
	.size	 M3CG_Rd__declare_exception,.Lfe57-M3CG_Rd__declare_exception
	.align 16
	.type	 M3CG_Rd__set_runtime_proc,@function
M3CG_Rd__set_runtime_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 116(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe58:
	.size	 M3CG_Rd__set_runtime_proc,.Lfe58-M3CG_Rd__set_runtime_proc
	.align 16
	.type	 M3CG_Rd__set_runtime_hook,@function
M3CG_Rd__set_runtime_hook:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ecx
	movl %ecx,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl %edx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 120(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe59:
	.size	 M3CG_Rd__set_runtime_hook,.Lfe59-M3CG_Rd__set_runtime_hook
	.align 16
	.type	 M3CG_Rd__get_runtime_hook,@function
M3CG_Rd__get_runtime_hook:
	pushl %ebp
	movl %esp,%ebp
	pushl $0
	pushl $0
	pushl $MM_M3CG_Rd+7124
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Error
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe60:
	.size	 M3CG_Rd__get_runtime_hook,.Lfe60-M3CG_Rd__get_runtime_hook
	.align 16
	.type	 M3CG_Rd__AddVar,@function
M3CG_Rd__AddVar:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%ebx
	movl 16(%ebp),%esi
	jmp .L277
	.align 16
.L278:
	pushl %ecx
	call M3CG_Rd__ExpandVars
	addl $4,%esp
.L277:
	movl 8(%ebp),%ecx
	movl 24(%ecx),%eax
	testl %eax,%eax
	jne .L279
	pushl $13044
	call _m3_fault
	.align 16
.L279:
	movl 4(%eax),%edx
	cmpl %ebx,%edx
	jle .L278
	cmpl %edx,%ebx
	jb .L282
	pushl $13058
	call _m3_fault
	.align 16
.L282:
	movl (%eax),%eax
	leal -8(%ebp),%esp
	movl %esi,(%eax,%ebx,4)
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe61:
	.size	 M3CG_Rd__AddVar,.Lfe61-M3CG_Rd__AddVar
	.align 16
	.type	 M3CG_Rd__ExpandVars,@function
M3CG_Rd__ExpandVars:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	leal -12(%ebp),%edx
	pushl %esi
	leal -4(%ebp),%edi
	pushl %ebx
	movl %edi,-12(%ebp)
	movl 8(%ebp),%eax
	movl $1,-8(%ebp)
	movl 24(%eax),%eax
	testl %eax,%eax
	jne .L284
	pushl $13124
	call _m3_fault
	.align 16
.L284:
	movl 4(%eax),%eax
	addl %eax,%eax
	movl %eax,-4(%ebp)
	pushl %edx
	movl MM_M3CG_Rd+6540,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jne .L285
	pushl $13156
	call _m3_fault
	.align 16
.L285:
	movl 8(%ebp),%edx
	movl 24(%edx),%eax
	testl %eax,%eax
	jne .L286
	pushl $13156
	call _m3_fault
	.align 16
.L286:
	movl 4(%eax),%ecx
	movl %ecx,-16(%ebp)
	movl %ecx,%eax
	subl 4(%ebx),%eax
	testl %eax,%eax
	jle .L287
	pushl $13153
	call _m3_fault
	.align 16
.L287:
	movl (%ebx),%esi
	movl %esi,-20(%ebp)
	movl 24(%edx),%edx
	testl %edx,%edx
	jne .L288
	pushl $13156
	call _m3_fault
	.align 16
.L288:
	cmpl %ecx,4(%edx)
	je .L289
	pushl $13155
	call _m3_fault
	.align 16
.L289:
	leal 0(,%ecx,4),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	pushl %esi
	call memmove
	movl 8(%ebp),%eax
	leal -32(%ebp),%esp
	movl %ebx,24(%eax)
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe62:
	.size	 M3CG_Rd__ExpandVars,.Lfe62-M3CG_Rd__ExpandVars
	.align 16
	.type	 M3CG_Rd__import_global,@function
M3CG_Rd__import_global:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%edi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $24,%esp
	movl 128(%eax),%eax
	movl %eax,-16(%ebp)
	cmpl $0,-8(%ebp)
	jge .L291
	pushl $13345
	call _m3_fault
	.align 16
.L291:
	testl %esi,%esi
	jge .L292
	pushl $13345
	call _m3_fault
	.align 16
.L292:
	pushl %ebx
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	pushl %esi
	movl -8(%ebp),%ecx
	pushl %ecx
	movl -12(%ebp),%ecx
	pushl %ecx
	pushl %edx
	movl -16(%ebp),%ecx
	call *%ecx
	pushl %eax
	pushl %edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe63:
	.size	 M3CG_Rd__import_global,.Lfe63-M3CG_Rd__import_global
	.align 16
	.type	 M3CG_Rd__declare_segment,@function
M3CG_Rd__declare_segment:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%ebx
	movl %ebx,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,%ebx
	movl %ebx,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%ebx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 132(%eax),%eax
	pushl %esi
	pushl %edi
	pushl %edx
	call *%eax
	pushl %eax
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe64:
	.size	 M3CG_Rd__declare_segment,.Lfe64-M3CG_Rd__declare_segment
	.align 16
	.type	 M3CG_Rd__bind_segment,@function
M3CG_Rd__bind_segment:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl %edx,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl %ebx,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-20(%ebp)
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $24,%esp
	movl 136(%eax),%esi
	testl %edi,%edi
	jge .L295
	pushl $13649
	call _m3_fault
	.align 16
.L295:
	testl %ebx,%ebx
	jge .L296
	pushl $13649
	call _m3_fault
	.align 16
.L296:
	xorl %eax,%eax
	movb -20(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb -8(%ebp),%al
	pushl %eax
	movl -12(%ebp),%ecx
	pushl %ecx
	pushl %edi
	movl -16(%ebp),%ecx
	pushl %ecx
	pushl %edx
	call *%esi
	leal -32(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe65:
	.size	 M3CG_Rd__bind_segment,.Lfe65-M3CG_Rd__bind_segment
	.align 16
	.type	 M3CG_Rd__declare_global,@function
M3CG_Rd__declare_global:
	pushl %ebp
	movl %esp,%ebp
	subl $24,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $32,%esp
	movl 140(%eax),%eax
	movl %eax,-24(%ebp)
	cmpl $0,-16(%ebp)
	jge .L298
	pushl $13857
	call _m3_fault
	.align 16
.L298:
	testl %edi,%edi
	jge .L299
	pushl $13857
	call _m3_fault
	.align 16
.L299:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	movl -8(%ebp),%ecx
	pushl %ecx
	xorl %eax,%eax
	movb -12(%ebp),%al
	pushl %eax
	pushl %edi
	movl -16(%ebp),%ecx
	pushl %ecx
	movl -20(%ebp),%ecx
	pushl %ecx
	pushl %edx
	movl -24(%ebp),%ecx
	call *%ecx
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -36(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe66:
	.size	 M3CG_Rd__declare_global,.Lfe66-M3CG_Rd__declare_global
	.align 16
	.type	 M3CG_Rd__declare_constant,@function
M3CG_Rd__declare_constant:
	pushl %ebp
	movl %esp,%ebp
	subl $24,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $32,%esp
	movl 144(%eax),%eax
	movl %eax,-24(%ebp)
	cmpl $0,-16(%ebp)
	jge .L301
	pushl $14081
	call _m3_fault
	.align 16
.L301:
	testl %edi,%edi
	jge .L302
	pushl $14081
	call _m3_fault
	.align 16
.L302:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	movl -8(%ebp),%ecx
	pushl %ecx
	xorl %eax,%eax
	movb -12(%ebp),%al
	pushl %eax
	pushl %edi
	movl -16(%ebp),%ecx
	pushl %ecx
	movl -20(%ebp),%ecx
	pushl %ecx
	pushl %edx
	movl -24(%ebp),%ecx
	call *%ecx
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -36(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe67:
	.size	 M3CG_Rd__declare_constant,.Lfe67-M3CG_Rd__declare_constant
	.align 16
	.type	 M3CG_Rd__declare_local,@function
M3CG_Rd__declare_local:
	pushl %ebp
	movl %esp,%ebp
	subl $28,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,-24(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	addl $32,%esp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 148(%eax),%eax
	movl %eax,-28(%ebp)
	cmpl $0,-20(%ebp)
	jge .L304
	pushl $14321
	call _m3_fault
	.align 16
.L304:
	testl %edi,%edi
	jge .L305
	pushl $14321
	call _m3_fault
	.align 16
.L305:
	cmpl $100,%ebx
	jbe .L306
	pushl $14321
	call _m3_fault
	.align 16
.L306:
	pushl %ebx
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb -8(%ebp),%al
	pushl %eax
	movl -12(%ebp),%ecx
	pushl %ecx
	xorl %eax,%eax
	movb -16(%ebp),%al
	pushl %eax
	pushl %edi
	movl -20(%ebp),%ecx
	pushl %ecx
	movl -24(%ebp),%ecx
	pushl %ecx
	pushl %edx
	movl -28(%ebp),%ecx
	call *%ecx
	addl $36,%esp
	pushl %eax
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -40(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe68:
	.size	 M3CG_Rd__declare_local,.Lfe68-M3CG_Rd__declare_local
	.align 16
	.type	 M3CG_Rd__declare_param,@function
M3CG_Rd__declare_param:
	pushl %ebp
	movl %esp,%ebp
	subl $28,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,-24(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_tipe
	movl %eax,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	addl $32,%esp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 152(%eax),%eax
	movl %eax,-28(%ebp)
	cmpl $0,-20(%ebp)
	jge .L308
	pushl $14561
	call _m3_fault
	.align 16
.L308:
	testl %edi,%edi
	jge .L309
	pushl $14561
	call _m3_fault
	.align 16
.L309:
	cmpl $100,%ebx
	jbe .L310
	pushl $14561
	call _m3_fault
	.align 16
.L310:
	pushl %ebx
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb -8(%ebp),%al
	pushl %eax
	movl -12(%ebp),%ecx
	pushl %ecx
	xorl %eax,%eax
	movb -16(%ebp),%al
	pushl %eax
	pushl %edi
	movl -20(%ebp),%ecx
	pushl %ecx
	movl -24(%ebp),%ecx
	pushl %ecx
	pushl %edx
	movl -28(%ebp),%ecx
	call *%ecx
	addl $36,%esp
	pushl %eax
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -40(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe69:
	.size	 M3CG_Rd__declare_param,.Lfe69-M3CG_Rd__declare_param
	.align 16
	.type	 M3CG_Rd__declare_temp,@function
M3CG_Rd__declare_temp:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_varName
	movl %eax,%edi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $20,%esp
	movl 156(%eax),%eax
	movl %eax,-12(%ebp)
	cmpl $0,-8(%ebp)
	jge .L312
	pushl $14737
	call _m3_fault
	.align 16
.L312:
	testl %esi,%esi
	jge .L313
	pushl $14737
	call _m3_fault
	.align 16
.L313:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	pushl %esi
	movl -8(%ebp),%ecx
	pushl %ecx
	pushl %edx
	movl -12(%ebp),%ecx
	call *%ecx
	pushl %eax
	pushl %edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddVar
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe70:
	.size	 M3CG_Rd__declare_temp,.Lfe70-M3CG_Rd__declare_temp
	.align 16
	.type	 M3CG_Rd__free_temp,@function
M3CG_Rd__free_temp:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 160(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe71:
	.size	 M3CG_Rd__free_temp,.Lfe71-M3CG_Rd__free_temp
	.align 16
	.type	 M3CG_Rd__begin_init,@function
M3CG_Rd__begin_init:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 164(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe72:
	.size	 M3CG_Rd__begin_init,.Lfe72-M3CG_Rd__begin_init
	.align 16
	.type	 M3CG_Rd__end_init,@function
M3CG_Rd__end_init:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 168(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe73:
	.size	 M3CG_Rd__end_init,.Lfe73-M3CG_Rd__end_init
	.align 16
	.type	 M3CG_Rd__init_int,@function
M3CG_Rd__init_int:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	leal -8(%ebp),%esi
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%cl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 172(%eax),%ebx
	xorl %eax,%eax
	movb %cl,%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %edx
	call *%ebx
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe74:
	.size	 M3CG_Rd__init_int,.Lfe74-M3CG_Rd__init_int
	.align 16
	.type	 M3CG_Rd__init_proc,@function
M3CG_Rd__init_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 176(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe75:
	.size	 M3CG_Rd__init_proc,.Lfe75-M3CG_Rd__init_proc
	.align 16
	.type	 M3CG_Rd__init_label,@function
M3CG_Rd__init_label:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 180(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe76:
	.size	 M3CG_Rd__init_label,.Lfe76-M3CG_Rd__init_label
	.align 16
	.type	 M3CG_Rd__init_var,@function
M3CG_Rd__init_var:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl %ecx,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl %edx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 184(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe77:
	.size	 M3CG_Rd__init_var,.Lfe77-M3CG_Rd__init_var
	.align 16
	.type	 M3CG_Rd__init_offset,@function
M3CG_Rd__init_offset:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 188(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe78:
	.size	 M3CG_Rd__init_offset,.Lfe78-M3CG_Rd__init_offset
	.align 16
	.type	 M3CG_Rd__init_chars,@function
M3CG_Rd__init_chars:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_text
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 192(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe79:
	.size	 M3CG_Rd__init_chars,.Lfe79-M3CG_Rd__init_chars
	.align 16
	.type	 M3CG_Rd__init_float,@function
M3CG_Rd__init_float:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	leal -16(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_float
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 196(%eax),%eax
	pushl %ebx
	pushl %esi
	pushl %edx
	call *%eax
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe80:
	.size	 M3CG_Rd__init_float,.Lfe80-M3CG_Rd__init_float
	.align 16
	.type	 M3CG_Rd__AddProc,@function
M3CG_Rd__AddProc:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%ebx
	movl 16(%ebp),%esi
	jmp .L325
	.align 16
.L326:
	pushl %ecx
	call M3CG_Rd__ExpandProcs
	addl $4,%esp
.L325:
	movl 8(%ebp),%ecx
	movl 28(%ecx),%eax
	testl %eax,%eax
	jne .L327
	pushl $15988
	call _m3_fault
	.align 16
.L327:
	movl 4(%eax),%edx
	cmpl %ebx,%edx
	jle .L326
	cmpl %edx,%ebx
	jb .L330
	pushl $16002
	call _m3_fault
	.align 16
.L330:
	movl (%eax),%eax
	leal -8(%ebp),%esp
	movl %esi,(%eax,%ebx,4)
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe81:
	.size	 M3CG_Rd__AddProc,.Lfe81-M3CG_Rd__AddProc
	.align 16
	.type	 M3CG_Rd__ExpandProcs,@function
M3CG_Rd__ExpandProcs:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	leal -12(%ebp),%edx
	pushl %esi
	leal -4(%ebp),%edi
	pushl %ebx
	movl %edi,-12(%ebp)
	movl 8(%ebp),%eax
	movl $1,-8(%ebp)
	movl 28(%eax),%eax
	testl %eax,%eax
	jne .L332
	pushl $16068
	call _m3_fault
	.align 16
.L332:
	movl 4(%eax),%eax
	addl %eax,%eax
	movl %eax,-4(%ebp)
	pushl %edx
	movl MM_M3CG_Rd+6548,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
	testl %ebx,%ebx
	jne .L333
	pushl $16100
	call _m3_fault
	.align 16
.L333:
	movl 8(%ebp),%edx
	movl 28(%edx),%eax
	testl %eax,%eax
	jne .L334
	pushl $16100
	call _m3_fault
	.align 16
.L334:
	movl 4(%eax),%ecx
	movl %ecx,-16(%ebp)
	movl %ecx,%eax
	subl 4(%ebx),%eax
	testl %eax,%eax
	jle .L335
	pushl $16097
	call _m3_fault
	.align 16
.L335:
	movl (%ebx),%esi
	movl %esi,-20(%ebp)
	movl 28(%edx),%edx
	testl %edx,%edx
	jne .L336
	pushl $16100
	call _m3_fault
	.align 16
.L336:
	cmpl %ecx,4(%edx)
	je .L337
	pushl $16099
	call _m3_fault
	.align 16
.L337:
	leal 0(,%ecx,4),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	pushl %esi
	call memmove
	movl 8(%ebp),%eax
	leal -32(%ebp),%esp
	movl %ebx,28(%eax)
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe82:
	.size	 M3CG_Rd__ExpandProcs,.Lfe82-M3CG_Rd__ExpandProcs
	.align 16
	.type	 M3CG_Rd__import_procedure,@function
M3CG_Rd__import_procedure:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%esi
	movl %esi,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl %esi,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_callConv
	movl %eax,%ecx
	movl %ecx,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_procName
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	movl -12(%ebp),%edi
	movl 200(%eax),%edx
	pushl %edi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	movl -4(%ebp),%edi
	pushl %edi
	movl -8(%ebp),%edi
	pushl %edi
	pushl %ecx
	call *%edx
	addl $40,%esp
	pushl %eax
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddProc
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe83:
	.size	 M3CG_Rd__import_procedure,.Lfe83-M3CG_Rd__import_procedure
	.align 16
	.type	 M3CG_Rd__declare_procedure,@function
M3CG_Rd__declare_procedure:
	pushl %ebp
	movl %esp,%ebp
	subl $24,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_name
	movl %eax,%esi
	movl %esi,-20(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl %esi,-16(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-12(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl %esi,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_callConv
	movl %eax,%ecx
	movl %ecx,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%ecx
	movl %ecx,-24(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_procName
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	addl $32,%esp
	movl (%ecx),%eax
	movl -24(%ebp),%edi
	movl 204(%eax),%edx
	pushl %edi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	movl -4(%ebp),%edi
	pushl %edi
	movl -8(%ebp),%edi
	pushl %edi
	xorl %eax,%eax
	movb -12(%ebp),%al
	pushl %eax
	movl -16(%ebp),%edi
	pushl %edi
	movl -20(%ebp),%edi
	pushl %edi
	pushl %ecx
	call *%edx
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__AddProc
	leal -36(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe84:
	.size	 M3CG_Rd__declare_procedure,.Lfe84-M3CG_Rd__declare_procedure
	.align 16
	.type	 M3CG_Rd__begin_procedure,@function
M3CG_Rd__begin_procedure:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 208(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe85:
	.size	 M3CG_Rd__begin_procedure,.Lfe85-M3CG_Rd__begin_procedure
	.align 16
	.type	 M3CG_Rd__end_procedure,@function
M3CG_Rd__end_procedure:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 212(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe86:
	.size	 M3CG_Rd__end_procedure,.Lfe86-M3CG_Rd__end_procedure
	.align 16
	.type	 M3CG_Rd__begin_block,@function
M3CG_Rd__begin_block:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 216(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe87:
	.size	 M3CG_Rd__begin_block,.Lfe87-M3CG_Rd__begin_block
	.align 16
	.type	 M3CG_Rd__end_block,@function
M3CG_Rd__end_block:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 220(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe88:
	.size	 M3CG_Rd__end_block,.Lfe88-M3CG_Rd__end_block
	.align 16
	.type	 M3CG_Rd__note_procedure_origin,@function
M3CG_Rd__note_procedure_origin:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 224(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe89:
	.size	 M3CG_Rd__note_procedure_origin,.Lfe89-M3CG_Rd__note_procedure_origin
	.align 16
	.type	 M3CG_Rd__set_label,@function
M3CG_Rd__set_label:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%cl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 228(%eax),%ebx
	xorl %eax,%eax
	movb %cl,%al
	pushl %eax
	pushl %esi
	pushl %edx
	call *%ebx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe90:
	.size	 M3CG_Rd__set_label,.Lfe90-M3CG_Rd__set_label
	.align 16
	.type	 M3CG_Rd__jump,@function
M3CG_Rd__jump:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 232(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe91:
	.size	 M3CG_Rd__jump,.Lfe91-M3CG_Rd__jump
	.align 16
	.type	 M3CG_Rd__if_true,@function
M3CG_Rd__if_true:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $8,%esp
	movl 236(%eax),%eax
	cmpl $100,%edx
	jbe .L348
	pushl $17297
	call _m3_fault
	.align 16
.L348:
	pushl %edx
	pushl %ebx
	pushl %ecx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe92:
	.size	 M3CG_Rd__if_true,.Lfe92-M3CG_Rd__if_true
	.align 16
	.type	 M3CG_Rd__if_false,@function
M3CG_Rd__if_false:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $8,%esp
	movl 240(%eax),%eax
	cmpl $100,%edx
	jbe .L350
	pushl $17409
	call _m3_fault
	.align 16
.L350:
	pushl %edx
	pushl %ebx
	pushl %ecx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe93:
	.size	 M3CG_Rd__if_false,.Lfe93-M3CG_Rd__if_false
	.align 16
	.type	 M3CG_Rd__if_eq,@function
M3CG_Rd__if_eq:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 244(%eax),%edi
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L352
	pushl $17537
	call _m3_fault
	.align 16
.L352:
	cmpl $100,%edx
	jbe .L353
	pushl $17537
	call _m3_fault
	.align 16
.L353:
	movl -8(%ebp),%esi
	pushl %esi
	pushl %eax
	movl -4(%ebp),%esi
	pushl %esi
	pushl %ecx
	call *%edi
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe94:
	.size	 M3CG_Rd__if_eq,.Lfe94-M3CG_Rd__if_eq
	.align 16
	.type	 M3CG_Rd__if_ne,@function
M3CG_Rd__if_ne:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 248(%eax),%edi
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L355
	pushl $17665
	call _m3_fault
	.align 16
.L355:
	cmpl $100,%edx
	jbe .L356
	pushl $17665
	call _m3_fault
	.align 16
.L356:
	movl -8(%ebp),%esi
	pushl %esi
	pushl %eax
	movl -4(%ebp),%esi
	pushl %esi
	pushl %ecx
	call *%edi
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe95:
	.size	 M3CG_Rd__if_ne,.Lfe95-M3CG_Rd__if_ne
	.align 16
	.type	 M3CG_Rd__if_gt,@function
M3CG_Rd__if_gt:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 252(%eax),%edi
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L358
	pushl $17793
	call _m3_fault
	.align 16
.L358:
	cmpl $100,%edx
	jbe .L359
	pushl $17793
	call _m3_fault
	.align 16
.L359:
	movl -8(%ebp),%esi
	pushl %esi
	pushl %eax
	movl -4(%ebp),%esi
	pushl %esi
	pushl %ecx
	call *%edi
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe96:
	.size	 M3CG_Rd__if_gt,.Lfe96-M3CG_Rd__if_gt
	.align 16
	.type	 M3CG_Rd__if_ge,@function
M3CG_Rd__if_ge:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 256(%eax),%edi
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L361
	pushl $17921
	call _m3_fault
	.align 16
.L361:
	cmpl $100,%edx
	jbe .L362
	pushl $17921
	call _m3_fault
	.align 16
.L362:
	movl -8(%ebp),%esi
	pushl %esi
	pushl %eax
	movl -4(%ebp),%esi
	pushl %esi
	pushl %ecx
	call *%edi
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe97:
	.size	 M3CG_Rd__if_ge,.Lfe97-M3CG_Rd__if_ge
	.align 16
	.type	 M3CG_Rd__if_lt,@function
M3CG_Rd__if_lt:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 260(%eax),%edi
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L364
	pushl $18049
	call _m3_fault
	.align 16
.L364:
	cmpl $100,%edx
	jbe .L365
	pushl $18049
	call _m3_fault
	.align 16
.L365:
	movl -8(%ebp),%esi
	pushl %esi
	pushl %eax
	movl -4(%ebp),%esi
	pushl %esi
	pushl %ecx
	call *%edi
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe98:
	.size	 M3CG_Rd__if_lt,.Lfe98-M3CG_Rd__if_lt
	.align 16
	.type	 M3CG_Rd__if_le,@function
M3CG_Rd__if_le:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,-8(%ebp)
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 264(%eax),%edi
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L367
	pushl $18177
	call _m3_fault
	.align 16
.L367:
	cmpl $100,%edx
	jbe .L368
	pushl $18177
	call _m3_fault
	.align 16
.L368:
	movl -8(%ebp),%esi
	pushl %esi
	pushl %eax
	movl -4(%ebp),%esi
	pushl %esi
	pushl %ecx
	call *%edi
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe99:
	.size	 M3CG_Rd__if_le,.Lfe99-M3CG_Rd__if_le
	.align 16
	.type	 M3CG_Rd__case_jump,@function
M3CG_Rd__case_jump:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	leal -12(%ebp),%eax
	leal -4(%ebp),%ecx
	movl %ecx,-12(%ebp)
	movl $1,-8(%ebp)
	movl %esi,-4(%ebp)
	pushl %eax
	movl MM_M3CG_Rd+6556,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%edx
	movl %edx,%edi
	xorl %ebx,%ebx
	decl %esi
	movl %esi,-16(%ebp)
	addl $12,%esp
	jmp .L370
	.align 16
.L371:
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_label
	movl %eax,%esi
	addl $4,%esp
	testl %edi,%edi
	jne .L372
	pushl $18292
	call _m3_fault
	.align 16
.L372:
	movl %edi,%edx
	cmpl %ebx,4(%edx)
	ja .L373
	pushl $18290
	call _m3_fault
	.align 16
.L373:
	movl (%edx),%eax
	movl %esi,(%eax,%ebx,4)
	incl %ebx
.L370:
	cmpl %ebx,-16(%ebp)
	jge .L371
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 268(%eax),%eax
	testl %edi,%edi
	jne .L375
	pushl $18308
	call _m3_fault
	.align 16
.L375:
	pushl %edi
	pushl %edx
	call *%eax
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe100:
	.size	 M3CG_Rd__case_jump,.Lfe100-M3CG_Rd__case_jump
	.align 16
	.type	 M3CG_Rd__exit_proc,@function
M3CG_Rd__exit_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 272(%eax),%ecx
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	call *%ecx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe101:
	.size	 M3CG_Rd__exit_proc,.Lfe101-M3CG_Rd__exit_proc
	.align 16
	.type	 M3CG_Rd__load,@function
M3CG_Rd__load:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%ecx
	movl %ecx,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 276(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L378
	pushl $18561
	call _m3_fault
	.align 16
.L378:
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%ebx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe102:
	.size	 M3CG_Rd__load,.Lfe102-M3CG_Rd__load
	.align 16
	.type	 M3CG_Rd__store,@function
M3CG_Rd__store:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%ecx
	movl %ecx,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $12,%esp
	movl 288(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L380
	pushl $18689
	call _m3_fault
	.align 16
.L380:
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%ebx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe103:
	.size	 M3CG_Rd__store,.Lfe103-M3CG_Rd__store
	.align 16
	.type	 M3CG_Rd__store_ref,@function
M3CG_Rd__store_ref:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl %edx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 296(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe104:
	.size	 M3CG_Rd__store_ref,.Lfe104-M3CG_Rd__store_ref
	.align 16
	.type	 M3CG_Rd__load_address,@function
M3CG_Rd__load_address:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_var
	movl %eax,%edx
	movl %edx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 280(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe105:
	.size	 M3CG_Rd__load_address,.Lfe105-M3CG_Rd__load_address
	.align 16
	.type	 M3CG_Rd__load_indirect,@function
M3CG_Rd__load_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $8,%esp
	movl 284(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L384
	pushl $19025
	call _m3_fault
	.align 16
.L384:
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%ebx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe106:
	.size	 M3CG_Rd__load_indirect,.Lfe106-M3CG_Rd__load_indirect
	.align 16
	.type	 M3CG_Rd__store_indirect,@function
M3CG_Rd__store_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $8,%esp
	movl 292(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L386
	pushl $19137
	call _m3_fault
	.align 16
.L386:
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%ebx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe107:
	.size	 M3CG_Rd__store_indirect,.Lfe107-M3CG_Rd__store_indirect
	.align 16
	.type	 M3CG_Rd__store_ref_indirect,@function
M3CG_Rd__store_ref_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%cl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 300(%eax),%ebx
	xorl %eax,%eax
	movb %cl,%al
	pushl %eax
	pushl %esi
	pushl %edx
	call *%ebx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe108:
	.size	 M3CG_Rd__store_ref_indirect,.Lfe108-M3CG_Rd__store_ref_indirect
	.align 16
	.type	 M3CG_Rd__load_nil,@function
M3CG_Rd__load_nil:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 304(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe109:
	.size	 M3CG_Rd__load_nil,.Lfe109-M3CG_Rd__load_nil
	.align 16
	.type	 M3CG_Rd__load_integer,@function
M3CG_Rd__load_integer:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %ebx
	leal -8(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 308(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	movl -12(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe110:
	.size	 M3CG_Rd__load_integer,.Lfe110-M3CG_Rd__load_integer
	.align 16
	.type	 M3CG_Rd__load_float,@function
M3CG_Rd__load_float:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %ebx
	leal -16(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_float
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 312(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	movl -20(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe111:
	.size	 M3CG_Rd__load_float,.Lfe111-M3CG_Rd__load_float
	.align 16
	.type	 M3CG_Rd__eq,@function
M3CG_Rd__eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 316(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L392
	pushl $19681
	call _m3_fault
	.align 16
.L392:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe112:
	.size	 M3CG_Rd__eq,.Lfe112-M3CG_Rd__eq
	.align 16
	.type	 M3CG_Rd__ne,@function
M3CG_Rd__ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 320(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L394
	pushl $19777
	call _m3_fault
	.align 16
.L394:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe113:
	.size	 M3CG_Rd__ne,.Lfe113-M3CG_Rd__ne
	.align 16
	.type	 M3CG_Rd__gt,@function
M3CG_Rd__gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 324(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L396
	pushl $19873
	call _m3_fault
	.align 16
.L396:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe114:
	.size	 M3CG_Rd__gt,.Lfe114-M3CG_Rd__gt
	.align 16
	.type	 M3CG_Rd__ge,@function
M3CG_Rd__ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 328(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L398
	pushl $19969
	call _m3_fault
	.align 16
.L398:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe115:
	.size	 M3CG_Rd__ge,.Lfe115-M3CG_Rd__ge
	.align 16
	.type	 M3CG_Rd__lt,@function
M3CG_Rd__lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 332(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L400
	pushl $20065
	call _m3_fault
	.align 16
.L400:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe116:
	.size	 M3CG_Rd__lt,.Lfe116-M3CG_Rd__lt
	.align 16
	.type	 M3CG_Rd__le,@function
M3CG_Rd__le:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 336(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L402
	pushl $20161
	call _m3_fault
	.align 16
.L402:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe117:
	.size	 M3CG_Rd__le,.Lfe117-M3CG_Rd__le
	.align 16
	.type	 M3CG_Rd__add,@function
M3CG_Rd__add:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 340(%eax),%ebx
	leal -1(%edx),%eax
	cmpl $4,%eax
	jbe .L404
	pushl $20257
	call _m3_fault
	.align 16
.L404:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe118:
	.size	 M3CG_Rd__add,.Lfe118-M3CG_Rd__add
	.align 16
	.type	 M3CG_Rd__subtract,@function
M3CG_Rd__subtract:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 344(%eax),%ebx
	leal -1(%edx),%eax
	cmpl $4,%eax
	jbe .L406
	pushl $20353
	call _m3_fault
	.align 16
.L406:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe119:
	.size	 M3CG_Rd__subtract,.Lfe119-M3CG_Rd__subtract
	.align 16
	.type	 M3CG_Rd__multiply,@function
M3CG_Rd__multiply:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 348(%eax),%ebx
	leal -1(%edx),%eax
	cmpl $4,%eax
	jbe .L408
	pushl $20449
	call _m3_fault
	.align 16
.L408:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe120:
	.size	 M3CG_Rd__multiply,.Lfe120-M3CG_Rd__multiply
	.align 16
	.type	 M3CG_Rd__divide,@function
M3CG_Rd__divide:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 352(%eax),%ebx
	leal -3(%edx),%eax
	cmpl $2,%eax
	jbe .L410
	pushl $20545
	call _m3_fault
	.align 16
.L410:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe121:
	.size	 M3CG_Rd__divide,.Lfe121-M3CG_Rd__divide
	.align 16
	.type	 M3CG_Rd__div,@function
M3CG_Rd__div:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_sign
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_sign
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	xorl %edx,%edx
	movb -8(%ebp),%dl
	movl (%ecx),%eax
	addl $12,%esp
	movl 392(%eax),%esi
	leal -1(%edx),%eax
	cmpl $1,%eax
	jbe .L412
	pushl $20673
	call _m3_fault
	.align 16
.L412:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	pushl %edx
	pushl %ecx
	call *%esi
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe122:
	.size	 M3CG_Rd__div,.Lfe122-M3CG_Rd__div
	.align 16
	.type	 M3CG_Rd__mod,@function
M3CG_Rd__mod:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-8(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_sign
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_sign
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	xorl %edx,%edx
	movb -8(%ebp),%dl
	movl (%ecx),%eax
	addl $12,%esp
	movl 396(%eax),%esi
	leal -1(%edx),%eax
	cmpl $1,%eax
	jbe .L414
	pushl $20801
	call _m3_fault
	.align 16
.L414:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	pushl %edx
	pushl %ecx
	call *%esi
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe123:
	.size	 M3CG_Rd__mod,.Lfe123-M3CG_Rd__mod
	.align 16
	.type	 M3CG_Rd__negate,@function
M3CG_Rd__negate:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 356(%eax),%ebx
	leal -1(%edx),%eax
	cmpl $4,%eax
	jbe .L416
	pushl $20897
	call _m3_fault
	.align 16
.L416:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe124:
	.size	 M3CG_Rd__negate,.Lfe124-M3CG_Rd__negate
	.align 16
	.type	 M3CG_Rd__abs,@function
M3CG_Rd__abs:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 360(%eax),%ebx
	leal -1(%edx),%eax
	cmpl $4,%eax
	jbe .L418
	pushl $20993
	call _m3_fault
	.align 16
.L418:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe125:
	.size	 M3CG_Rd__abs,.Lfe125-M3CG_Rd__abs
	.align 16
	.type	 M3CG_Rd__max,@function
M3CG_Rd__max:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 364(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L420
	pushl $21089
	call _m3_fault
	.align 16
.L420:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe126:
	.size	 M3CG_Rd__max,.Lfe126-M3CG_Rd__max
	.align 16
	.type	 M3CG_Rd__min,@function
M3CG_Rd__min:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 368(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $5,%eax
	jle .L422
	pushl $21185
	call _m3_fault
	.align 16
.L422:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe127:
	.size	 M3CG_Rd__min,.Lfe127-M3CG_Rd__min
	.align 16
	.type	 M3CG_Rd__round,@function
M3CG_Rd__round:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 372(%eax),%ebx
	leal -3(%edx),%eax
	cmpl $2,%eax
	jbe .L424
	pushl $21281
	call _m3_fault
	.align 16
.L424:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe128:
	.size	 M3CG_Rd__round,.Lfe128-M3CG_Rd__round
	.align 16
	.type	 M3CG_Rd__trunc,@function
M3CG_Rd__trunc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 376(%eax),%ebx
	leal -3(%edx),%eax
	cmpl $2,%eax
	jbe .L426
	pushl $21377
	call _m3_fault
	.align 16
.L426:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe129:
	.size	 M3CG_Rd__trunc,.Lfe129-M3CG_Rd__trunc
	.align 16
	.type	 M3CG_Rd__floor,@function
M3CG_Rd__floor:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 380(%eax),%ebx
	leal -3(%edx),%eax
	cmpl $2,%eax
	jbe .L428
	pushl $21473
	call _m3_fault
	.align 16
.L428:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe130:
	.size	 M3CG_Rd__floor,.Lfe130-M3CG_Rd__floor
	.align 16
	.type	 M3CG_Rd__ceiling,@function
M3CG_Rd__ceiling:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	andl $255,%edx
	movl (%ecx),%eax
	addl $4,%esp
	movl 384(%eax),%ebx
	leal -3(%edx),%eax
	cmpl $2,%eax
	jbe .L430
	pushl $21569
	call _m3_fault
	.align 16
.L430:
	pushl %edx
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe131:
	.size	 M3CG_Rd__ceiling,.Lfe131-M3CG_Rd__ceiling
	.align 16
	.type	 M3CG_Rd__cvt_float,@function
M3CG_Rd__cvt_float:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%esi
	xorl %ecx,%ecx
	movb %bl,%cl
	movl (%esi),%eax
	addl $8,%esp
	movl 388(%eax),%edi
	leal -1(%ecx),%eax
	cmpl $4,%eax
	jbe .L432
	pushl $21681
	call _m3_fault
	.align 16
.L432:
	andl $255,%edx
	leal -3(%edx),%eax
	cmpl $2,%eax
	jbe .L433
	pushl $21681
	call _m3_fault
	.align 16
.L433:
	pushl %edx
	pushl %ecx
	pushl %esi
	call *%edi
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe132:
	.size	 M3CG_Rd__cvt_float,.Lfe132-M3CG_Rd__cvt_float
	.align 16
	.type	 M3CG_Rd__set_union,@function
M3CG_Rd__set_union:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 400(%eax),%eax
	testl %ecx,%ecx
	jge .L435
	pushl $21809
	call _m3_fault
	.align 16
.L435:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe133:
	.size	 M3CG_Rd__set_union,.Lfe133-M3CG_Rd__set_union
	.align 16
	.type	 M3CG_Rd__set_difference,@function
M3CG_Rd__set_difference:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 404(%eax),%eax
	testl %ecx,%ecx
	jge .L437
	pushl $21905
	call _m3_fault
	.align 16
.L437:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe134:
	.size	 M3CG_Rd__set_difference,.Lfe134-M3CG_Rd__set_difference
	.align 16
	.type	 M3CG_Rd__set_intersection,@function
M3CG_Rd__set_intersection:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 408(%eax),%eax
	testl %ecx,%ecx
	jge .L439
	pushl $22001
	call _m3_fault
	.align 16
.L439:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe135:
	.size	 M3CG_Rd__set_intersection,.Lfe135-M3CG_Rd__set_intersection
	.align 16
	.type	 M3CG_Rd__set_sym_difference,@function
M3CG_Rd__set_sym_difference:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 412(%eax),%eax
	testl %ecx,%ecx
	jge .L441
	pushl $22097
	call _m3_fault
	.align 16
.L441:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe136:
	.size	 M3CG_Rd__set_sym_difference,.Lfe136-M3CG_Rd__set_sym_difference
	.align 16
	.type	 M3CG_Rd__set_member,@function
M3CG_Rd__set_member:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 416(%eax),%eax
	testl %ecx,%ecx
	jge .L443
	pushl $22193
	call _m3_fault
	.align 16
.L443:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe137:
	.size	 M3CG_Rd__set_member,.Lfe137-M3CG_Rd__set_member
	.align 16
	.type	 M3CG_Rd__set_eq,@function
M3CG_Rd__set_eq:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 420(%eax),%eax
	testl %ecx,%ecx
	jge .L445
	pushl $22289
	call _m3_fault
	.align 16
.L445:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe138:
	.size	 M3CG_Rd__set_eq,.Lfe138-M3CG_Rd__set_eq
	.align 16
	.type	 M3CG_Rd__set_ne,@function
M3CG_Rd__set_ne:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 424(%eax),%eax
	testl %ecx,%ecx
	jge .L447
	pushl $22385
	call _m3_fault
	.align 16
.L447:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe139:
	.size	 M3CG_Rd__set_ne,.Lfe139-M3CG_Rd__set_ne
	.align 16
	.type	 M3CG_Rd__set_gt,@function
M3CG_Rd__set_gt:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 436(%eax),%eax
	testl %ecx,%ecx
	jge .L449
	pushl $22481
	call _m3_fault
	.align 16
.L449:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe140:
	.size	 M3CG_Rd__set_gt,.Lfe140-M3CG_Rd__set_gt
	.align 16
	.type	 M3CG_Rd__set_ge,@function
M3CG_Rd__set_ge:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 440(%eax),%eax
	testl %ecx,%ecx
	jge .L451
	pushl $22577
	call _m3_fault
	.align 16
.L451:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe141:
	.size	 M3CG_Rd__set_ge,.Lfe141-M3CG_Rd__set_ge
	.align 16
	.type	 M3CG_Rd__set_lt,@function
M3CG_Rd__set_lt:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 428(%eax),%eax
	testl %ecx,%ecx
	jge .L453
	pushl $22673
	call _m3_fault
	.align 16
.L453:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe142:
	.size	 M3CG_Rd__set_lt,.Lfe142-M3CG_Rd__set_lt
	.align 16
	.type	 M3CG_Rd__set_le,@function
M3CG_Rd__set_le:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 432(%eax),%eax
	testl %ecx,%ecx
	jge .L455
	pushl $22769
	call _m3_fault
	.align 16
.L455:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe143:
	.size	 M3CG_Rd__set_le,.Lfe143-M3CG_Rd__set_le
	.align 16
	.type	 M3CG_Rd__set_range,@function
M3CG_Rd__set_range:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 444(%eax),%eax
	testl %ecx,%ecx
	jge .L457
	pushl $22865
	call _m3_fault
	.align 16
.L457:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe144:
	.size	 M3CG_Rd__set_range,.Lfe144-M3CG_Rd__set_range
	.align 16
	.type	 M3CG_Rd__set_singleton,@function
M3CG_Rd__set_singleton:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	addl $4,%esp
	movl 448(%eax),%eax
	testl %ecx,%ecx
	jge .L459
	pushl $22961
	call _m3_fault
	.align 16
.L459:
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe145:
	.size	 M3CG_Rd__set_singleton,.Lfe145-M3CG_Rd__set_singleton
	.align 16
	.type	 M3CG_Rd__not,@function
M3CG_Rd__not:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 452(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe146:
	.size	 M3CG_Rd__not,.Lfe146-M3CG_Rd__not
	.align 16
	.type	 M3CG_Rd__and,@function
M3CG_Rd__and:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 456(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe147:
	.size	 M3CG_Rd__and,.Lfe147-M3CG_Rd__and
	.align 16
	.type	 M3CG_Rd__or,@function
M3CG_Rd__or:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 460(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe148:
	.size	 M3CG_Rd__or,.Lfe148-M3CG_Rd__or
	.align 16
	.type	 M3CG_Rd__xor,@function
M3CG_Rd__xor:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 464(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe149:
	.size	 M3CG_Rd__xor,.Lfe149-M3CG_Rd__xor
	.align 16
	.type	 M3CG_Rd__shift,@function
M3CG_Rd__shift:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 468(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe150:
	.size	 M3CG_Rd__shift,.Lfe150-M3CG_Rd__shift
	.align 16
	.type	 M3CG_Rd__shift_left,@function
M3CG_Rd__shift_left:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 472(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe151:
	.size	 M3CG_Rd__shift_left,.Lfe151-M3CG_Rd__shift_left
	.align 16
	.type	 M3CG_Rd__shift_right,@function
M3CG_Rd__shift_right:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 476(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe152:
	.size	 M3CG_Rd__shift_right,.Lfe152-M3CG_Rd__shift_right
	.align 16
	.type	 M3CG_Rd__rotate,@function
M3CG_Rd__rotate:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 480(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe153:
	.size	 M3CG_Rd__rotate,.Lfe153-M3CG_Rd__rotate
	.align 16
	.type	 M3CG_Rd__rotate_left,@function
M3CG_Rd__rotate_left:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 484(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe154:
	.size	 M3CG_Rd__rotate_left,.Lfe154-M3CG_Rd__rotate_left
	.align 16
	.type	 M3CG_Rd__rotate_right,@function
M3CG_Rd__rotate_right:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 488(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe155:
	.size	 M3CG_Rd__rotate_right,.Lfe155-M3CG_Rd__rotate_right
	.align 16
	.type	 M3CG_Rd__extract,@function
M3CG_Rd__extract:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 492(%eax),%ecx
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	call *%ecx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe156:
	.size	 M3CG_Rd__extract,.Lfe156-M3CG_Rd__extract
	.align 16
	.type	 M3CG_Rd__extract_n,@function
M3CG_Rd__extract_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 496(%eax),%ecx
	pushl %esi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	call *%ecx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe157:
	.size	 M3CG_Rd__extract_n,.Lfe157-M3CG_Rd__extract_n
	.align 16
	.type	 M3CG_Rd__extract_mn,@function
M3CG_Rd__extract_mn:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl %esi,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 500(%eax),%ecx
	pushl %esi
	pushl %edi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	call *%ecx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe158:
	.size	 M3CG_Rd__extract_mn,.Lfe158-M3CG_Rd__extract_mn
	.align 16
	.type	 M3CG_Rd__insert,@function
M3CG_Rd__insert:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 504(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe159:
	.size	 M3CG_Rd__insert,.Lfe159-M3CG_Rd__insert
	.align 16
	.type	 M3CG_Rd__insert_n,@function
M3CG_Rd__insert_n:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 508(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe160:
	.size	 M3CG_Rd__insert_n,.Lfe160-M3CG_Rd__insert_n
	.align 16
	.type	 M3CG_Rd__insert_mn,@function
M3CG_Rd__insert_mn:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl %ecx,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 512(%eax),%eax
	pushl %ecx
	pushl %ebx
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe161:
	.size	 M3CG_Rd__insert_mn,.Lfe161-M3CG_Rd__insert_mn
	.align 16
	.type	 M3CG_Rd__swap,@function
M3CG_Rd__swap:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%cl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 516(%eax),%ebx
	xorl %eax,%eax
	movb %cl,%al
	pushl %eax
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	pushl %edx
	call *%ebx
	movl -8(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe162:
	.size	 M3CG_Rd__swap,.Lfe162-M3CG_Rd__swap
	.align 16
	.type	 M3CG_Rd__pop,@function
M3CG_Rd__pop:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 520(%eax),%ecx
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	call *%ecx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe163:
	.size	 M3CG_Rd__pop,.Lfe163-M3CG_Rd__pop
	.align 16
	.type	 M3CG_Rd__copy_n,@function
M3CG_Rd__copy_n:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	xorl %edx,%edx
	movb -4(%ebp),%dl
	movl (%ecx),%eax
	addl $8,%esp
	movl 524(%eax),%esi
	cmpl $13,%edx
	jle .L479
	pushl $24769
	call _m3_fault
	.align 16
.L479:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	pushl %ecx
	call *%esi
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe164:
	.size	 M3CG_Rd__copy_n,.Lfe164-M3CG_Rd__copy_n
	.align 16
	.type	 M3CG_Rd__copy,@function
M3CG_Rd__copy:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_bool
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	xorl %edx,%edx
	movb -4(%ebp),%dl
	movl (%ecx),%eax
	addl $12,%esp
	movl 528(%eax),%esi
	cmpl $13,%edx
	jle .L481
	pushl $24897
	call _m3_fault
	.align 16
.L481:
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %edx
	pushl %edi
	pushl %ecx
	call *%esi
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe165:
	.size	 M3CG_Rd__copy,.Lfe165-M3CG_Rd__copy
	.align 16
	.type	 M3CG_Rd__zero_n,@function
M3CG_Rd__zero_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 532(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L483
	pushl $24993
	call _m3_fault
	.align 16
.L483:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe166:
	.size	 M3CG_Rd__zero_n,.Lfe166-M3CG_Rd__zero_n
	.align 16
	.type	 M3CG_Rd__zero,@function
M3CG_Rd__zero:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $8,%esp
	movl 536(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L485
	pushl $25105
	call _m3_fault
	.align 16
.L485:
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%ebx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe167:
	.size	 M3CG_Rd__zero,.Lfe167-M3CG_Rd__zero
	.align 16
	.type	 M3CG_Rd__loophole,@function
M3CG_Rd__loophole:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,-4(%ebp)
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	xorl %edx,%edx
	movb -4(%ebp),%dl
	movl (%ecx),%eax
	addl $8,%esp
	movl 540(%eax),%esi
	cmpl $5,%edx
	jle .L487
	pushl $25249
	call _m3_fault
	.align 16
.L487:
	xorl %eax,%eax
	movb %bl,%al
	cmpl $5,%eax
	jle .L488
	pushl $25249
	call _m3_fault
	.align 16
.L488:
	pushl %eax
	pushl %edx
	pushl %ecx
	call *%esi
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe168:
	.size	 M3CG_Rd__loophole,.Lfe168-M3CG_Rd__loophole
	.align 16
	.type	 M3CG_Rd__assert_fault,@function
M3CG_Rd__assert_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 544(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe169:
	.size	 M3CG_Rd__assert_fault,.Lfe169-M3CG_Rd__assert_fault
	.align 16
	.type	 M3CG_Rd__narrow_fault,@function
M3CG_Rd__narrow_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 548(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe170:
	.size	 M3CG_Rd__narrow_fault,.Lfe170-M3CG_Rd__narrow_fault
	.align 16
	.type	 M3CG_Rd__return_fault,@function
M3CG_Rd__return_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 552(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe171:
	.size	 M3CG_Rd__return_fault,.Lfe171-M3CG_Rd__return_fault
	.align 16
	.type	 M3CG_Rd__case_fault,@function
M3CG_Rd__case_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 556(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe172:
	.size	 M3CG_Rd__case_fault,.Lfe172-M3CG_Rd__case_fault
	.align 16
	.type	 M3CG_Rd__typecase_fault,@function
M3CG_Rd__typecase_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 560(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe173:
	.size	 M3CG_Rd__typecase_fault,.Lfe173-M3CG_Rd__typecase_fault
	.align 16
	.type	 M3CG_Rd__check_nil,@function
M3CG_Rd__check_nil:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 564(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe174:
	.size	 M3CG_Rd__check_nil,.Lfe174-M3CG_Rd__check_nil
	.align 16
	.type	 M3CG_Rd__check_lo,@function
M3CG_Rd__check_lo:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %ebx
	leal -8(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 568(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	movl -12(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe175:
	.size	 M3CG_Rd__check_lo,.Lfe175-M3CG_Rd__check_lo
	.align 16
	.type	 M3CG_Rd__check_hi,@function
M3CG_Rd__check_hi:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %ebx
	leal -8(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 572(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	movl -12(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe176:
	.size	 M3CG_Rd__check_hi,.Lfe176-M3CG_Rd__check_hi
	.align 16
	.type	 M3CG_Rd__check_range,@function
M3CG_Rd__check_range:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %esi
	pushl %ebx
	leal -16(%ebp),%esi
	pushl %esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	leal -8(%ebp),%ebx
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_Tint
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 576(%eax),%eax
	pushl %ebx
	pushl %esi
	pushl %edx
	call *%eax
	leal -24(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe177:
	.size	 M3CG_Rd__check_range,.Lfe177-M3CG_Rd__check_range
	.align 16
	.type	 M3CG_Rd__check_index,@function
M3CG_Rd__check_index:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 580(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe178:
	.size	 M3CG_Rd__check_index,.Lfe178-M3CG_Rd__check_index
	.align 16
	.type	 M3CG_Rd__check_eq,@function
M3CG_Rd__check_eq:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 584(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe179:
	.size	 M3CG_Rd__check_eq,.Lfe179-M3CG_Rd__check_eq
	.align 16
	.type	 M3CG_Rd__add_offset,@function
M3CG_Rd__add_offset:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 588(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe180:
	.size	 M3CG_Rd__add_offset,.Lfe180-M3CG_Rd__add_offset
	.align 16
	.type	 M3CG_Rd__index_address,@function
M3CG_Rd__index_address:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 592(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe181:
	.size	 M3CG_Rd__index_address,.Lfe181-M3CG_Rd__index_address
	.align 16
	.type	 M3CG_Rd__start_call_direct,@function
M3CG_Rd__start_call_direct:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl %ebx,%edi
	movl 4(%eax),%ebx
	movl (%ebx),%eax
	movl 596(%eax),%ecx
	xorl %eax,%eax
	movb %dl,%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ebx
	call *%ecx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe182:
	.size	 M3CG_Rd__start_call_direct,.Lfe182-M3CG_Rd__start_call_direct
	.align 16
	.type	 M3CG_Rd__start_call_indirect,@function
M3CG_Rd__start_call_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_callConv
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl %ecx,%esi
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	movl 604(%eax),%edx
	pushl %esi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe183:
	.size	 M3CG_Rd__start_call_indirect,.Lfe183-M3CG_Rd__start_call_indirect
	.align 16
	.type	 M3CG_Rd__pop_param,@function
M3CG_Rd__pop_param:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	addl $4,%esp
	movl 612(%eax),%ebx
	xorl %eax,%eax
	movb %dl,%al
	cmpl $13,%eax
	jle .L505
	pushl $26817
	call _m3_fault
	.align 16
.L505:
	pushl %eax
	pushl %ecx
	call *%ebx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe184:
	.size	 M3CG_Rd__pop_param,.Lfe184-M3CG_Rd__pop_param
	.align 16
	.type	 M3CG_Rd__pop_struct,@function
M3CG_Rd__pop_struct:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%esi
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_int
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl 4(%eax),%ecx
	movl %edx,%ebx
	movl (%ecx),%eax
	addl $8,%esp
	movl 616(%eax),%eax
	testl %esi,%esi
	jge .L507
	pushl $26929
	call _m3_fault
	.align 16
.L507:
	testl %edx,%edx
	jge .L508
	pushl $26929
	call _m3_fault
	.align 16
.L508:
	pushl %ebx
	pushl %esi
	pushl %ecx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe185:
	.size	 M3CG_Rd__pop_struct,.Lfe185-M3CG_Rd__pop_struct
	.align 16
	.type	 M3CG_Rd__pop_static_link,@function
M3CG_Rd__pop_static_link:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 620(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe186:
	.size	 M3CG_Rd__pop_static_link,.Lfe186-M3CG_Rd__pop_static_link
	.align 16
	.type	 M3CG_Rd__call_direct,@function
M3CG_Rd__call_direct:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%dl
	movl 8(%ebp),%eax
	movl %ebx,%esi
	movl 4(%eax),%ebx
	movl (%ebx),%eax
	movl 600(%eax),%ecx
	xorl %eax,%eax
	movb %dl,%al
	pushl %eax
	pushl %esi
	pushl %ebx
	call *%ecx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe187:
	.size	 M3CG_Rd__call_direct,.Lfe187-M3CG_Rd__call_direct
	.align 16
	.type	 M3CG_Rd__call_indirect,@function
M3CG_Rd__call_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_type
	movb %al,%bl
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_callConv
	movl %eax,%ecx
	movl 8(%ebp),%eax
	movl %ecx,%esi
	movl 4(%eax),%ecx
	movl (%ecx),%eax
	movl 608(%eax),%edx
	pushl %esi
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe188:
	.size	 M3CG_Rd__call_indirect,.Lfe188-M3CG_Rd__call_indirect
	.align 16
	.type	 M3CG_Rd__load_procedure,@function
M3CG_Rd__load_procedure:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 624(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe189:
	.size	 M3CG_Rd__load_procedure,.Lfe189-M3CG_Rd__load_procedure
	.align 16
	.type	 M3CG_Rd__load_static_link,@function
M3CG_Rd__load_static_link:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_proc
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 628(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe190:
	.size	 M3CG_Rd__load_static_link,.Lfe190-M3CG_Rd__load_static_link
	.align 16
	.type	 M3CG_Rd__comment,@function
M3CG_Rd__comment:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__GetCh
	movl 8(%ebp),%eax
	pushl %eax
	call M3CG_Rd__Scan_line
	movl %eax,%edx
	movl 8(%ebp),%eax
	movl %edx,%ecx
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 632(%eax),%eax
	pushl $0
	pushl $0
	pushl $0
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe191:
	.size	 M3CG_Rd__comment,.Lfe191-M3CG_Rd__comment
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_M3CG_Rd
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe192:
	.size	 _m3_fault,.Lfe192-_m3_fault
.globl MM_M3CG_Rd
.data
	.align 4
	.type	 MM_M3CG_Rd,@object
	.size	 MM_M3CG_Rd,11704
MM_M3CG_Rd:
	.long MM_M3CG_Rd+11494
	.long MM_M3CG_Rd+44
	.long MM_M3CG_Rd+6532
	.zero	8
	.long MM_M3CG_Rd+9192
	.zero	4
	.long MM_M3CG_Rd+11488
	.long MM_M3CG_Rd+11488
	.zero	16
	.long -524120270
.byte 122
.byte 71
.byte 189
.byte 246
.byte 72
.byte 200
.byte 127
.byte 22
	.long 1
	.zero	4
	.long 4096
	.long 1
	.zero	20
	.long MM_M3CG_Rd+11669
	.zero	4
	.long MM_M3CG_Rd+11675
	.zero	28
	.long MM_M3CG_Rd+11681
	.long MM_M3CG_Rd+148
	.zero	8
	.long -1383512300
.byte 196
.byte 206
.byte 165
.byte 186
.byte 208
.byte 137
.byte 44
.byte 23
	.long 1
	.zero	4
	.long 8
	.long 4
	.zero	8
	.long 1
	.long 4
	.zero	4
	.long MM_M3CG_Rd+11651
	.long MM_M3CG_Rd+11656
	.long MM_M3CG_Rd+11661
	.zero	32
	.long MM_M3CG_Rd+252
	.zero	8
	.long 665846209
.byte 56
.byte 161
.byte 47
.byte 38
.byte 249
.byte 160
.byte 159
.byte 1
	.long 1
	.zero	4
	.long 8
	.long 4
	.zero	8
	.long 1
	.long 4
	.zero	4
	.long MM_M3CG_Rd+11633
	.long MM_M3CG_Rd+11638
	.long MM_M3CG_Rd+11643
	.zero	36
	.long MM_M3CG_Rd+2444
	.long M3CG_Rd__begin_unit
	.long MM_M3CG_Rd+2468
	.long M3CG_Rd__end_unit
	.long MM_M3CG_Rd+2492
	.long M3CG_Rd__import_unit
	.long MM_M3CG_Rd+2516
	.long M3CG_Rd__export_unit
	.long MM_M3CG_Rd+2540
	.long M3CG_Rd__set_source_file
	.long MM_M3CG_Rd+2564
	.long M3CG_Rd__set_source_line
	.long MM_M3CG_Rd+2588
	.long M3CG_Rd__declare_typename
	.long MM_M3CG_Rd+2620
	.long M3CG_Rd__declare_array
	.long MM_M3CG_Rd+2648
	.long M3CG_Rd__declare_open_array
	.long MM_M3CG_Rd+2680
	.long M3CG_Rd__declare_enum
	.long MM_M3CG_Rd+2708
	.long M3CG_Rd__declare_enum_elt
	.long MM_M3CG_Rd+2740
	.long M3CG_Rd__declare_packed
	.long MM_M3CG_Rd+2768
	.long M3CG_Rd__declare_record
	.long MM_M3CG_Rd+2796
	.long M3CG_Rd__declare_field
	.long MM_M3CG_Rd+2824
	.long M3CG_Rd__declare_set
	.long MM_M3CG_Rd+2848
	.long M3CG_Rd__declare_subrange
	.long MM_M3CG_Rd+2880
	.long M3CG_Rd__declare_pointer
	.long MM_M3CG_Rd+2908
	.long M3CG_Rd__declare_indirect
	.long MM_M3CG_Rd+2940
	.long M3CG_Rd__declare_proctype
	.long MM_M3CG_Rd+2972
	.long M3CG_Rd__declare_formal
	.long MM_M3CG_Rd+3000
	.long M3CG_Rd__declare_raises
	.long MM_M3CG_Rd+3028
	.long M3CG_Rd__declare_object
	.long MM_M3CG_Rd+3056
	.long M3CG_Rd__declare_method
	.long MM_M3CG_Rd+3084
	.long M3CG_Rd__declare_opaque
	.long MM_M3CG_Rd+3112
	.long M3CG_Rd__reveal_opaque
	.long MM_M3CG_Rd+3140
	.long M3CG_Rd__declare_exception
	.long MM_M3CG_Rd+3172
	.long M3CG_Rd__set_runtime_proc
	.long MM_M3CG_Rd+3204
	.long M3CG_Rd__set_runtime_hook
	.long MM_M3CG_Rd+3236
	.long M3CG_Rd__get_runtime_hook
	.long MM_M3CG_Rd+3268
	.long M3CG_Rd__import_global
	.long MM_M3CG_Rd+3296
	.long M3CG_Rd__declare_segment
	.long MM_M3CG_Rd+3324
	.long M3CG_Rd__bind_segment
	.long MM_M3CG_Rd+3352
	.long M3CG_Rd__declare_global
	.long MM_M3CG_Rd+3380
	.long M3CG_Rd__declare_constant
	.long MM_M3CG_Rd+3412
	.long M3CG_Rd__declare_local
	.long MM_M3CG_Rd+3440
	.long M3CG_Rd__declare_param
	.long MM_M3CG_Rd+3468
	.long M3CG_Rd__declare_temp
	.long MM_M3CG_Rd+3496
	.long M3CG_Rd__free_temp
	.long MM_M3CG_Rd+3520
	.long M3CG_Rd__begin_init
	.long MM_M3CG_Rd+3544
	.long M3CG_Rd__end_init
	.long MM_M3CG_Rd+3568
	.long M3CG_Rd__init_int
	.long MM_M3CG_Rd+3592
	.long M3CG_Rd__init_proc
	.long MM_M3CG_Rd+3616
	.long M3CG_Rd__init_label
	.long MM_M3CG_Rd+3640
	.long M3CG_Rd__init_var
	.long MM_M3CG_Rd+3664
	.long M3CG_Rd__init_offset
	.long MM_M3CG_Rd+3688
	.long M3CG_Rd__init_chars
	.long MM_M3CG_Rd+3712
	.long M3CG_Rd__init_float
	.long MM_M3CG_Rd+3736
	.long M3CG_Rd__import_procedure
	.long MM_M3CG_Rd+3768
	.long M3CG_Rd__declare_procedure
	.long MM_M3CG_Rd+3800
	.long M3CG_Rd__begin_procedure
	.long MM_M3CG_Rd+3828
	.long M3CG_Rd__end_procedure
	.long MM_M3CG_Rd+3856
	.long M3CG_Rd__begin_block
	.long MM_M3CG_Rd+3880
	.long M3CG_Rd__end_block
	.long MM_M3CG_Rd+3904
	.long M3CG_Rd__note_procedure_origin
	.long MM_M3CG_Rd+3940
	.long M3CG_Rd__set_label
	.long MM_M3CG_Rd+3956
	.long M3CG_Rd__jump
	.long MM_M3CG_Rd+3976
	.long M3CG_Rd__if_true
	.long MM_M3CG_Rd+3996
	.long M3CG_Rd__if_false
	.long MM_M3CG_Rd+4020
	.long M3CG_Rd__if_eq
	.long MM_M3CG_Rd+4040
	.long M3CG_Rd__if_ne
	.long MM_M3CG_Rd+4060
	.long M3CG_Rd__if_gt
	.long MM_M3CG_Rd+4080
	.long M3CG_Rd__if_ge
	.long MM_M3CG_Rd+4100
	.long M3CG_Rd__if_lt
	.long MM_M3CG_Rd+4120
	.long M3CG_Rd__if_le
	.long MM_M3CG_Rd+4140
	.long M3CG_Rd__case_jump
	.long MM_M3CG_Rd+4164
	.long M3CG_Rd__exit_proc
	.long MM_M3CG_Rd+4188
	.long M3CG_Rd__load
	.long MM_M3CG_Rd+4208
	.long M3CG_Rd__store
	.long MM_M3CG_Rd+4228
	.long M3CG_Rd__store_ref
	.long MM_M3CG_Rd+4252
	.long M3CG_Rd__load_address
	.long MM_M3CG_Rd+4280
	.long M3CG_Rd__load_indirect
	.long MM_M3CG_Rd+4308
	.long M3CG_Rd__store_indirect
	.long MM_M3CG_Rd+4336
	.long M3CG_Rd__store_ref_indirect
	.long MM_M3CG_Rd+4368
	.long M3CG_Rd__load_nil
	.long MM_M3CG_Rd+4392
	.long M3CG_Rd__load_integer
	.long MM_M3CG_Rd+4420
	.long M3CG_Rd__load_float
	.long MM_M3CG_Rd+4444
	.long M3CG_Rd__eq
	.long MM_M3CG_Rd+4460
	.long M3CG_Rd__ne
	.long MM_M3CG_Rd+4476
	.long M3CG_Rd__gt
	.long MM_M3CG_Rd+4492
	.long M3CG_Rd__ge
	.long MM_M3CG_Rd+4508
	.long M3CG_Rd__lt
	.long MM_M3CG_Rd+4524
	.long M3CG_Rd__le
	.long MM_M3CG_Rd+4540
	.long M3CG_Rd__add
	.long MM_M3CG_Rd+4556
	.long M3CG_Rd__subtract
	.long MM_M3CG_Rd+4580
	.long M3CG_Rd__multiply
	.long MM_M3CG_Rd+4604
	.long M3CG_Rd__divide
	.long MM_M3CG_Rd+4624
	.long M3CG_Rd__div
	.long MM_M3CG_Rd+4640
	.long M3CG_Rd__mod
	.long MM_M3CG_Rd+4656
	.long M3CG_Rd__negate
	.long MM_M3CG_Rd+4676
	.long M3CG_Rd__abs
	.long MM_M3CG_Rd+4692
	.long M3CG_Rd__max
	.long MM_M3CG_Rd+4708
	.long M3CG_Rd__min
	.long MM_M3CG_Rd+4724
	.long M3CG_Rd__round
	.long MM_M3CG_Rd+4744
	.long M3CG_Rd__trunc
	.long MM_M3CG_Rd+4764
	.long M3CG_Rd__floor
	.long MM_M3CG_Rd+4784
	.long M3CG_Rd__ceiling
	.long MM_M3CG_Rd+4804
	.long M3CG_Rd__cvt_float
	.long MM_M3CG_Rd+4828
	.long M3CG_Rd__set_union
	.long MM_M3CG_Rd+4852
	.long M3CG_Rd__set_difference
	.long MM_M3CG_Rd+4880
	.long M3CG_Rd__set_intersection
	.long MM_M3CG_Rd+4912
	.long M3CG_Rd__set_sym_difference
	.long MM_M3CG_Rd+4944
	.long M3CG_Rd__set_member
	.long MM_M3CG_Rd+4968
	.long M3CG_Rd__set_eq
	.long MM_M3CG_Rd+4988
	.long M3CG_Rd__set_ne
	.long MM_M3CG_Rd+5008
	.long M3CG_Rd__set_gt
	.long MM_M3CG_Rd+5028
	.long M3CG_Rd__set_ge
	.long MM_M3CG_Rd+5048
	.long M3CG_Rd__set_lt
	.long MM_M3CG_Rd+5068
	.long M3CG_Rd__set_le
	.long MM_M3CG_Rd+5088
	.long M3CG_Rd__set_range
	.long MM_M3CG_Rd+5112
	.long M3CG_Rd__set_singleton
	.long MM_M3CG_Rd+5140
	.long M3CG_Rd__not
	.long MM_M3CG_Rd+5156
	.long M3CG_Rd__and
	.long MM_M3CG_Rd+5172
	.long M3CG_Rd__or
	.long MM_M3CG_Rd+5188
	.long M3CG_Rd__xor
	.long MM_M3CG_Rd+5204
	.long M3CG_Rd__shift
	.long MM_M3CG_Rd+5224
	.long M3CG_Rd__shift_left
	.long MM_M3CG_Rd+5248
	.long M3CG_Rd__shift_right
	.long MM_M3CG_Rd+5272
	.long M3CG_Rd__rotate
	.long MM_M3CG_Rd+5292
	.long M3CG_Rd__rotate_left
	.long MM_M3CG_Rd+5316
	.long M3CG_Rd__rotate_right
	.long MM_M3CG_Rd+5344
	.long M3CG_Rd__extract
	.long MM_M3CG_Rd+5364
	.long M3CG_Rd__extract_n
	.long MM_M3CG_Rd+5388
	.long M3CG_Rd__extract_mn
	.long MM_M3CG_Rd+5412
	.long M3CG_Rd__insert
	.long MM_M3CG_Rd+5432
	.long M3CG_Rd__insert_n
	.long MM_M3CG_Rd+5456
	.long M3CG_Rd__insert_mn
	.long MM_M3CG_Rd+5480
	.long M3CG_Rd__swap
	.long MM_M3CG_Rd+5500
	.long M3CG_Rd__pop
	.long MM_M3CG_Rd+5516
	.long M3CG_Rd__copy
	.long MM_M3CG_Rd+5536
	.long M3CG_Rd__copy_n
	.long MM_M3CG_Rd+5556
	.long M3CG_Rd__zero
	.long MM_M3CG_Rd+5576
	.long M3CG_Rd__zero_n
	.long MM_M3CG_Rd+5596
	.long M3CG_Rd__loophole
	.long MM_M3CG_Rd+5620
	.long M3CG_Rd__assert_fault
	.long MM_M3CG_Rd+5648
	.long M3CG_Rd__narrow_fault
	.long MM_M3CG_Rd+5676
	.long M3CG_Rd__return_fault
	.long MM_M3CG_Rd+5704
	.long M3CG_Rd__case_fault
	.long MM_M3CG_Rd+5728
	.long M3CG_Rd__typecase_fault
	.long MM_M3CG_Rd+5756
	.long M3CG_Rd__check_nil
	.long MM_M3CG_Rd+5780
	.long M3CG_Rd__check_lo
	.long MM_M3CG_Rd+5804
	.long M3CG_Rd__check_hi
	.long MM_M3CG_Rd+5828
	.long M3CG_Rd__check_range
	.long MM_M3CG_Rd+5852
	.long M3CG_Rd__check_index
	.long MM_M3CG_Rd+5876
	.long M3CG_Rd__check_eq
	.long MM_M3CG_Rd+5900
	.long M3CG_Rd__add_offset
	.long MM_M3CG_Rd+5924
	.long M3CG_Rd__index_address
	.long MM_M3CG_Rd+5952
	.long M3CG_Rd__start_call_direct
	.long MM_M3CG_Rd+5984
	.long M3CG_Rd__call_direct
	.long MM_M3CG_Rd+6008
	.long M3CG_Rd__start_call_indirect
	.long MM_M3CG_Rd+6040
	.long M3CG_Rd__call_indirect
	.long MM_M3CG_Rd+6068
	.long M3CG_Rd__pop_param
	.long MM_M3CG_Rd+6092
	.long M3CG_Rd__pop_struct
	.long MM_M3CG_Rd+6116
	.long M3CG_Rd__pop_static_link
	.long MM_M3CG_Rd+6144
	.long M3CG_Rd__load_procedure
	.long MM_M3CG_Rd+6172
	.long M3CG_Rd__load_static_link
	.long MM_M3CG_Rd+6204
	.long M3CG_Rd__comment
	.long MM_M3CG_Rd+6220
	.long MM_M3CG_Rd+6240
	.long MM_M3CG_Rd+6260
	.long MM_M3CG_Rd+6276
	.long MM_M3CG_Rd+6296
	.long MM_M3CG_Rd+6316
	.long MM_M3CG_Rd+6336
	.long MM_M3CG_Rd+6356
	.long MM_M3CG_Rd+6376
	.long MM_M3CG_Rd+6396
	.long MM_M3CG_Rd+6416
	.long MM_M3CG_Rd+6436
	.long MM_M3CG_Rd+6456
	.long MM_M3CG_Rd+6476
	.long MM_M3CG_Rd+6496
	.long MM_M3CG_Rd+6516
	.zero	8
	.long M3CG_Rd__Init
	.long M3CG_Rd__Error
	.long M3CG_Rd__Scan_word
	.long M3CG_Rd__Scan_id
	.long M3CG_Rd__Scan_name
	.long M3CG_Rd__Scan_text
	.long M3CG_Rd__GetDigit
	.long M3CG_Rd__CvtInt
	.long M3CG_Rd__Scan_int
	.long M3CG_Rd__Scan_Tint
	.long M3CG_Rd__Scan_float
	.long M3CG_Rd__BadPrec
	.long M3CG_Rd__Scan_type
	.long M3CG_Rd__Scan_bool
	.long M3CG_Rd__Scan_label
	.long M3CG_Rd__ExpandLabels
	.long M3CG_Rd__Scan_tipe
	.long M3CG_Rd__Scan_varName
	.long M3CG_Rd__Scan_var
	.long M3CG_Rd__Scan_procName
	.long M3CG_Rd__Scan_proc
	.long M3CG_Rd__Scan_sign
	.long M3CG_Rd__Scan_callConv
	.long M3CG_Rd__Scan_line
	.long M3CG_Rd__Scan_buf
	.long M3CG_Rd__Skip_blanks
	.long M3CG_Rd__Skip_white_space
	.long M3CG_Rd__Skip_line
	.long M3CG_Rd__GetCh
	.long M3CG_Rd__RefillBuffer
	.long M3CG_Rd__begin_unit
	.long M3CG_Rd__end_unit
	.long M3CG_Rd__import_unit
	.long M3CG_Rd__export_unit
	.long M3CG_Rd__set_source_file
	.long M3CG_Rd__set_source_line
	.long M3CG_Rd__declare_typename
	.long M3CG_Rd__declare_array
	.long M3CG_Rd__declare_open_array
	.long M3CG_Rd__declare_enum
	.long M3CG_Rd__declare_enum_elt
	.long M3CG_Rd__declare_packed
	.long M3CG_Rd__declare_record
	.long M3CG_Rd__declare_field
	.long M3CG_Rd__declare_set
	.long M3CG_Rd__declare_subrange
	.long M3CG_Rd__declare_pointer
	.long M3CG_Rd__declare_indirect
	.long M3CG_Rd__declare_proctype
	.long M3CG_Rd__declare_formal
	.long M3CG_Rd__declare_raises
	.long M3CG_Rd__declare_object
	.long M3CG_Rd__declare_method
	.long M3CG_Rd__declare_opaque
	.long M3CG_Rd__reveal_opaque
	.long M3CG_Rd__declare_exception
	.long M3CG_Rd__set_runtime_proc
	.long M3CG_Rd__set_runtime_hook
	.long M3CG_Rd__get_runtime_hook
	.long M3CG_Rd__AddVar
	.long M3CG_Rd__ExpandVars
	.long M3CG_Rd__import_global
	.long M3CG_Rd__declare_segment
	.long M3CG_Rd__bind_segment
	.long M3CG_Rd__declare_global
	.long M3CG_Rd__declare_constant
	.long M3CG_Rd__declare_local
	.long M3CG_Rd__declare_param
	.long M3CG_Rd__declare_temp
	.long M3CG_Rd__free_temp
	.long M3CG_Rd__begin_init
	.long M3CG_Rd__end_init
	.long M3CG_Rd__init_int
	.long M3CG_Rd__init_proc
	.long M3CG_Rd__init_label
	.long M3CG_Rd__init_var
	.long M3CG_Rd__init_offset
	.long M3CG_Rd__init_chars
	.long M3CG_Rd__init_float
	.long M3CG_Rd__AddProc
	.long M3CG_Rd__ExpandProcs
	.long M3CG_Rd__import_procedure
	.long M3CG_Rd__declare_procedure
	.long M3CG_Rd__begin_procedure
	.long M3CG_Rd__end_procedure
	.long M3CG_Rd__begin_block
	.long M3CG_Rd__end_block
	.long M3CG_Rd__note_procedure_origin
	.long M3CG_Rd__set_label
	.long M3CG_Rd__jump
	.long M3CG_Rd__if_true
	.long M3CG_Rd__if_false
	.long M3CG_Rd__if_eq
	.long M3CG_Rd__if_ne
	.long M3CG_Rd__if_gt
	.long M3CG_Rd__if_ge
	.long M3CG_Rd__if_lt
	.long M3CG_Rd__if_le
	.long M3CG_Rd__case_jump
	.long M3CG_Rd__exit_proc
	.long M3CG_Rd__load
	.long M3CG_Rd__store
	.long M3CG_Rd__store_ref
	.long M3CG_Rd__load_address
	.long M3CG_Rd__load_indirect
	.long M3CG_Rd__store_indirect
	.long M3CG_Rd__store_ref_indirect
	.long M3CG_Rd__load_nil
	.long M3CG_Rd__load_integer
	.long M3CG_Rd__load_float
	.long M3CG_Rd__eq
	.long M3CG_Rd__ne
	.long M3CG_Rd__gt
	.long M3CG_Rd__ge
	.long M3CG_Rd__lt
	.long M3CG_Rd__le
	.long M3CG_Rd__add
	.long M3CG_Rd__subtract
	.long M3CG_Rd__multiply
	.long M3CG_Rd__divide
	.long M3CG_Rd__div
	.long M3CG_Rd__mod
	.long M3CG_Rd__negate
	.long M3CG_Rd__abs
	.long M3CG_Rd__max
	.long M3CG_Rd__min
	.long M3CG_Rd__round
	.long M3CG_Rd__trunc
	.long M3CG_Rd__floor
	.long M3CG_Rd__ceiling
	.long M3CG_Rd__cvt_float
	.long M3CG_Rd__set_union
	.long M3CG_Rd__set_difference
	.long M3CG_Rd__set_intersection
	.long M3CG_Rd__set_sym_difference
	.long M3CG_Rd__set_member
	.long M3CG_Rd__set_eq
	.long M3CG_Rd__set_ne
	.long M3CG_Rd__set_gt
	.long M3CG_Rd__set_ge
	.long M3CG_Rd__set_lt
	.long M3CG_Rd__set_le
	.long M3CG_Rd__set_range
	.long M3CG_Rd__set_singleton
	.long M3CG_Rd__not
	.long M3CG_Rd__and
	.long M3CG_Rd__or
	.long M3CG_Rd__xor
	.long M3CG_Rd__shift
	.long M3CG_Rd__shift_left
	.long M3CG_Rd__shift_right
	.long M3CG_Rd__rotate
	.long M3CG_Rd__rotate_left
	.long M3CG_Rd__rotate_right
	.long M3CG_Rd__extract
	.long M3CG_Rd__extract_n
	.long M3CG_Rd__extract_mn
	.long M3CG_Rd__insert
	.long M3CG_Rd__insert_n
	.long M3CG_Rd__insert_mn
	.long M3CG_Rd__swap
	.long M3CG_Rd__pop
	.long M3CG_Rd__copy_n
	.long M3CG_Rd__copy
	.long M3CG_Rd__zero_n
	.long M3CG_Rd__zero
	.long M3CG_Rd__loophole
	.long M3CG_Rd__assert_fault
	.long M3CG_Rd__narrow_fault
	.long M3CG_Rd__return_fault
	.long M3CG_Rd__case_fault
	.long M3CG_Rd__typecase_fault
	.long M3CG_Rd__check_nil
	.long M3CG_Rd__check_lo
	.long M3CG_Rd__check_hi
	.long M3CG_Rd__check_range
	.long M3CG_Rd__check_index
	.long M3CG_Rd__check_eq
	.long M3CG_Rd__add_offset
	.long M3CG_Rd__index_address
	.long M3CG_Rd__start_call_direct
	.long M3CG_Rd__start_call_indirect
	.long M3CG_Rd__pop_param
	.long M3CG_Rd__pop_struct
	.long M3CG_Rd__pop_static_link
	.long M3CG_Rd__call_direct
	.long M3CG_Rd__call_indirect
	.long M3CG_Rd__load_procedure
	.long M3CG_Rd__load_static_link
	.long M3CG_Rd__comment
	.long M3CG_Rd__Inhale
	.long 2
	.long MM_M3CG_Rd+2452
	.long 11
	.ascii	"begin_unit"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+2476
	.long 9
	.ascii	"end_unit"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2500
	.long 12
	.ascii	"import_unit"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+2524
	.long 12
	.ascii	"export_unit"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+2548
	.long 10
	.ascii	"-----FILE"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+2572
	.long 10
	.ascii	"-----LINE"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+2596
	.long 17
	.ascii	"declare_typename"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2628
	.long 14
	.ascii	"declare_array"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+2656
	.long 19
	.ascii	"declare_open_array"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+2688
	.long 13
	.ascii	"declare_enum"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2716
	.long 17
	.ascii	"declare_enum_elt"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2748
	.long 15
	.ascii	"declare_packed"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+2776
	.long 15
	.ascii	"declare_record"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+2804
	.long 14
	.ascii	"declare_field"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+2832
	.long 12
	.ascii	"declare_set"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+2856
	.long 17
	.ascii	"declare_subrange"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2888
	.long 16
	.ascii	"declare_pointer"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+2916
	.long 17
	.ascii	"declare_indirect"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2948
	.long 17
	.ascii	"declare_proctype"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+2980
	.long 15
	.ascii	"declare_formal"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3008
	.long 15
	.ascii	"declare_raises"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3036
	.long 15
	.ascii	"declare_object"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3064
	.long 15
	.ascii	"declare_method"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3092
	.long 15
	.ascii	"declare_opaque"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3120
	.long 14
	.ascii	"reveal_opaque"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3148
	.long 18
	.ascii	"declare_exception"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3180
	.long 17
	.ascii	"set_runtime_proc"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3212
	.long 17
	.ascii	"set_runtime_hook"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3244
	.long 17
	.ascii	"get_runtime_hook"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3276
	.long 14
	.ascii	"import_global"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3304
	.long 16
	.ascii	"declare_segment"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+3332
	.long 13
	.ascii	"bind_segment"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3360
	.long 15
	.ascii	"declare_global"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3388
	.long 17
	.ascii	"declare_constant"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3420
	.long 14
	.ascii	"declare_local"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3448
	.long 14
	.ascii	"declare_param"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3476
	.long 13
	.ascii	"declare_temp"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3504
	.long 10
	.ascii	"free_temp"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3528
	.long 11
	.ascii	"begin_init"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3552
	.long 9
	.ascii	"end_init"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3576
	.long 9
	.ascii	"init_int"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3600
	.long 10
	.ascii	"init_proc"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3624
	.long 11
	.ascii	"init_label"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3648
	.long 9
	.ascii	"init_var"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3672
	.long 12
	.ascii	"init_offset"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+3696
	.long 11
	.ascii	"init_chars"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3720
	.long 11
	.ascii	"init_float"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+3744
	.long 17
	.ascii	"import_procedure"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3776
	.long 18
	.ascii	"declare_procedure"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3808
	.long 16
	.ascii	"begin_procedure"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+3836
	.long 14
	.ascii	"end_procedure"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3864
	.long 12
	.ascii	"begin_block"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+3888
	.long 10
	.ascii	"end_block"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3912
	.long 22
	.ascii	"note_procedure_origin"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3948
	.long 2
	.ascii	"."
	.zero	3
	.long 2
	.long MM_M3CG_Rd+3964
	.long 5
	.ascii	"jump"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+3984
	.long 8
	.ascii	"if_true"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4004
	.long 9
	.ascii	"if_false"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4028
	.long 6
	.ascii	"if_eq"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4048
	.long 6
	.ascii	"if_ne"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4068
	.long 6
	.ascii	"if_gt"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4088
	.long 6
	.ascii	"if_ge"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4108
	.long 6
	.ascii	"if_lt"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4128
	.long 6
	.ascii	"if_le"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4148
	.long 10
	.ascii	"case_jump"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4172
	.long 10
	.ascii	"exit_proc"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4196
	.long 5
	.ascii	"load"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4216
	.long 6
	.ascii	"store"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4236
	.long 10
	.ascii	"store_ref"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4260
	.long 13
	.ascii	"load_address"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4288
	.long 14
	.ascii	"load_indirect"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4316
	.long 15
	.ascii	"store_indirect"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4344
	.long 19
	.ascii	"store_ref_indirect"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4376
	.long 9
	.ascii	"load_nil"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4400
	.long 13
	.ascii	"load_integer"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4428
	.long 11
	.ascii	"load_float"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4452
	.long 3
	.ascii	"eq"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4468
	.long 3
	.ascii	"ne"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4484
	.long 3
	.ascii	"gt"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4500
	.long 3
	.ascii	"ge"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4516
	.long 3
	.ascii	"lt"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4532
	.long 3
	.ascii	"le"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4548
	.long 4
	.ascii	"add"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4564
	.long 9
	.ascii	"subtract"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4588
	.long 9
	.ascii	"multiply"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4612
	.long 7
	.ascii	"divide"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4632
	.long 4
	.ascii	"div"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4648
	.long 4
	.ascii	"mod"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4664
	.long 7
	.ascii	"negate"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4684
	.long 4
	.ascii	"abs"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4700
	.long 4
	.ascii	"max"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4716
	.long 4
	.ascii	"min"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4732
	.long 6
	.ascii	"round"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4752
	.long 6
	.ascii	"trunc"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4772
	.long 6
	.ascii	"floor"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4792
	.long 8
	.ascii	"ceiling"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+4812
	.long 10
	.ascii	"cvt_float"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4836
	.long 10
	.ascii	"set_union"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+4860
	.long 15
	.ascii	"set_difference"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4888
	.long 17
	.ascii	"set_intersection"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+4920
	.long 19
	.ascii	"set_sym_difference"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4952
	.long 11
	.ascii	"set_member"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4976
	.long 7
	.ascii	"set_eq"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+4996
	.long 7
	.ascii	"set_ne"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5016
	.long 7
	.ascii	"set_gt"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5036
	.long 7
	.ascii	"set_ge"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5056
	.long 7
	.ascii	"set_lt"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5076
	.long 7
	.ascii	"set_le"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5096
	.long 10
	.ascii	"set_range"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5120
	.long 14
	.ascii	"set_singleton"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5148
	.long 4
	.ascii	"not"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5164
	.long 4
	.ascii	"and"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5180
	.long 3
	.ascii	"or"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5196
	.long 4
	.ascii	"xor"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5212
	.long 6
	.ascii	"shift"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5232
	.long 11
	.ascii	"shift_left"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5256
	.long 12
	.ascii	"shift_right"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5280
	.long 7
	.ascii	"rotate"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5300
	.long 12
	.ascii	"rotate_left"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5324
	.long 13
	.ascii	"rotate_right"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5352
	.long 8
	.ascii	"extract"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5372
	.long 10
	.ascii	"extract_n"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5396
	.long 11
	.ascii	"extract_mn"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5420
	.long 7
	.ascii	"insert"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5440
	.long 9
	.ascii	"insert_n"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5464
	.long 10
	.ascii	"insert_mn"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5488
	.long 5
	.ascii	"swap"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5508
	.long 4
	.ascii	"pop"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5524
	.long 5
	.ascii	"copy"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5544
	.long 7
	.ascii	"copy_n"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5564
	.long 5
	.ascii	"zero"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5584
	.long 7
	.ascii	"zero_n"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5604
	.long 9
	.ascii	"loophole"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5628
	.long 13
	.ascii	"assert_fault"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5656
	.long 13
	.ascii	"narrow_fault"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5684
	.long 13
	.ascii	"return_fault"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5712
	.long 11
	.ascii	"case_fault"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5736
	.long 15
	.ascii	"typecase_fault"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5764
	.long 10
	.ascii	"check_nil"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5788
	.long 9
	.ascii	"check_lo"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5812
	.long 9
	.ascii	"check_hi"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5836
	.long 12
	.ascii	"check_range"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5860
	.long 12
	.ascii	"check_index"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+5884
	.long 9
	.ascii	"check_eq"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+5908
	.long 11
	.ascii	"add_offset"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+5932
	.long 14
	.ascii	"index_address"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5960
	.long 18
	.ascii	"start_call_direct"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+5992
	.long 12
	.ascii	"call_direct"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6016
	.long 20
	.ascii	"start_call_indirect"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6048
	.long 14
	.ascii	"call_indirect"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6076
	.long 10
	.ascii	"pop_param"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6100
	.long 11
	.ascii	"pop_struct"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6124
	.long 16
	.ascii	"pop_static_link"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6152
	.long 15
	.ascii	"load_procedure"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6180
	.long 17
	.ascii	"load_static_link"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6212
	.long 2
	.ascii	"#"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6228
	.long 5
	.ascii	"Addr"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6248
	.long 5
	.ascii	"Word"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6268
	.long 4
	.ascii	"Int"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6284
	.long 5
	.ascii	"Reel"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6304
	.long 6
	.ascii	"LReel"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6324
	.long 6
	.ascii	"XReel"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6344
	.long 6
	.ascii	"Int.8"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6364
	.long 7
	.ascii	"Int.16"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6384
	.long 7
	.ascii	"Int.32"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6404
	.long 7
	.ascii	"Int.64"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6424
	.long 7
	.ascii	"Word.8"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6444
	.long 8
	.ascii	"Word.16"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6464
	.long 8
	.ascii	"Word.32"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6484
	.long 8
	.ascii	"Word.64"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6504
	.long 7
	.ascii	"Struct"
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6524
	.long 5
	.ascii	"Void"
	.zero	4
	.long MM_M3CG_Rd+6540
	.long -524120270
	.long MM_M3CG_Rd+6548
	.long -1383512300
	.long MM_M3CG_Rd+6556
	.long 665846209
	.long MM_M3CG_Rd+6600
	.long 562018850
	.long 2
	.long MM_M3CG_Rd+6576
	.long 24
	.ascii	"** undefined operator: "
	.zero	5
	.long 951908833
	.long 2
	.long MM_M3CG_Rd+6620
	.long 29
	.ascii	"** ERROR in M3CG_Rd.Inhale: "
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6664
	.long 4
	.ascii	" **"
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6680
	.long 14
	.ascii	"missing name!"
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6708
	.long 1
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6724
	.long 9
	.ascii	"bad text"
	.zero	4
	.long 2
	.long MM_M3CG_Rd+6748
	.long 18
	.ascii	"bad octal digit: "
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6780
	.long 14
	.ascii	"bad integer: "
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6808
	.long 18
	.ascii	"illegal integer: "
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6840
	.long 16
	.ascii	"illegal float: "
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6868
	.long 31
	.ascii	"bad floating-point precision: "
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6912
	.long 15
	.ascii	"illegal type: "
	.zero	2
	.long 2
	.long MM_M3CG_Rd+6940
	.long 18
	.ascii	"illegal boolean: "
	.zero	3
	.long 2
	.long MM_M3CG_Rd+6972
	.long 12
	.ascii	"Bad label: "
	.zero	1
	.long 2
	.long MM_M3CG_Rd+6996
	.long 20
	.ascii	"Bad variable name: "
	.zero	1
	.long 2
	.long MM_M3CG_Rd+7028
	.long 21
	.ascii	"Bad procedure name: "
	.zero	4
	.long 2
	.long MM_M3CG_Rd+7064
	.long 11
	.ascii	"bad sign: "
	.zero	2
	.long 2
	.long MM_M3CG_Rd+7088
	.long 29
	.ascii	"unknown calling convention: "
	.zero	4
	.long 2
	.long MM_M3CG_Rd+7132
	.long 28
	.ascii	"unexpected get_runtime_hook"
	.zero	1
	.ascii	"comment"
	.zero	1
	.ascii	"load_static_link"
	.zero	1
	.ascii	"load_procedure"
	.zero	1
	.ascii	"call_indirect"
	.zero	1
	.ascii	"call_direct"
	.zero	1
	.ascii	"pop_static_link"
	.zero	1
	.ascii	"pop_struct"
	.zero	1
	.ascii	"pop_param"
	.zero	1
	.ascii	"start_call_indirect"
	.zero	1
	.ascii	"start_call_direct"
	.zero	1
	.ascii	"index_address"
	.zero	1
	.ascii	"add_offset"
	.zero	1
	.ascii	"check_eq"
	.zero	1
	.ascii	"check_index"
	.zero	1
	.ascii	"check_range"
	.zero	1
	.ascii	"check_hi"
	.zero	1
	.ascii	"check_lo"
	.zero	1
	.ascii	"check_nil"
	.zero	1
	.ascii	"typecase_fault"
	.zero	1
	.ascii	"case_fault"
	.zero	1
	.ascii	"return_fault"
	.zero	1
	.ascii	"narrow_fault"
	.zero	1
	.ascii	"assert_fault"
	.zero	1
	.ascii	"loophole"
	.zero	1
	.ascii	"zero"
	.zero	1
	.ascii	"zero_n"
	.zero	1
	.ascii	"copy"
	.zero	1
	.ascii	"copy_n"
	.zero	1
	.ascii	"pop"
	.zero	1
	.ascii	"swap"
	.zero	1
	.ascii	"insert_mn"
	.zero	1
	.ascii	"insert_n"
	.zero	1
	.ascii	"insert"
	.zero	1
	.ascii	"extract_mn"
	.zero	1
	.ascii	"extract_n"
	.zero	1
	.ascii	"extract"
	.zero	1
	.ascii	"rotate_right"
	.zero	1
	.ascii	"rotate_left"
	.zero	1
	.ascii	"rotate"
	.zero	1
	.ascii	"shift_right"
	.zero	1
	.ascii	"shift_left"
	.zero	1
	.ascii	"shift"
	.zero	1
	.ascii	"xor"
	.zero	1
	.ascii	"or"
	.zero	1
	.ascii	"and"
	.zero	1
	.ascii	"not"
	.zero	1
	.ascii	"set_singleton"
	.zero	1
	.ascii	"set_range"
	.zero	1
	.ascii	"set_le"
	.zero	1
	.ascii	"set_lt"
	.zero	1
	.ascii	"set_ge"
	.zero	1
	.ascii	"set_gt"
	.zero	1
	.ascii	"set_ne"
	.zero	1
	.ascii	"set_eq"
	.zero	1
	.ascii	"set_member"
	.zero	1
	.ascii	"set_sym_difference"
	.zero	1
	.ascii	"set_intersection"
	.zero	1
	.ascii	"set_difference"
	.zero	1
	.ascii	"set_union"
	.zero	1
	.ascii	"cvt_float"
	.zero	1
	.ascii	"ceiling"
	.zero	1
	.ascii	"floor"
	.zero	1
	.ascii	"trunc"
	.zero	1
	.ascii	"round"
	.zero	1
	.ascii	"min"
	.zero	1
	.ascii	"max"
	.zero	1
	.ascii	"abs"
	.zero	1
	.ascii	"negate"
	.zero	1
	.ascii	"mod"
	.zero	1
	.ascii	"div"
	.zero	1
	.ascii	"divide"
	.zero	1
	.ascii	"multiply"
	.zero	1
	.ascii	"subtract"
	.zero	1
	.ascii	"add"
	.zero	1
	.ascii	"le"
	.zero	1
	.ascii	"lt"
	.zero	1
	.ascii	"ge"
	.zero	1
	.ascii	"gt"
	.zero	1
	.ascii	"ne"
	.zero	1
	.ascii	"eq"
	.zero	1
	.ascii	"load_float"
	.zero	1
	.ascii	"load_integer"
	.zero	1
	.ascii	"load_nil"
	.zero	1
	.ascii	"store_ref_indirect"
	.zero	1
	.ascii	"store_indirect"
	.zero	1
	.ascii	"load_indirect"
	.zero	1
	.ascii	"load_address"
	.zero	1
	.ascii	"store_ref"
	.zero	1
	.ascii	"store"
	.zero	1
	.ascii	"load"
	.zero	1
	.ascii	"exit_proc"
	.zero	1
	.ascii	"case_jump"
	.zero	1
	.ascii	"if_le"
	.zero	1
	.ascii	"if_lt"
	.zero	1
	.ascii	"if_ge"
	.zero	1
	.ascii	"if_gt"
	.zero	1
	.ascii	"if_ne"
	.zero	1
	.ascii	"if_eq"
	.zero	1
	.ascii	"if_false"
	.zero	1
	.ascii	"if_true"
	.zero	1
	.ascii	"jump"
	.zero	1
	.ascii	"set_label"
	.zero	1
	.ascii	"note_procedure_origin"
	.zero	1
	.ascii	"end_block"
	.zero	1
	.ascii	"begin_block"
	.zero	1
	.ascii	"end_procedure"
	.zero	1
	.ascii	"begin_procedure"
	.zero	1
	.ascii	"declare_procedure"
	.zero	1
	.ascii	"import_procedure"
	.zero	1
	.ascii	"ExpandProcs"
	.zero	1
	.ascii	"AddProc"
	.zero	1
	.ascii	"init_float"
	.zero	1
	.ascii	"init_chars"
	.zero	1
	.ascii	"init_offset"
	.zero	1
	.ascii	"init_var"
	.zero	1
	.ascii	"init_label"
	.zero	1
	.ascii	"init_proc"
	.zero	1
	.ascii	"init_int"
	.zero	1
	.ascii	"end_init"
	.zero	1
	.ascii	"begin_init"
	.zero	1
	.ascii	"free_temp"
	.zero	1
	.ascii	"declare_temp"
	.zero	1
	.ascii	"declare_param"
	.zero	1
	.ascii	"declare_local"
	.zero	1
	.ascii	"declare_constant"
	.zero	1
	.ascii	"declare_global"
	.zero	1
	.ascii	"bind_segment"
	.zero	1
	.ascii	"declare_segment"
	.zero	1
	.ascii	"import_global"
	.zero	1
	.ascii	"ExpandVars"
	.zero	1
	.ascii	"AddVar"
	.zero	1
	.ascii	"get_runtime_hook"
	.zero	1
	.ascii	"set_runtime_hook"
	.zero	1
	.ascii	"set_runtime_proc"
	.zero	1
	.ascii	"declare_exception"
	.zero	1
	.ascii	"reveal_opaque"
	.zero	1
	.ascii	"declare_opaque"
	.zero	1
	.ascii	"declare_method"
	.zero	1
	.ascii	"declare_object"
	.zero	1
	.ascii	"declare_raises"
	.zero	1
	.ascii	"declare_formal"
	.zero	1
	.ascii	"declare_proctype"
	.zero	1
	.ascii	"declare_indirect"
	.zero	1
	.ascii	"declare_pointer"
	.zero	1
	.ascii	"declare_subrange"
	.zero	1
	.ascii	"declare_set"
	.zero	1
	.ascii	"declare_field"
	.zero	1
	.ascii	"declare_record"
	.zero	1
	.ascii	"declare_packed"
	.zero	1
	.ascii	"declare_enum_elt"
	.zero	1
	.ascii	"declare_enum"
	.zero	1
	.ascii	"declare_open_array"
	.zero	1
	.ascii	"declare_array"
	.zero	1
	.ascii	"declare_typename"
	.zero	1
	.ascii	"set_source_line"
	.zero	1
	.ascii	"set_source_file"
	.zero	1
	.ascii	"export_unit"
	.zero	1
	.ascii	"import_unit"
	.zero	1
	.ascii	"end_unit"
	.zero	1
	.ascii	"begin_unit"
	.zero	1
	.ascii	"RefillBuffer"
	.zero	1
	.ascii	"GetCh"
	.zero	1
	.ascii	"Skip_line"
	.zero	1
	.ascii	"Skip_white_space"
	.zero	1
	.ascii	"Skip_blanks"
	.zero	1
	.ascii	"Scan_buf"
	.zero	1
	.ascii	"Scan_line"
	.zero	1
	.ascii	"Scan_callConv"
	.zero	1
	.ascii	"Scan_sign"
	.zero	1
	.ascii	"Scan_proc"
	.zero	1
	.ascii	"Scan_procName"
	.zero	1
	.ascii	"Scan_var"
	.zero	1
	.ascii	"Scan_varName"
	.zero	1
	.ascii	"Scan_tipe"
	.zero	1
	.ascii	"ExpandLabels"
	.zero	1
	.ascii	"Scan_label"
	.zero	1
	.ascii	"Scan_bool"
	.zero	1
	.ascii	"Scan_type"
	.zero	1
	.ascii	"BadPrec"
	.zero	1
	.ascii	"Scan_float"
	.zero	1
	.ascii	"Scan_Tint"
	.zero	1
	.ascii	"Scan_int"
	.zero	1
	.ascii	"CvtInt"
	.zero	1
	.ascii	"GetDigit"
	.zero	1
	.ascii	"Scan_text"
	.zero	1
	.ascii	"Scan_name"
	.zero	1
	.ascii	"Scan_id"
	.zero	1
	.ascii	"Scan_word"
	.zero	1
	.ascii	"Error"
	.zero	1
	.ascii	"Init"
	.zero	1
	.ascii	"Inhale"
	.zero	3
	.long M3CG_Rd__comment
	.long MM_M3CG_Rd+7160
	.zero	4
	.long M3CG_Rd__load_static_link
	.long MM_M3CG_Rd+7168
	.zero	4
	.long M3CG_Rd__load_procedure
	.long MM_M3CG_Rd+7185
	.zero	4
	.long M3CG_Rd__call_indirect
	.long MM_M3CG_Rd+7200
	.zero	4
	.long M3CG_Rd__call_direct
	.long MM_M3CG_Rd+7214
	.zero	4
	.long M3CG_Rd__pop_static_link
	.long MM_M3CG_Rd+7226
	.zero	4
	.long M3CG_Rd__pop_struct
	.long MM_M3CG_Rd+7242
	.zero	4
	.long M3CG_Rd__pop_param
	.long MM_M3CG_Rd+7253
	.zero	4
	.long M3CG_Rd__start_call_indirect
	.long MM_M3CG_Rd+7263
	.zero	4
	.long M3CG_Rd__start_call_direct
	.long MM_M3CG_Rd+7283
	.zero	4
	.long M3CG_Rd__index_address
	.long MM_M3CG_Rd+7301
	.zero	4
	.long M3CG_Rd__add_offset
	.long MM_M3CG_Rd+7315
	.zero	4
	.long M3CG_Rd__check_eq
	.long MM_M3CG_Rd+7326
	.zero	4
	.long M3CG_Rd__check_index
	.long MM_M3CG_Rd+7335
	.zero	4
	.long M3CG_Rd__check_range
	.long MM_M3CG_Rd+7347
	.zero	4
	.long M3CG_Rd__check_hi
	.long MM_M3CG_Rd+7359
	.zero	4
	.long M3CG_Rd__check_lo
	.long MM_M3CG_Rd+7368
	.zero	4
	.long M3CG_Rd__check_nil
	.long MM_M3CG_Rd+7377
	.zero	4
	.long M3CG_Rd__typecase_fault
	.long MM_M3CG_Rd+7387
	.zero	4
	.long M3CG_Rd__case_fault
	.long MM_M3CG_Rd+7402
	.zero	4
	.long M3CG_Rd__return_fault
	.long MM_M3CG_Rd+7413
	.zero	4
	.long M3CG_Rd__narrow_fault
	.long MM_M3CG_Rd+7426
	.zero	4
	.long M3CG_Rd__assert_fault
	.long MM_M3CG_Rd+7439
	.zero	4
	.long M3CG_Rd__loophole
	.long MM_M3CG_Rd+7452
	.zero	4
	.long M3CG_Rd__zero
	.long MM_M3CG_Rd+7461
	.zero	4
	.long M3CG_Rd__zero_n
	.long MM_M3CG_Rd+7466
	.zero	4
	.long M3CG_Rd__copy
	.long MM_M3CG_Rd+7473
	.zero	4
	.long M3CG_Rd__copy_n
	.long MM_M3CG_Rd+7478
	.zero	4
	.long M3CG_Rd__pop
	.long MM_M3CG_Rd+7485
	.zero	4
	.long M3CG_Rd__swap
	.long MM_M3CG_Rd+7489
	.zero	4
	.long M3CG_Rd__insert_mn
	.long MM_M3CG_Rd+7494
	.zero	4
	.long M3CG_Rd__insert_n
	.long MM_M3CG_Rd+7504
	.zero	4
	.long M3CG_Rd__insert
	.long MM_M3CG_Rd+7513
	.zero	4
	.long M3CG_Rd__extract_mn
	.long MM_M3CG_Rd+7520
	.zero	4
	.long M3CG_Rd__extract_n
	.long MM_M3CG_Rd+7531
	.zero	4
	.long M3CG_Rd__extract
	.long MM_M3CG_Rd+7541
	.zero	4
	.long M3CG_Rd__rotate_right
	.long MM_M3CG_Rd+7549
	.zero	4
	.long M3CG_Rd__rotate_left
	.long MM_M3CG_Rd+7562
	.zero	4
	.long M3CG_Rd__rotate
	.long MM_M3CG_Rd+7574
	.zero	4
	.long M3CG_Rd__shift_right
	.long MM_M3CG_Rd+7581
	.zero	4
	.long M3CG_Rd__shift_left
	.long MM_M3CG_Rd+7593
	.zero	4
	.long M3CG_Rd__shift
	.long MM_M3CG_Rd+7604
	.zero	4
	.long M3CG_Rd__xor
	.long MM_M3CG_Rd+7610
	.zero	4
	.long M3CG_Rd__or
	.long MM_M3CG_Rd+7614
	.zero	4
	.long M3CG_Rd__and
	.long MM_M3CG_Rd+7617
	.zero	4
	.long M3CG_Rd__not
	.long MM_M3CG_Rd+7621
	.zero	4
	.long M3CG_Rd__set_singleton
	.long MM_M3CG_Rd+7625
	.zero	4
	.long M3CG_Rd__set_range
	.long MM_M3CG_Rd+7639
	.zero	4
	.long M3CG_Rd__set_le
	.long MM_M3CG_Rd+7649
	.zero	4
	.long M3CG_Rd__set_lt
	.long MM_M3CG_Rd+7656
	.zero	4
	.long M3CG_Rd__set_ge
	.long MM_M3CG_Rd+7663
	.zero	4
	.long M3CG_Rd__set_gt
	.long MM_M3CG_Rd+7670
	.zero	4
	.long M3CG_Rd__set_ne
	.long MM_M3CG_Rd+7677
	.zero	4
	.long M3CG_Rd__set_eq
	.long MM_M3CG_Rd+7684
	.zero	4
	.long M3CG_Rd__set_member
	.long MM_M3CG_Rd+7691
	.zero	4
	.long M3CG_Rd__set_sym_difference
	.long MM_M3CG_Rd+7702
	.zero	4
	.long M3CG_Rd__set_intersection
	.long MM_M3CG_Rd+7721
	.zero	4
	.long M3CG_Rd__set_difference
	.long MM_M3CG_Rd+7738
	.zero	4
	.long M3CG_Rd__set_union
	.long MM_M3CG_Rd+7753
	.zero	4
	.long M3CG_Rd__cvt_float
	.long MM_M3CG_Rd+7763
	.zero	4
	.long M3CG_Rd__ceiling
	.long MM_M3CG_Rd+7773
	.zero	4
	.long M3CG_Rd__floor
	.long MM_M3CG_Rd+7781
	.zero	4
	.long M3CG_Rd__trunc
	.long MM_M3CG_Rd+7787
	.zero	4
	.long M3CG_Rd__round
	.long MM_M3CG_Rd+7793
	.zero	4
	.long M3CG_Rd__min
	.long MM_M3CG_Rd+7799
	.zero	4
	.long M3CG_Rd__max
	.long MM_M3CG_Rd+7803
	.zero	4
	.long M3CG_Rd__abs
	.long MM_M3CG_Rd+7807
	.zero	4
	.long M3CG_Rd__negate
	.long MM_M3CG_Rd+7811
	.zero	4
	.long M3CG_Rd__mod
	.long MM_M3CG_Rd+7818
	.zero	4
	.long M3CG_Rd__div
	.long MM_M3CG_Rd+7822
	.zero	4
	.long M3CG_Rd__divide
	.long MM_M3CG_Rd+7826
	.zero	4
	.long M3CG_Rd__multiply
	.long MM_M3CG_Rd+7833
	.zero	4
	.long M3CG_Rd__subtract
	.long MM_M3CG_Rd+7842
	.zero	4
	.long M3CG_Rd__add
	.long MM_M3CG_Rd+7851
	.zero	4
	.long M3CG_Rd__le
	.long MM_M3CG_Rd+7855
	.zero	4
	.long M3CG_Rd__lt
	.long MM_M3CG_Rd+7858
	.zero	4
	.long M3CG_Rd__ge
	.long MM_M3CG_Rd+7861
	.zero	4
	.long M3CG_Rd__gt
	.long MM_M3CG_Rd+7864
	.zero	4
	.long M3CG_Rd__ne
	.long MM_M3CG_Rd+7867
	.zero	4
	.long M3CG_Rd__eq
	.long MM_M3CG_Rd+7870
	.zero	4
	.long M3CG_Rd__load_float
	.long MM_M3CG_Rd+7873
	.zero	4
	.long M3CG_Rd__load_integer
	.long MM_M3CG_Rd+7884
	.zero	4
	.long M3CG_Rd__load_nil
	.long MM_M3CG_Rd+7897
	.zero	4
	.long M3CG_Rd__store_ref_indirect
	.long MM_M3CG_Rd+7906
	.zero	4
	.long M3CG_Rd__store_indirect
	.long MM_M3CG_Rd+7925
	.zero	4
	.long M3CG_Rd__load_indirect
	.long MM_M3CG_Rd+7940
	.zero	4
	.long M3CG_Rd__load_address
	.long MM_M3CG_Rd+7954
	.zero	4
	.long M3CG_Rd__store_ref
	.long MM_M3CG_Rd+7967
	.zero	4
	.long M3CG_Rd__store
	.long MM_M3CG_Rd+7977
	.zero	4
	.long M3CG_Rd__load
	.long MM_M3CG_Rd+7983
	.zero	4
	.long M3CG_Rd__exit_proc
	.long MM_M3CG_Rd+7988
	.zero	4
	.long M3CG_Rd__case_jump
	.long MM_M3CG_Rd+7998
	.zero	4
	.long M3CG_Rd__if_le
	.long MM_M3CG_Rd+8008
	.zero	4
	.long M3CG_Rd__if_lt
	.long MM_M3CG_Rd+8014
	.zero	4
	.long M3CG_Rd__if_ge
	.long MM_M3CG_Rd+8020
	.zero	4
	.long M3CG_Rd__if_gt
	.long MM_M3CG_Rd+8026
	.zero	4
	.long M3CG_Rd__if_ne
	.long MM_M3CG_Rd+8032
	.zero	4
	.long M3CG_Rd__if_eq
	.long MM_M3CG_Rd+8038
	.zero	4
	.long M3CG_Rd__if_false
	.long MM_M3CG_Rd+8044
	.zero	4
	.long M3CG_Rd__if_true
	.long MM_M3CG_Rd+8053
	.zero	4
	.long M3CG_Rd__jump
	.long MM_M3CG_Rd+8061
	.zero	4
	.long M3CG_Rd__set_label
	.long MM_M3CG_Rd+8066
	.zero	4
	.long M3CG_Rd__note_procedure_origin
	.long MM_M3CG_Rd+8076
	.zero	4
	.long M3CG_Rd__end_block
	.long MM_M3CG_Rd+8098
	.zero	4
	.long M3CG_Rd__begin_block
	.long MM_M3CG_Rd+8108
	.zero	4
	.long M3CG_Rd__end_procedure
	.long MM_M3CG_Rd+8120
	.zero	4
	.long M3CG_Rd__begin_procedure
	.long MM_M3CG_Rd+8134
	.zero	4
	.long M3CG_Rd__declare_procedure
	.long MM_M3CG_Rd+8150
	.zero	4
	.long M3CG_Rd__import_procedure
	.long MM_M3CG_Rd+8168
	.zero	4
	.long M3CG_Rd__ExpandProcs
	.long MM_M3CG_Rd+8185
	.zero	4
	.long M3CG_Rd__AddProc
	.long MM_M3CG_Rd+8197
	.zero	4
	.long M3CG_Rd__init_float
	.long MM_M3CG_Rd+8205
	.zero	4
	.long M3CG_Rd__init_chars
	.long MM_M3CG_Rd+8216
	.zero	4
	.long M3CG_Rd__init_offset
	.long MM_M3CG_Rd+8227
	.zero	4
	.long M3CG_Rd__init_var
	.long MM_M3CG_Rd+8239
	.zero	4
	.long M3CG_Rd__init_label
	.long MM_M3CG_Rd+8248
	.zero	4
	.long M3CG_Rd__init_proc
	.long MM_M3CG_Rd+8259
	.zero	4
	.long M3CG_Rd__init_int
	.long MM_M3CG_Rd+8269
	.zero	4
	.long M3CG_Rd__end_init
	.long MM_M3CG_Rd+8278
	.zero	4
	.long M3CG_Rd__begin_init
	.long MM_M3CG_Rd+8287
	.zero	4
	.long M3CG_Rd__free_temp
	.long MM_M3CG_Rd+8298
	.zero	4
	.long M3CG_Rd__declare_temp
	.long MM_M3CG_Rd+8308
	.zero	4
	.long M3CG_Rd__declare_param
	.long MM_M3CG_Rd+8321
	.zero	4
	.long M3CG_Rd__declare_local
	.long MM_M3CG_Rd+8335
	.zero	4
	.long M3CG_Rd__declare_constant
	.long MM_M3CG_Rd+8349
	.zero	4
	.long M3CG_Rd__declare_global
	.long MM_M3CG_Rd+8366
	.zero	4
	.long M3CG_Rd__bind_segment
	.long MM_M3CG_Rd+8381
	.zero	4
	.long M3CG_Rd__declare_segment
	.long MM_M3CG_Rd+8394
	.zero	4
	.long M3CG_Rd__import_global
	.long MM_M3CG_Rd+8410
	.zero	4
	.long M3CG_Rd__ExpandVars
	.long MM_M3CG_Rd+8424
	.zero	4
	.long M3CG_Rd__AddVar
	.long MM_M3CG_Rd+8435
	.zero	4
	.long M3CG_Rd__get_runtime_hook
	.long MM_M3CG_Rd+8442
	.zero	4
	.long M3CG_Rd__set_runtime_hook
	.long MM_M3CG_Rd+8459
	.zero	4
	.long M3CG_Rd__set_runtime_proc
	.long MM_M3CG_Rd+8476
	.zero	4
	.long M3CG_Rd__declare_exception
	.long MM_M3CG_Rd+8493
	.zero	4
	.long M3CG_Rd__reveal_opaque
	.long MM_M3CG_Rd+8511
	.zero	4
	.long M3CG_Rd__declare_opaque
	.long MM_M3CG_Rd+8525
	.zero	4
	.long M3CG_Rd__declare_method
	.long MM_M3CG_Rd+8540
	.zero	4
	.long M3CG_Rd__declare_object
	.long MM_M3CG_Rd+8555
	.zero	4
	.long M3CG_Rd__declare_raises
	.long MM_M3CG_Rd+8570
	.zero	4
	.long M3CG_Rd__declare_formal
	.long MM_M3CG_Rd+8585
	.zero	4
	.long M3CG_Rd__declare_proctype
	.long MM_M3CG_Rd+8600
	.zero	4
	.long M3CG_Rd__declare_indirect
	.long MM_M3CG_Rd+8617
	.zero	4
	.long M3CG_Rd__declare_pointer
	.long MM_M3CG_Rd+8634
	.zero	4
	.long M3CG_Rd__declare_subrange
	.long MM_M3CG_Rd+8650
	.zero	4
	.long M3CG_Rd__declare_set
	.long MM_M3CG_Rd+8667
	.zero	4
	.long M3CG_Rd__declare_field
	.long MM_M3CG_Rd+8679
	.zero	4
	.long M3CG_Rd__declare_record
	.long MM_M3CG_Rd+8693
	.zero	4
	.long M3CG_Rd__declare_packed
	.long MM_M3CG_Rd+8708
	.zero	4
	.long M3CG_Rd__declare_enum_elt
	.long MM_M3CG_Rd+8723
	.zero	4
	.long M3CG_Rd__declare_enum
	.long MM_M3CG_Rd+8740
	.zero	4
	.long M3CG_Rd__declare_open_array
	.long MM_M3CG_Rd+8753
	.zero	4
	.long M3CG_Rd__declare_array
	.long MM_M3CG_Rd+8772
	.zero	4
	.long M3CG_Rd__declare_typename
	.long MM_M3CG_Rd+8786
	.zero	4
	.long M3CG_Rd__set_source_line
	.long MM_M3CG_Rd+8803
	.zero	4
	.long M3CG_Rd__set_source_file
	.long MM_M3CG_Rd+8819
	.zero	4
	.long M3CG_Rd__export_unit
	.long MM_M3CG_Rd+8835
	.zero	4
	.long M3CG_Rd__import_unit
	.long MM_M3CG_Rd+8847
	.zero	4
	.long M3CG_Rd__end_unit
	.long MM_M3CG_Rd+8859
	.zero	4
	.long M3CG_Rd__begin_unit
	.long MM_M3CG_Rd+8868
	.zero	4
	.long M3CG_Rd__RefillBuffer
	.long MM_M3CG_Rd+8879
	.zero	4
	.long M3CG_Rd__GetCh
	.long MM_M3CG_Rd+8892
	.zero	4
	.long M3CG_Rd__Skip_line
	.long MM_M3CG_Rd+8898
	.zero	4
	.long M3CG_Rd__Skip_white_space
	.long MM_M3CG_Rd+8908
	.zero	4
	.long M3CG_Rd__Skip_blanks
	.long MM_M3CG_Rd+8925
	.zero	4
	.long M3CG_Rd__Scan_buf
	.long MM_M3CG_Rd+8937
	.zero	4
	.long M3CG_Rd__Scan_line
	.long MM_M3CG_Rd+8946
	.zero	4
	.long M3CG_Rd__Scan_callConv
	.long MM_M3CG_Rd+8956
	.zero	4
	.long M3CG_Rd__Scan_sign
	.long MM_M3CG_Rd+8970
	.zero	4
	.long M3CG_Rd__Scan_proc
	.long MM_M3CG_Rd+8980
	.zero	4
	.long M3CG_Rd__Scan_procName
	.long MM_M3CG_Rd+8990
	.zero	4
	.long M3CG_Rd__Scan_var
	.long MM_M3CG_Rd+9004
	.zero	4
	.long M3CG_Rd__Scan_varName
	.long MM_M3CG_Rd+9013
	.zero	4
	.long M3CG_Rd__Scan_tipe
	.long MM_M3CG_Rd+9026
	.zero	4
	.long M3CG_Rd__ExpandLabels
	.long MM_M3CG_Rd+9036
	.zero	4
	.long M3CG_Rd__Scan_label
	.long MM_M3CG_Rd+9049
	.zero	4
	.long M3CG_Rd__Scan_bool
	.long MM_M3CG_Rd+9060
	.zero	4
	.long M3CG_Rd__Scan_type
	.long MM_M3CG_Rd+9070
	.zero	4
	.long M3CG_Rd__BadPrec
	.long MM_M3CG_Rd+9080
	.zero	4
	.long M3CG_Rd__Scan_float
	.long MM_M3CG_Rd+9088
	.zero	4
	.long M3CG_Rd__Scan_Tint
	.long MM_M3CG_Rd+9099
	.zero	4
	.long M3CG_Rd__Scan_int
	.long MM_M3CG_Rd+9109
	.zero	4
	.long M3CG_Rd__CvtInt
	.long MM_M3CG_Rd+9118
	.zero	4
	.long M3CG_Rd__GetDigit
	.long MM_M3CG_Rd+9125
	.zero	4
	.long M3CG_Rd__Scan_text
	.long MM_M3CG_Rd+9134
	.zero	4
	.long M3CG_Rd__Scan_name
	.long MM_M3CG_Rd+9144
	.zero	4
	.long M3CG_Rd__Scan_id
	.long MM_M3CG_Rd+9154
	.zero	4
	.long M3CG_Rd__Scan_word
	.long MM_M3CG_Rd+9162
	.zero	4
	.long M3CG_Rd__Error
	.long MM_M3CG_Rd+9172
	.zero	4
	.long M3CG_Rd__Init
	.long MM_M3CG_Rd+9178
	.zero	4
	.long M3CG_Rd__Inhale
	.long MM_M3CG_Rd+9183
	.long MI_M3CG_Rd+44
	.zero	4
.byte 43
.byte 132
.byte 6
.byte 4
.byte 4
.byte 0
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/m3mid"
	.ascii	"dle/src/M3CG_Rd.m3"
	.zero	1
.byte 24
.byte 1
.byte 4
.byte 0
.byte 0
.byte 24
.byte 1
.byte 4
.byte 0
.byte 0
.byte 2
.byte 11
.byte 1
.byte 16
.byte 117
.byte 167
.byte 196
.byte 100
.byte 24
.byte 1
.byte 4
.byte 0
.byte 0
.byte 24
.byte 1
.byte 4
.byte 0
.byte 0
.byte 2
.byte 11
.byte 1
.byte 16
.byte 121
.byte 130
.byte 239
.byte 251
.byte 1
.byte 16
.byte 27
.byte 0
.byte 16
.byte 0
.byte 2
.byte 1
.byte 66
.byte 0
.byte 16
.byte 4
	.ascii	"M3CG_Rd.InputBuffer"
	.zero	4
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
