	.file	"M3CG_Check.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 M3CG_Check__Int,@function
M3CG_Check__Int:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	testl %ebx,%ebx
	jl .L2
	cmpl $1023,%ebx
	jg .L2
	jbe .L3
	pushl $3249
	call _m3_fault
	.align 16
.L3:
	movl $L_1,%esi
	cmpl $0,(%esi,%ebx,4)
	jne .L6
	pushl $10
	pushl %ebx
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl $MM_M3CG_Check+1072
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,L_1(,%ebx,4)
.L6:
	movl (%esi,%ebx,4),%eax
	jmp .L7
	.align 16
.L2:
	pushl $10
	pushl %ebx
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl $MM_M3CG_Check+1072
	movl MI_RTHooks+76,%eax
	call *%eax
.L7:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 M3CG_Check__Int,.Lfe1-M3CG_Check__Int
	.align 16
	.type	 M3CG_Check__PutErr,@function
M3CG_Check__PutErr:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%edi
	movl 4(%ebx),%ecx
	movl 16(%ebp),%esi
	movl (%ecx),%eax
	movl 20(%ebp),%edx
	movl 632(%eax),%eax
	pushl %edx
	pushl %esi
	pushl %edi
	pushl $MM_M3CG_Check+1088
	pushl %ecx
	call *%eax
	leal -12(%ebp),%esp
	incl 28(%ebx)
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 M3CG_Check__PutErr,.Lfe2-M3CG_Check__PutErr
	.align 16
	.type	 M3CG_Check__Stack_Get,@function
M3CG_Check__Stack_Get:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%edx
	movl 12(%ebp),%eax
	notl %eax
	addl 44(%edx),%eax
	js .L10
	cmpl $50,%eax
	jg .L10
	jbe .L11
	pushl $3585
	call _m3_fault
	.align 16
.L11:
	movb 64(%edx,%eax),%al
	andl $255,%eax
	movb MM_M3CG_Check+44(%eax),%al
	andl $255,%eax
	jmp .L12
	.align 16
.L10:
	movl $11,%eax
.L12:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 M3CG_Check__Stack_Get,.Lfe3-M3CG_Check__Stack_Get
.section	.rodata
	.align 4
	.type	 L_2.0,@object
	.size	 L_2.0,32
L_2.0:
	.long .L15
	.long .L16
	.long .L17
	.long .L18
	.long .L19
	.long .L14
	.long .L20
	.long .L21
.text
	.align 16
	.type	 M3CG_Check__IsOK,@function
M3CG_Check__IsOK:
	pushl %ebp
	movl %esp,%ebp
	movb 8(%ebp),%cl
	movb 12(%ebp),%dl
	xorl %eax,%eax
	movb %cl,%al
	addl $-6,%eax
	js .L14
	jmp *L_2.0(,%eax,4)
	.align 16
.L15:
	cmpb $11,%dl
	sete %al
	jmp .L28
	.align 16
.L16:
	xorl %eax,%eax
	andl $255,%edx
	cmpl $1,%edx
	jle .L27
	cmpl $2,%edx
	setle %al
	jmp .L28
	.align 16
.L17:
	xorl %eax,%eax
	andl $255,%edx
	cmpl $2,%edx
	jle .L27
	cmpl $5,%edx
	setle %al
	jmp .L28
	.align 16
.L18:
	xorl %eax,%eax
	andl $255,%edx
	cmpl $1,%edx
	jle .L27
	cmpl $5,%edx
	setle %al
	jmp .L28
	.align 16
.L19:
	xorl %eax,%eax
	andl $255,%edx
	testl %edx,%edx
	jl .L27
	cmpl $6,%edx
	setle %al
	jmp .L28
	.align 16
.L20:
	movl $1,%eax
	jmp .L27
	.align 16
.L21:
	cmpb %dl,16(%ebp)
	sete %al
	jmp .L28
	.align 16
.L14:
	cmpb %cl,%dl
	sete %al
.L28:
	andl $255,%eax
.L27:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 M3CG_Check__IsOK,.Lfe4-M3CG_Check__IsOK
	.align 16
	.type	 M3CG_Check__ST_Name,@function
M3CG_Check__ST_Name:
	pushl %ebp
	movl %esp,%ebp
	movb 8(%ebp),%al
	cmpb $13,%al
	jne .L30
	movb 12(%ebp),%al
.L30:
	xorl %edx,%edx
	movb %al,%dl
	movl $MM_M3CG_Check+60,%eax
	movl %ebp,%esp
	popl %ebp
	movl (%eax,%edx,4),%eax
	ret
.Lfe5:
	.size	 M3CG_Check__ST_Name,.Lfe5-M3CG_Check__ST_Name
	.align 16
	.type	 M3CG_Check__Stack_Pop,@function
M3CG_Check__Stack_Pop:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	pushl $0
	pushl %edi
	call M3CG_Check__Stack_Get
	movb %al,-16(%ebp)
	pushl $1
	pushl %edi
	call M3CG_Check__Stack_Get
	movb %al,-12(%ebp)
	pushl $2
	pushl %edi
	call M3CG_Check__Stack_Get
	movb %al,-8(%ebp)
	pushl $3
	pushl %edi
	call M3CG_Check__Stack_Get
	movb %al,-4(%ebp)
	addl $32,%esp
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	xorl %eax,%eax
	movb -16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Check__IsOK
	addl $12,%esp
	testl %eax,%eax
	je .L32
	pushl %ebx
	xorl %eax,%eax
	movb -12(%ebp),%al
	pushl %eax
	xorl %ebx,%ebx
	movb 16(%ebp),%bl
	pushl %ebx
	call M3CG_Check__IsOK
	addl $12,%esp
	testl %eax,%eax
	je .L32
	pushl %ebx
	xorl %eax,%eax
	movb -8(%ebp),%al
	pushl %eax
	xorl %ebx,%ebx
	movb 20(%ebp),%bl
	pushl %ebx
	call M3CG_Check__IsOK
	addl $12,%esp
	testl %eax,%eax
	je .L32
	pushl %ebx
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	call M3CG_Check__IsOK
	addl $12,%esp
	testl %eax,%eax
	jne .L33
.L32:
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	call M3CG_Check__ST_Name
	movl %eax,%esi
	pushl %ebx
	xorl %ebx,%ebx
	movb 16(%ebp),%bl
	pushl %ebx
	call M3CG_Check__ST_Name
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl %ebx
	xorl %ebx,%ebx
	movb 20(%ebp),%bl
	pushl %ebx
	call M3CG_Check__ST_Name
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl %ebx
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	call M3CG_Check__ST_Name
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,-20(%ebp)
	xorl %ebx,%ebx
	movb -16(%ebp),%bl
	pushl %ebx
	pushl %ebx
	call M3CG_Check__ST_Name
	addl $32,%esp
	pushl %eax
	pushl $MM_M3CG_Check+1140
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl %ebx
	xorl %ebx,%ebx
	movb -12(%ebp),%bl
	pushl %ebx
	call M3CG_Check__ST_Name
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl %ebx
	xorl %ebx,%ebx
	movb -8(%ebp),%bl
	pushl %ebx
	call M3CG_Check__ST_Name
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl %ebx
	xorl %eax,%eax
	movb -4(%ebp),%al
	pushl %eax
	call M3CG_Check__ST_Name
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_M3CG_Check+1164
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	movl -20(%ebp),%edx
	pushl %edx
	pushl $MM_M3CG_Check+1180
	pushl %edi
	call M3CG_Check__PutErr
.L33:
	cmpb $12,24(%ebp)
	je .L34
	addl $-4,44(%edi)
	jmp .L35
	.align 16
.L34:
	cmpb $12,20(%ebp)
	je .L36
	addl $-3,44(%edi)
	jmp .L35
	.align 16
.L36:
	cmpb $12,16(%ebp)
	je .L37
	addl $-2,44(%edi)
	jmp .L35
	.align 16
.L37:
	decl 44(%edi)
.L35:
	cmpl $0,44(%edi)
	jge .L31
	movl $0,44(%edi)
.L31:
	leal -32(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe6:
	.size	 M3CG_Check__Stack_Pop,.Lfe6-M3CG_Check__Stack_Pop
	.align 16
	.type	 M3CG_Check__Stack_Push,@function
M3CG_Check__Stack_Push:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movb 12(%ebp),%dl
	movl 44(%ebx),%eax
	cmpl $50,%eax
	jg .L40
	jbe .L41
	pushl $4593
	call _m3_fault
	.align 16
.L41:
	movb %dl,64(%ebx,%eax)
	jmp .L42
	.align 16
.L40:
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1216
	pushl %ebx
	call M3CG_Check__PutErr
.L42:
	incl 44(%ebx)
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe7:
	.size	 M3CG_Check__Stack_Push,.Lfe7-M3CG_Check__Stack_Push
	.align 16
	.type	 M3CG_Check__Stack_Repush,@function
M3CG_Check__Stack_Repush:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl %ebp,%esp
	incl 44(%eax)
	popl %ebp
	ret
.Lfe8:
	.size	 M3CG_Check__Stack_Repush,.Lfe8-M3CG_Check__Stack_Repush
	.align 16
	.type	 M3CG_Check__Stack_Empty,@function
M3CG_Check__Stack_Empty:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	cmpl $0,44(%ebx)
	jle .L44
	pushl %ebx
	call M3CG_Check__Stack_Dump
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Check+1244
	pushl %ebx
	call M3CG_Check__PutErr
	movl $0,44(%ebx)
.L44:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe9:
	.size	 M3CG_Check__Stack_Empty,.Lfe9-M3CG_Check__Stack_Empty
	.align 16
	.type	 M3CG_Check__Stack_Dump,@function
M3CG_Check__Stack_Dump:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	movl $4,%eax
	pushl %ebx
	movl 8(%ebp),%edi
	movl $MM_M3CG_Check+1276,%ebx
	movl 44(%edi),%edx
	decl %edx
	cmpl %edx,%eax
	jle .L47
	movl %edx,%eax
.L47:
	xorl %esi,%esi
	movl %eax,-4(%ebp)
	jmp .L48
	.align 16
.L49:
	pushl %esi
	pushl %edi
	call M3CG_Check__Stack_Get
	movl MM_M3CG_Check+60(,%eax,4),%eax
	pushl %eax
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ebx
	incl %esi
	addl $16,%esp
.L48:
	cmpl %esi,-4(%ebp)
	jge .L49
	cmpl $5,44(%edi)
	jle .L51
	pushl $MM_M3CG_Check+1292
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ebx
	addl $8,%esp
.L51:
	pushl $MM_M3CG_Check+1164
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ebx
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe10:
	.size	 M3CG_Check__Stack_Dump,.Lfe10-M3CG_Check__Stack_Dump
	.align 16
	.type	 M3CG_Check__New,@function
M3CG_Check__New:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 8(%eax),%esi
	movl MM_M3CG_Check+264,%eax
	pushl %eax
	pushl %ebx
	call *%esi
	movl MM_M3CG_Check+1308,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%esi
	movl %ebx,4(%esi)
	movl MM_M3CG_Check+264,%eax
	movl %eax,56(%esi)
	movl MM_M3CG_Check+1316,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl (%edx),%eax
	movl 24(%eax),%eax
	pushl $20
	pushl %edx
	call *%eax
	movl %eax,60(%esi)
	movb 12(%ebp),%cl
	movb %cl,9(%esi)
	movb 16(%ebp),%cl
	movb %cl,8(%esi)
	movb 20(%ebp),%cl
	movb %cl,10(%esi)
	movb 24(%ebp),%cl
	movb %cl,11(%esi)
	leal -8(%ebp),%esp
	movl %esi,%eax
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe11:
	.size	 M3CG_Check__New,.Lfe11-M3CG_Check__New
	.align 16
	.type	 M3CG_Check__CrashAndBurn,@function
M3CG_Check__CrashAndBurn:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	movl 8(%ebp),%edx
.L54:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	pushl %edx
	pushl $MM_M3CG_Check+1328
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %eax
	movl MI_Stdio+48,%eax
	pushl %eax
	movl MI_Wr+68,%eax
	call *%eax
	movl MI_Stdio+48,%eax
	pushl %eax
	movl MI_Wr+80,%eax
	call *%eax
	movl MI_Stdio+52,%eax
	pushl %eax
	movl MI_Wr+80,%eax
	call *%eax
	pushl $5600
	call _m3_fault
	.align 16
.L55:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe12:
	.size	 M3CG_Check__CrashAndBurn,.Lfe12-M3CG_Check__CrashAndBurn
	.align 16
	.type	 M3CG_Check__set_error_handler,@function
M3CG_Check__set_error_handler:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 12(%ebp),%ecx
	movl %eax,%edx
	testl %ecx,%ecx
	je .L57
	cmpl $-1,(%ecx)
	jne .L57
	pushl $5717
	call _m3_fault
	.align 16
.L57:
	movl %ecx,56(%edx)
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 8(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe13:
	.size	 M3CG_Check__set_error_handler,.Lfe13-M3CG_Check__set_error_handler
	.align 16
	.type	 M3CG_Check__begin_unit,@function
M3CG_Check__begin_unit:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 648(%eax),%edi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 12(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe14:
	.size	 M3CG_Check__begin_unit,.Lfe14-M3CG_Check__begin_unit
	.align 16
	.type	 M3CG_Check__end_unit,@function
M3CG_Check__end_unit:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl (%esi),%eax
	movl 648(%eax),%ebx
	pushl %esi
	call *%ebx
	movl 4(%esi),%ebx
	movl (%ebx),%eax
	movl 16(%eax),%eax
	pushl %ebx
	call *%eax
	movl 28(%esi),%eax
	addl $8,%esp
	testl %eax,%eax
	jle .L60
	cmpl $1,%eax
	jne .L63
	movl 56(%esi),%eax
	pushl $MM_M3CG_Check+1372
	jmp .L64
	.align 16
.L63:
	pushl %eax
	call M3CG_Check__Int
	pushl $MM_M3CG_Check+1408
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ebx
	movl 56(%esi),%eax
	pushl %ebx
.L64:
	call *%eax
.L60:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe15:
	.size	 M3CG_Check__end_unit,.Lfe15-M3CG_Check__end_unit
	.align 16
	.type	 M3CG_Check__set_source_line,@function
M3CG_Check__set_source_line:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 12(%ebp),%ecx
	movl 4(%eax),%edx
	movl %ecx,12(%eax)
	movl (%edx),%eax
	movl 32(%eax),%eax
	pushl %ecx
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe16:
	.size	 M3CG_Check__set_source_line,.Lfe16-M3CG_Check__set_source_line
	.align 16
	.type	 M3CG_Check__set_runtime_proc,@function
M3CG_Check__set_runtime_proc:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckProc
	movl 60(%ebx),%ecx
	movl (%ecx),%eax
	movl 8(%eax),%edx
	movl %esi,-4(%ebp)
	movl $0,-8(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	leal -4(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%edx
	addl $20,%esp
	testl %eax,%eax
	je .L67
	pushl %esi
	movl MI_M3ID+52,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	pushl $MM_M3CG_Check+1444
	pushl %ebx
	call M3CG_Check__PutErr
	addl $20,%esp
.L67:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 116(%eax),%ecx
	pushl %edi
	pushl %esi
	pushl %edx
	call *%ecx
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe17:
	.size	 M3CG_Check__set_runtime_proc,.Lfe17-M3CG_Check__set_runtime_proc
	.align 16
	.type	 M3CG_Check__set_runtime_hook,@function
M3CG_Check__set_runtime_hook:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckVar
	movl 60(%ebx),%ecx
	movl (%ecx),%eax
	movl 8(%eax),%edx
	movl %esi,-4(%ebp)
	movl $0,-8(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	leal -4(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%edx
	addl $20,%esp
	testl %eax,%eax
	je .L69
	pushl %esi
	movl MI_M3ID+52,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	pushl $MM_M3CG_Check+1484
	pushl %ebx
	call M3CG_Check__PutErr
	addl $20,%esp
.L69:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 20(%ebp),%edi
	movl 120(%eax),%ecx
	pushl %edi
	movl 16(%ebp),%edi
	pushl %edi
	pushl %esi
	pushl %edx
	call *%ecx
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe18:
	.size	 M3CG_Check__set_runtime_hook,.Lfe18-M3CG_Check__set_runtime_hook
	.align 16
	.type	 M3CG_Check__get_runtime_hook,@function
M3CG_Check__get_runtime_hook:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 60(%esi),%ecx
	movl (%ecx),%eax
	movl 12(%ebp),%edi
	movl 4(%eax),%edx
	movl %edi,-8(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	leal -8(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%edx
	movl %eax,%ebx
	addl $12,%esp
	testl %ebx,%ebx
	jne .L71
	pushl %edi
	movl MI_M3ID+52,%eax
	call *%eax
	pushl %ebx
	movl %eax,%edx
	pushl %edx
	pushl $MM_M3CG_Check+1524
	pushl %esi
	call M3CG_Check__PutErr
	addl $20,%esp
.L71:
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 124(%eax),%ecx
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edi
	pushl %edx
	call *%ecx
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe19:
	.size	 M3CG_Check__get_runtime_hook,.Lfe19-M3CG_Check__get_runtime_hook
	.align 16
	.type	 M3CG_Check__CheckVar,@function
M3CG_Check__CheckVar:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%edx
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L72
	pushl %eax
	pushl %eax
	pushl $MM_M3CG_Check+1564
	pushl %edx
	call M3CG_Check__PutErr
.L72:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe20:
	.size	 M3CG_Check__CheckVar,.Lfe20-M3CG_Check__CheckVar
	.align 16
	.type	 M3CG_Check__bind_segment,@function
M3CG_Check__bind_segment:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 20(%ebp),%edi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckVar
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 136(%eax),%eax
	movl %eax,-4(%ebp)
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %edi
	movl 16(%ebp),%ecx
	pushl %ecx
	pushl %esi
	pushl %edx
	movl -4(%ebp),%ecx
	call *%ecx
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe21:
	.size	 M3CG_Check__bind_segment,.Lfe21-M3CG_Check__bind_segment
	.align 16
	.type	 M3CG_Check__declare_temp,@function
M3CG_Check__declare_temp:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl 12(%ebp),%esi
	movl (%edx),%eax
	movl 16(%ebp),%ecx
	movl 156(%eax),%ebx
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ecx
	pushl %esi
	pushl %edx
	call *%ebx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe22:
	.size	 M3CG_Check__declare_temp,.Lfe22-M3CG_Check__declare_temp
	.align 16
	.type	 M3CG_Check__free_temp,@function
M3CG_Check__free_temp:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckVar
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 160(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe23:
	.size	 M3CG_Check__free_temp,.Lfe23-M3CG_Check__free_temp
	.align 16
	.type	 M3CG_Check__begin_init,@function
M3CG_Check__begin_init:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckVar
	addl $8,%esp
	cmpl $0,48(%ebx)
	jle .L78
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1592
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L78:
	incl 48(%ebx)
	movl 4(%ebx),%eax
	movl $0,52(%ebx)
	movl (%eax),%edx
	movl 164(%edx),%edx
	pushl %esi
	pushl %eax
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe24:
	.size	 M3CG_Check__begin_init,.Lfe24-M3CG_Check__begin_init
	.align 16
	.type	 M3CG_Check__end_init,@function
M3CG_Check__end_init:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckVar
	movl 48(%ebx),%eax
	addl $8,%esp
	testl %eax,%eax
	jle .L80
	movl %ebx,%edx
	decl %eax
	movl %eax,48(%edx)
	movl $0,52(%edx)
	jmp .L81
	.align 16
.L80:
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1636
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L81:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 168(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe25:
	.size	 M3CG_Check__end_init,.Lfe25-M3CG_Check__end_init
	.align 16
	.type	 M3CG_Check__DoInit,@function
M3CG_Check__DoInit:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	cmpl $0,48(%ebx)
	jg .L83
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1636
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L83:
	cmpl %esi,52(%ebx)
	jg .L84
	addl 16(%ebp),%esi
	movl %esi,52(%ebx)
	jmp .L82
	.align 16
.L84:
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1668
	pushl %ebx
	call M3CG_Check__PutErr
.L82:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe26:
	.size	 M3CG_Check__DoInit,.Lfe26-M3CG_Check__DoInit
	.align 16
	.type	 M3CG_Check__init_int,@function
M3CG_Check__init_int:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 20(%ebp),%esi
	movl 12(%ebp),%edi
	movl MI_TargetMap+236(,%esi,4),%eax
	pushl %eax
	pushl %edi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 172(%eax),%ecx
	pushl %esi
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edi
	pushl %edx
	call *%ecx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe27:
	.size	 M3CG_Check__init_int,.Lfe27-M3CG_Check__init_int
	.align 16
	.type	 M3CG_Check__init_proc,@function
M3CG_Check__init_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	movl MI_Target+72,%eax
	pushl %eax
	pushl %esi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 176(%eax),%eax
	pushl %edi
	pushl %esi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe28:
	.size	 M3CG_Check__init_proc,.Lfe28-M3CG_Check__init_proc
	.align 16
	.type	 M3CG_Check__init_label,@function
M3CG_Check__init_label:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	movl MI_Target+72,%eax
	pushl %eax
	pushl %esi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 180(%eax),%eax
	pushl %edi
	pushl %esi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe29:
	.size	 M3CG_Check__init_label,.Lfe29-M3CG_Check__init_label
	.align 16
	.type	 M3CG_Check__init_var,@function
M3CG_Check__init_var:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 20(%ebp),%edi
	movl MI_Target+72,%eax
	pushl %eax
	pushl %esi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 184(%eax),%eax
	pushl %edi
	movl 16(%ebp),%ecx
	pushl %ecx
	pushl %esi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe30:
	.size	 M3CG_Check__init_var,.Lfe30-M3CG_Check__init_var
	.align 16
	.type	 M3CG_Check__init_offset,@function
M3CG_Check__init_offset:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	movl MI_Target+108,%eax
	pushl %eax
	pushl %esi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 188(%eax),%eax
	pushl %edi
	pushl %esi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe31:
	.size	 M3CG_Check__init_offset,.Lfe31-M3CG_Check__init_offset
	.align 16
	.type	 M3CG_Check__init_chars,@function
M3CG_Check__init_chars:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%edi
	movl 16(%ebp),%esi
	pushl %esi
	movl MI_Text+56,%eax
	call *%eax
	imull MI_Target+612,%eax
	addl $4,%esp
	testl %eax,%eax
	jge .L92
	pushl $8545
	call _m3_fault
	.align 16
.L92:
	pushl %eax
	pushl %edi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%eax
	movl (%eax),%edx
	movl 192(%edx),%edx
	pushl %esi
	pushl %edi
	pushl %eax
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe32:
	.size	 M3CG_Check__init_chars,.Lfe32-M3CG_Check__init_chars
	.align 16
	.type	 M3CG_Check__init_float,@function
M3CG_Check__init_float:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 16(%ebp),%eax
	movl 8(%ebp),%ebx
	movb (%eax),%al
	andl $255,%eax
	leal (%eax,%eax,2),%eax
	sall $4,%eax
	movl 12(%ebp),%esi
	movl MI_TargetMap+332(%eax),%eax
	pushl %eax
	pushl %esi
	pushl %ebx
	call M3CG_Check__DoInit
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 196(%eax),%ecx
	movl 16(%ebp),%eax
	pushl %eax
	pushl %esi
	pushl %edx
	call *%ecx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe33:
	.size	 M3CG_Check__init_float,.Lfe33-M3CG_Check__init_float
	.align 16
	.type	 M3CG_Check__CheckProc,@function
M3CG_Check__CheckProc:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%edx
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L94
	pushl %eax
	pushl %eax
	pushl $MM_M3CG_Check+1700
	pushl %edx
	call M3CG_Check__PutErr
.L94:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe34:
	.size	 M3CG_Check__CheckProc,.Lfe34-M3CG_Check__CheckProc
	.align 16
	.type	 M3CG_Check__begin_procedure,@function
M3CG_Check__begin_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckProc
	addl $8,%esp
	cmpl $0,32(%ebx)
	jle .L97
	cmpb $0,11(%ebx)
	jne .L97
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1728
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L97:
	movl 4(%ebx),%eax
	incl 32(%ebx)
	movl (%eax),%edx
	movl 208(%edx),%edx
	pushl %esi
	pushl %eax
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe35:
	.size	 M3CG_Check__begin_procedure,.Lfe35-M3CG_Check__begin_procedure
	.align 16
	.type	 M3CG_Check__end_procedure,@function
M3CG_Check__end_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%edi
	pushl %edi
	pushl %esi
	call M3CG_Check__CheckProc
	movl 32(%esi),%eax
	addl $8,%esp
	testl %eax,%eax
	jle .L99
	decl %eax
	movl %eax,32(%esi)
	jmp .L100
	.align 16
.L99:
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1772
	pushl %esi
	call M3CG_Check__PutErr
	addl $16,%esp
.L100:
	movl 36(%esi),%eax
	testl %eax,%eax
	jle .L101
	cmpb $0,11(%esi)
	jne .L101
	pushl %eax
	call M3CG_Check__Int
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_M3CG_Check+1808
	pushl %esi
	call M3CG_Check__PutErr
	movl $0,36(%esi)
	addl $20,%esp
.L101:
	movl (%esi),%eax
	movl 648(%eax),%ebx
	pushl %esi
	call *%ebx
	movl 4(%esi),%ebx
	movl (%ebx),%eax
	movl 212(%eax),%eax
	pushl %edi
	pushl %ebx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe36:
	.size	 M3CG_Check__end_procedure,.Lfe36-M3CG_Check__end_procedure
	.align 16
	.type	 M3CG_Check__begin_block,@function
M3CG_Check__begin_block:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	cmpl $0,32(%esi)
	jg .L103
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1844
	pushl %esi
	call M3CG_Check__PutErr
	addl $16,%esp
.L103:
	movl (%esi),%eax
	movl 648(%eax),%ebx
	pushl %esi
	call *%ebx
	movl 4(%esi),%ebx
	incl 36(%esi)
	movl (%ebx),%eax
	movl 216(%eax),%eax
	pushl %ebx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe37:
	.size	 M3CG_Check__begin_block,.Lfe37-M3CG_Check__begin_block
	.align 16
	.type	 M3CG_Check__end_block,@function
M3CG_Check__end_block:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 36(%esi),%eax
	testl %eax,%eax
	jle .L105
	decl %eax
	movl %eax,36(%esi)
	jmp .L106
	.align 16
.L105:
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1888
	pushl %esi
	call M3CG_Check__PutErr
	addl $16,%esp
.L106:
	movl (%esi),%eax
	movl 648(%eax),%ebx
	pushl %esi
	call *%ebx
	movl 4(%esi),%ebx
	movl (%ebx),%eax
	movl 220(%eax),%eax
	pushl %ebx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe38:
	.size	 M3CG_Check__end_block,.Lfe38-M3CG_Check__end_block
	.align 16
	.type	 M3CG_Check__note_procedure_origin,@function
M3CG_Check__note_procedure_origin:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckProc
	movl (%ebx),%eax
	movl 648(%eax),%edi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 224(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe39:
	.size	 M3CG_Check__note_procedure_origin,.Lfe39-M3CG_Check__note_procedure_origin
	.align 16
	.type	 M3CG_Check__CheckLabel,@function
M3CG_Check__CheckLabel:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%eax
	testl %eax,%eax
	jge .L108
	pushl %eax
	call M3CG_Check__Int
	pushl $0
	pushl %eax
	pushl $MM_M3CG_Check+1920
	pushl %ebx
	call M3CG_Check__PutErr
.L108:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe40:
	.size	 M3CG_Check__CheckLabel,.Lfe40-M3CG_Check__CheckLabel
	.align 16
	.type	 M3CG_Check__set_label,@function
M3CG_Check__set_label:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	cmpb $0,9(%ebx)
	je .L111
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L111:
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 228(%eax),%edx
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe41:
	.size	 M3CG_Check__set_label,.Lfe41-M3CG_Check__set_label
	.align 16
	.type	 M3CG_Check__jump,@function
M3CG_Check__jump:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	cmpb $0,9(%ebx)
	je .L113
	movl (%ebx),%eax
	movl 648(%eax),%edx
	pushl %ebx
	call *%edx
	addl $4,%esp
.L113:
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 232(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe42:
	.size	 M3CG_Check__jump,.Lfe42-M3CG_Check__jump
	.align 16
	.type	 M3CG_Check__if_true,@function
M3CG_Check__if_true:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L115
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L115:
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 236(%eax),%edx
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe43:
	.size	 M3CG_Check__if_true,.Lfe43-M3CG_Check__if_true
	.align 16
	.type	 M3CG_Check__if_false,@function
M3CG_Check__if_false:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L117
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L117:
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 240(%eax),%edx
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe44:
	.size	 M3CG_Check__if_false,.Lfe44-M3CG_Check__if_false
	.align 16
	.type	 M3CG_Check__if_eq,@function
M3CG_Check__if_eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $13
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L119
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L119:
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 244(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe45:
	.size	 M3CG_Check__if_eq,.Lfe45-M3CG_Check__if_eq
	.align 16
	.type	 M3CG_Check__if_ne,@function
M3CG_Check__if_ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $13
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L121
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L121:
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 248(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe46:
	.size	 M3CG_Check__if_ne,.Lfe46-M3CG_Check__if_ne
	.align 16
	.type	 M3CG_Check__if_gt,@function
M3CG_Check__if_gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $13
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L123
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L123:
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 252(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe47:
	.size	 M3CG_Check__if_gt,.Lfe47-M3CG_Check__if_gt
	.align 16
	.type	 M3CG_Check__if_ge,@function
M3CG_Check__if_ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $13
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L125
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L125:
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 256(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe48:
	.size	 M3CG_Check__if_ge,.Lfe48-M3CG_Check__if_ge
	.align 16
	.type	 M3CG_Check__if_lt,@function
M3CG_Check__if_lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $13
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L127
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L127:
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 260(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe49:
	.size	 M3CG_Check__if_lt,.Lfe49-M3CG_Check__if_lt
	.align 16
	.type	 M3CG_Check__if_le,@function
M3CG_Check__if_le:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $13
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%ebx)
	je .L129
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L129:
	pushl %edi
	pushl %ebx
	call M3CG_Check__CheckLabel
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 264(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe50:
	.size	 M3CG_Check__if_le,.Lfe50-M3CG_Check__if_le
	.align 16
	.type	 M3CG_Check__case_jump,@function
M3CG_Check__case_jump:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl (%esi),%eax
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %esi
	call *%ecx
	addl $20,%esp
	cmpb $0,9(%esi)
	je .L131
	movl (%esi),%eax
	movl 648(%eax),%ecx
	pushl %esi
	call *%ecx
	addl $4,%esp
.L131:
	movl 12(%ebp),%eax
	xorl %ebx,%ebx
	movl 4(%eax),%edi
	decl %edi
	jmp .L132
	.align 16
.L133:
	movl 12(%ebp),%eax
	cmpl %ebx,4(%eax)
	ja .L134
	pushl $11506
	call _m3_fault
	.align 16
.L134:
	movl (%eax),%eax
	movl (%eax,%ebx,4),%eax
	pushl %eax
	pushl %esi
	call M3CG_Check__CheckLabel
	incl %ebx
	addl $8,%esp
.L132:
	cmpl %edi,%ebx
	jle .L133
	movl 4(%esi),%ecx
	movl (%ecx),%eax
	movl 268(%eax),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe51:
	.size	 M3CG_Check__case_jump,.Lfe51-M3CG_Check__case_jump
	.align 16
	.type	 M3CG_Check__exit_proc,@function
M3CG_Check__exit_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movzbl 12(%ebp),%esi
	cmpl $15,%esi
	je .L137
	movl (%edi),%eax
	movl 636(%eax),%ebx
	pushl $12
	pushl $12
	pushl $12
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %edi
	call *%ebx
	addl $20,%esp
.L137:
	movl (%edi),%eax
	movl 648(%eax),%ebx
	pushl %edi
	call *%ebx
	movl 4(%edi),%ebx
	movl (%ebx),%eax
	movl 272(%eax),%eax
	pushl %esi
	pushl %ebx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe52:
	.size	 M3CG_Check__exit_proc,.Lfe52-M3CG_Check__exit_proc
	.align 16
	.type	 M3CG_Check__load,@function
M3CG_Check__load:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Check__CheckVar
	movl (%ebx),%eax
	movzbl 20(%ebp),%esi
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 276(%eax),%eax
	pushl %esi
	movl 16(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe53:
	.size	 M3CG_Check__load,.Lfe53-M3CG_Check__load
	.align 16
	.type	 M3CG_Check__store,@function
M3CG_Check__store:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%edi
	movb 20(%ebp),%bl
	pushl %edi
	pushl %esi
	call M3CG_Check__CheckVar
	movl (%esi),%eax
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	andl $255,%ebx
	pushl $12
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%ebx),%al
	pushl %eax
	pushl %esi
	call *%edx
	addl $28,%esp
	cmpb $0,8(%esi)
	je .L140
	movl (%esi),%eax
	movl 648(%eax),%edx
	pushl %esi
	call *%edx
	addl $4,%esp
.L140:
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 288(%eax),%eax
	pushl %ebx
	movl 16(%ebp),%ecx
	pushl %ecx
	pushl %edi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe54:
	.size	 M3CG_Check__store,.Lfe54-M3CG_Check__store
	.align 16
	.type	 M3CG_Check__store_ref,@function
M3CG_Check__store_ref:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckVar
	movl (%ebx),%eax
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%edx
	addl $28,%esp
	cmpb $0,8(%ebx)
	je .L142
	movl (%ebx),%eax
	movl 648(%eax),%edx
	pushl %ebx
	call *%edx
	addl $4,%esp
.L142:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 296(%eax),%eax
	pushl %edi
	pushl %esi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe55:
	.size	 M3CG_Check__store_ref,.Lfe55-M3CG_Check__store_ref
	.align 16
	.type	 M3CG_Check__load_address,@function
M3CG_Check__load_address:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckVar
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 16(%ebp),%edx
	movl 280(%eax),%eax
	pushl %edx
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe56:
	.size	 M3CG_Check__load_address,.Lfe56-M3CG_Check__load_address
	.align 16
	.type	 M3CG_Check__load_indirect,@function
M3CG_Check__load_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movzbl 16(%ebp),%esi
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 284(%eax),%eax
	pushl %esi
	movl 12(%ebp),%edx
	pushl %edx
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe57:
	.size	 M3CG_Check__load_indirect,.Lfe57-M3CG_Check__load_indirect
	.align 16
	.type	 M3CG_Check__store_indirect,@function
M3CG_Check__store_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%edi
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	pushl $0
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%edx
	addl $20,%esp
	cmpb $0,8(%ebx)
	je .L146
	movl (%ebx),%eax
	movl 648(%eax),%edx
	pushl %ebx
	call *%edx
	addl $4,%esp
.L146:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 292(%eax),%eax
	pushl %esi
	pushl %edi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe58:
	.size	 M3CG_Check__store_indirect,.Lfe58-M3CG_Check__store_indirect
	.align 16
	.type	 M3CG_Check__store_ref_indirect,@function
M3CG_Check__store_ref_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%ecx
	pushl $12
	pushl $12
	pushl $0
	pushl $0
	pushl %ebx
	call *%ecx
	addl $20,%esp
	cmpb $0,8(%ebx)
	je .L148
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L148:
	movl 4(%ebx),%ecx
	movl (%ecx),%eax
	movl 300(%eax),%edx
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe59:
	.size	 M3CG_Check__store_ref_indirect,.Lfe59-M3CG_Check__store_ref_indirect
	.align 16
	.type	 M3CG_Check__load_nil,@function
M3CG_Check__load_nil:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $0
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 304(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe60:
	.size	 M3CG_Check__load_nil,.Lfe60-M3CG_Check__load_nil
	.align 16
	.type	 M3CG_Check__load_integer,@function
M3CG_Check__load_integer:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 308(%eax),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe61:
	.size	 M3CG_Check__load_integer,.Lfe61-M3CG_Check__load_integer
	.align 16
	.type	 M3CG_Check__load_float,@function
M3CG_Check__load_float:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%eax
	movl 8(%ebp),%ebx
	xorl %edx,%edx
	movb (%eax),%dl
	movl (%ebx),%eax
	movl 640(%eax),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+800(%edx),%al
	pushl %eax
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 312(%eax),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe62:
	.size	 M3CG_Check__load_float,.Lfe62-M3CG_Check__load_float
	.align 16
	.type	 M3CG_Check__Binary,@function
M3CG_Check__Binary:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $13
	xorl %eax,%eax
	movb 16(%ebp),%al
	movb MM_M3CG_Check+44(%eax),%al
	andl $255,%eax
	pushl %eax
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call *%esi
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe63:
	.size	 M3CG_Check__Binary,.Lfe63-M3CG_Check__Binary
	.align 16
	.type	 M3CG_Check__Unary,@function
M3CG_Check__Unary:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $12
	xorl %eax,%eax
	movb 16(%ebp),%al
	movb MM_M3CG_Check+44(%eax),%al
	andl $255,%eax
	pushl %eax
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call *%esi
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe64:
	.size	 M3CG_Check__Unary,.Lfe64-M3CG_Check__Unary
	.align 16
	.type	 M3CG_Check__eq,@function
M3CG_Check__eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 316(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe65:
	.size	 M3CG_Check__eq,.Lfe65-M3CG_Check__eq
	.align 16
	.type	 M3CG_Check__ne,@function
M3CG_Check__ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 320(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe66:
	.size	 M3CG_Check__ne,.Lfe66-M3CG_Check__ne
	.align 16
	.type	 M3CG_Check__gt,@function
M3CG_Check__gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 324(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe67:
	.size	 M3CG_Check__gt,.Lfe67-M3CG_Check__gt
	.align 16
	.type	 M3CG_Check__ge,@function
M3CG_Check__ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 328(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe68:
	.size	 M3CG_Check__ge,.Lfe68-M3CG_Check__ge
	.align 16
	.type	 M3CG_Check__lt,@function
M3CG_Check__lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 332(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe69:
	.size	 M3CG_Check__lt,.Lfe69-M3CG_Check__lt
	.align 16
	.type	 M3CG_Check__le,@function
M3CG_Check__le:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 336(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe70:
	.size	 M3CG_Check__le,.Lfe70-M3CG_Check__le
	.align 16
	.type	 M3CG_Check__add,@function
M3CG_Check__add:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Binary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 340(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe71:
	.size	 M3CG_Check__add,.Lfe71-M3CG_Check__add
	.align 16
	.type	 M3CG_Check__subtract,@function
M3CG_Check__subtract:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Binary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 344(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe72:
	.size	 M3CG_Check__subtract,.Lfe72-M3CG_Check__subtract
	.align 16
	.type	 M3CG_Check__multiply,@function
M3CG_Check__multiply:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Binary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 348(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe73:
	.size	 M3CG_Check__multiply,.Lfe73-M3CG_Check__multiply
	.align 16
	.type	 M3CG_Check__divide,@function
M3CG_Check__divide:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Binary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 352(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe74:
	.size	 M3CG_Check__divide,.Lfe74-M3CG_Check__divide
	.align 16
	.type	 M3CG_Check__div,@function
M3CG_Check__div:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $13
	movzbl 12(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 392(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe75:
	.size	 M3CG_Check__div,.Lfe75-M3CG_Check__div
	.align 16
	.type	 M3CG_Check__mod,@function
M3CG_Check__mod:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $13
	movzbl 12(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 396(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe76:
	.size	 M3CG_Check__mod,.Lfe76-M3CG_Check__mod
	.align 16
	.type	 M3CG_Check__negate,@function
M3CG_Check__negate:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Unary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 356(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe77:
	.size	 M3CG_Check__negate,.Lfe77-M3CG_Check__negate
	.align 16
	.type	 M3CG_Check__abs,@function
M3CG_Check__abs:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Unary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 360(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe78:
	.size	 M3CG_Check__abs,.Lfe78-M3CG_Check__abs
	.align 16
	.type	 M3CG_Check__max,@function
M3CG_Check__max:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Binary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 364(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe79:
	.size	 M3CG_Check__max,.Lfe79-M3CG_Check__max
	.align 16
	.type	 M3CG_Check__min,@function
M3CG_Check__min:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	xorl %ebx,%ebx
	movb 12(%ebp),%bl
	pushl %ebx
	pushl %ebx
	pushl %esi
	call M3CG_Check__Binary
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 368(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe80:
	.size	 M3CG_Check__min,.Lfe80-M3CG_Check__min
	.align 16
	.type	 M3CG_Check__round,@function
M3CG_Check__round:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Unary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 372(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe81:
	.size	 M3CG_Check__round,.Lfe81-M3CG_Check__round
	.align 16
	.type	 M3CG_Check__trunc,@function
M3CG_Check__trunc:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Unary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 376(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe82:
	.size	 M3CG_Check__trunc,.Lfe82-M3CG_Check__trunc
	.align 16
	.type	 M3CG_Check__floor,@function
M3CG_Check__floor:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Unary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 380(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe83:
	.size	 M3CG_Check__floor,.Lfe83-M3CG_Check__floor
	.align 16
	.type	 M3CG_Check__ceiling,@function
M3CG_Check__ceiling:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movzbl 12(%ebp),%esi
	pushl %esi
	pushl $2
	pushl %ebx
	call M3CG_Check__Unary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 384(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe84:
	.size	 M3CG_Check__ceiling,.Lfe84-M3CG_Check__ceiling
	.align 16
	.type	 M3CG_Check__cvt_float,@function
M3CG_Check__cvt_float:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	xorl %edx,%edx
	movb 12(%ebp),%dl
	movl %edx,-4(%ebp)
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%edx),%al
	pushl %eax
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movzbl 16(%ebp),%esi
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 388(%eax),%eax
	pushl %esi
	movl -4(%ebp),%edx
	pushl %edx
	pushl %edi
	call *%eax
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe85:
	.size	 M3CG_Check__cvt_float,.Lfe85-M3CG_Check__cvt_float
	.align 16
	.type	 M3CG_Check__set_union,@function
M3CG_Check__set_union:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $0
	pushl $0
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 400(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe86:
	.size	 M3CG_Check__set_union,.Lfe86-M3CG_Check__set_union
	.align 16
	.type	 M3CG_Check__set_difference,@function
M3CG_Check__set_difference:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $0
	pushl $0
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 404(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe87:
	.size	 M3CG_Check__set_difference,.Lfe87-M3CG_Check__set_difference
	.align 16
	.type	 M3CG_Check__set_intersection,@function
M3CG_Check__set_intersection:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $0
	pushl $0
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 408(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe88:
	.size	 M3CG_Check__set_intersection,.Lfe88-M3CG_Check__set_intersection
	.align 16
	.type	 M3CG_Check__set_sym_difference,@function
M3CG_Check__set_sym_difference:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $0
	pushl $0
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 412(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe89:
	.size	 M3CG_Check__set_sym_difference,.Lfe89-M3CG_Check__set_sym_difference
	.align 16
	.type	 M3CG_Check__set_member,@function
M3CG_Check__set_member:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $0
	pushl $2
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 416(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe90:
	.size	 M3CG_Check__set_member,.Lfe90-M3CG_Check__set_member
	.align 16
	.type	 M3CG_Check__set_eq,@function
M3CG_Check__set_eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $0
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 420(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe91:
	.size	 M3CG_Check__set_eq,.Lfe91-M3CG_Check__set_eq
	.align 16
	.type	 M3CG_Check__set_ne,@function
M3CG_Check__set_ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $0
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 424(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe92:
	.size	 M3CG_Check__set_ne,.Lfe92-M3CG_Check__set_ne
	.align 16
	.type	 M3CG_Check__set_gt,@function
M3CG_Check__set_gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $0
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 436(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe93:
	.size	 M3CG_Check__set_gt,.Lfe93-M3CG_Check__set_gt
	.align 16
	.type	 M3CG_Check__set_ge,@function
M3CG_Check__set_ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $0
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 440(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe94:
	.size	 M3CG_Check__set_ge,.Lfe94-M3CG_Check__set_ge
	.align 16
	.type	 M3CG_Check__set_lt,@function
M3CG_Check__set_lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $0
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 428(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe95:
	.size	 M3CG_Check__set_lt,.Lfe95-M3CG_Check__set_lt
	.align 16
	.type	 M3CG_Check__set_le,@function
M3CG_Check__set_le:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $0
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 432(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe96:
	.size	 M3CG_Check__set_le,.Lfe96-M3CG_Check__set_le
	.align 16
	.type	 M3CG_Check__set_range,@function
M3CG_Check__set_range:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $0
	pushl $2
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 444(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe97:
	.size	 M3CG_Check__set_range,.Lfe97-M3CG_Check__set_range
	.align 16
	.type	 M3CG_Check__set_singleton,@function
M3CG_Check__set_singleton:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $0
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 448(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe98:
	.size	 M3CG_Check__set_singleton,.Lfe98-M3CG_Check__set_singleton
	.align 16
	.type	 M3CG_Check__not,@function
M3CG_Check__not:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Unary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 452(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe99:
	.size	 M3CG_Check__not,.Lfe99-M3CG_Check__not
	.align 16
	.type	 M3CG_Check__and,@function
M3CG_Check__and:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 456(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe100:
	.size	 M3CG_Check__and,.Lfe100-M3CG_Check__and
	.align 16
	.type	 M3CG_Check__or,@function
M3CG_Check__or:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 460(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe101:
	.size	 M3CG_Check__or,.Lfe101-M3CG_Check__or
	.align 16
	.type	 M3CG_Check__xor,@function
M3CG_Check__xor:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 464(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe102:
	.size	 M3CG_Check__xor,.Lfe102-M3CG_Check__xor
	.align 16
	.type	 M3CG_Check__shift,@function
M3CG_Check__shift:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 468(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe103:
	.size	 M3CG_Check__shift,.Lfe103-M3CG_Check__shift
	.align 16
	.type	 M3CG_Check__shift_left,@function
M3CG_Check__shift_left:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 472(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe104:
	.size	 M3CG_Check__shift_left,.Lfe104-M3CG_Check__shift_left
	.align 16
	.type	 M3CG_Check__shift_right,@function
M3CG_Check__shift_right:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 476(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe105:
	.size	 M3CG_Check__shift_right,.Lfe105-M3CG_Check__shift_right
	.align 16
	.type	 M3CG_Check__rotate,@function
M3CG_Check__rotate:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 480(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe106:
	.size	 M3CG_Check__rotate,.Lfe106-M3CG_Check__rotate
	.align 16
	.type	 M3CG_Check__rotate_left,@function
M3CG_Check__rotate_left:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 484(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe107:
	.size	 M3CG_Check__rotate_left,.Lfe107-M3CG_Check__rotate_left
	.align 16
	.type	 M3CG_Check__rotate_right,@function
M3CG_Check__rotate_right:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $2
	pushl $2
	pushl %ebx
	call M3CG_Check__Binary
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 488(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe108:
	.size	 M3CG_Check__rotate_right,.Lfe108-M3CG_Check__rotate_right
	.align 16
	.type	 M3CG_Check__extract,@function
M3CG_Check__extract:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $2
	pushl $2
	pushl $2
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 492(%eax),%edx
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe109:
	.size	 M3CG_Check__extract,.Lfe109-M3CG_Check__extract
	.align 16
	.type	 M3CG_Check__extract_n,@function
M3CG_Check__extract_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 16(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $2
	pushl $2
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 496(%eax),%edx
	pushl %esi
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %edi
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe110:
	.size	 M3CG_Check__extract_n,.Lfe110-M3CG_Check__extract_n
	.align 16
	.type	 M3CG_Check__extract_mn,@function
M3CG_Check__extract_mn:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 20(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 500(%eax),%edx
	pushl %esi
	movl 16(%ebp),%ecx
	pushl %ecx
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %edi
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe111:
	.size	 M3CG_Check__extract_mn,.Lfe111-M3CG_Check__extract_mn
	.align 16
	.type	 M3CG_Check__insert,@function
M3CG_Check__insert:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $2
	pushl $2
	pushl $2
	pushl $2
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 504(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe112:
	.size	 M3CG_Check__insert,.Lfe112-M3CG_Check__insert
	.align 16
	.type	 M3CG_Check__insert_n,@function
M3CG_Check__insert_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $2
	pushl $2
	pushl $2
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 508(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe113:
	.size	 M3CG_Check__insert_n,.Lfe113-M3CG_Check__insert_n
	.align 16
	.type	 M3CG_Check__insert_mn,@function
M3CG_Check__insert_mn:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 16(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $2
	pushl $2
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $2
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 512(%eax),%eax
	pushl %esi
	movl 12(%ebp),%edx
	pushl %edx
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe114:
	.size	 M3CG_Check__insert_mn,.Lfe114-M3CG_Check__insert_mn
	.align 16
	.type	 M3CG_Check__swap,@function
M3CG_Check__swap:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	movl $MM_M3CG_Check+44,%edx
	pushl $12
	xorl %ecx,%ecx
	movb 12(%ebp),%cl
	movl %ecx,-4(%ebp)
	xorl %eax,%eax
	movb (%edx,%ecx),%al
	pushl %eax
	movzbl 16(%ebp),%esi
	xorl %eax,%eax
	movb (%edx,%esi),%al
	pushl %eax
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl -4(%ebp),%ecx
	movl 640(%eax),%edi
	pushl %ecx
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	addl $36,%esp
	movl 516(%eax),%eax
	pushl %esi
	movl -4(%ebp),%ecx
	pushl %ecx
	pushl %edi
	call *%eax
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe115:
	.size	 M3CG_Check__swap,.Lfe115-M3CG_Check__swap
	.align 16
	.type	 M3CG_Check__pop,@function
M3CG_Check__pop:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	movzbl 12(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 520(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe116:
	.size	 M3CG_Check__pop,.Lfe116-M3CG_Check__pop
	.align 16
	.type	 M3CG_Check__copy_n,@function
M3CG_Check__copy_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $0
	pushl $0
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 524(%eax),%edx
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe117:
	.size	 M3CG_Check__copy_n,.Lfe117-M3CG_Check__copy_n
	.align 16
	.type	 M3CG_Check__copy,@function
M3CG_Check__copy:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $0
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 528(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe118:
	.size	 M3CG_Check__copy,.Lfe118-M3CG_Check__copy
	.align 16
	.type	 M3CG_Check__zero_n,@function
M3CG_Check__zero_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $0
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 532(%eax),%edx
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe119:
	.size	 M3CG_Check__zero_n,.Lfe119-M3CG_Check__zero_n
	.align 16
	.type	 M3CG_Check__zero,@function
M3CG_Check__zero:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 536(%eax),%edx
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %esi
	pushl %edi
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe120:
	.size	 M3CG_Check__zero,.Lfe120-M3CG_Check__zero
	.align 16
	.type	 M3CG_Check__loophole,@function
M3CG_Check__loophole:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	xorl %edx,%edx
	movb 12(%ebp),%dl
	movl %edx,-4(%ebp)
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%edx),%al
	pushl %eax
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movzbl 16(%ebp),%esi
	movl 640(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 540(%eax),%eax
	pushl %esi
	movl -4(%ebp),%edx
	pushl %edx
	pushl %edi
	call *%eax
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe121:
	.size	 M3CG_Check__loophole,.Lfe121-M3CG_Check__loophole
	.align 16
	.type	 M3CG_Check__assert_fault,@function
M3CG_Check__assert_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 648(%eax),%esi
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 544(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe122:
	.size	 M3CG_Check__assert_fault,.Lfe122-M3CG_Check__assert_fault
	.align 16
	.type	 M3CG_Check__narrow_fault,@function
M3CG_Check__narrow_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 4(%eax),%edx
	movl (%edx),%eax
	movl 548(%eax),%eax
	pushl %edx
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe123:
	.size	 M3CG_Check__narrow_fault,.Lfe123-M3CG_Check__narrow_fault
	.align 16
	.type	 M3CG_Check__return_fault,@function
M3CG_Check__return_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 648(%eax),%esi
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 552(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe124:
	.size	 M3CG_Check__return_fault,.Lfe124-M3CG_Check__return_fault
	.align 16
	.type	 M3CG_Check__case_fault,@function
M3CG_Check__case_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 648(%eax),%esi
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 556(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe125:
	.size	 M3CG_Check__case_fault,.Lfe125-M3CG_Check__case_fault
	.align 16
	.type	 M3CG_Check__typecase_fault,@function
M3CG_Check__typecase_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 648(%eax),%esi
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 560(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe126:
	.size	 M3CG_Check__typecase_fault,.Lfe126-M3CG_Check__typecase_fault
	.align 16
	.type	 M3CG_Check__check_nil,@function
M3CG_Check__check_nil:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $0
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 564(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe127:
	.size	 M3CG_Check__check_nil,.Lfe127-M3CG_Check__check_nil
	.align 16
	.type	 M3CG_Check__check_lo,@function
M3CG_Check__check_lo:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 568(%eax),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe128:
	.size	 M3CG_Check__check_lo,.Lfe128-M3CG_Check__check_lo
	.align 16
	.type	 M3CG_Check__check_hi,@function
M3CG_Check__check_hi:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 572(%eax),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe129:
	.size	 M3CG_Check__check_hi,.Lfe129-M3CG_Check__check_hi
	.align 16
	.type	 M3CG_Check__check_range,@function
M3CG_Check__check_range:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $12
	pushl $2
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 576(%eax),%edx
	movl 16(%ebp),%eax
	pushl %eax
	movl 12(%ebp),%eax
	pushl %eax
	pushl %esi
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe130:
	.size	 M3CG_Check__check_range,.Lfe130-M3CG_Check__check_range
	.align 16
	.type	 M3CG_Check__check_index,@function
M3CG_Check__check_index:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $2
	pushl $2
	pushl %ebx
	call *%esi
	movl (%ebx),%eax
	movl 640(%eax),%esi
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 580(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe131:
	.size	 M3CG_Check__check_index,.Lfe131-M3CG_Check__check_index
	.align 16
	.type	 M3CG_Check__check_eq,@function
M3CG_Check__check_eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 636(%eax),%esi
	pushl $12
	pushl $12
	pushl $2
	pushl $2
	pushl %ebx
	call *%esi
	movl 4(%ebx),%esi
	movl (%esi),%eax
	movl 584(%eax),%eax
	pushl %esi
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe132:
	.size	 M3CG_Check__check_eq,.Lfe132-M3CG_Check__check_eq
	.align 16
	.type	 M3CG_Check__add_offset,@function
M3CG_Check__add_offset:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 588(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe133:
	.size	 M3CG_Check__add_offset,.Lfe133-M3CG_Check__add_offset
	.align 16
	.type	 M3CG_Check__index_address,@function
M3CG_Check__index_address:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%esi
	movl 636(%eax),%edi
	pushl $12
	pushl $12
	pushl $0
	pushl $2
	pushl %ebx
	call *%edi
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 592(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe134:
	.size	 M3CG_Check__index_address,.Lfe134-M3CG_Check__index_address
	.align 16
	.type	 M3CG_Check__start_call_direct,@function
M3CG_Check__start_call_direct:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckProc
	addl $8,%esp
	cmpb $0,9(%ebx)
	je .L225
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L225:
	cmpl $0,40(%ebx)
	jle .L226
	cmpb $0,10(%ebx)
	jne .L226
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1952
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L226:
	movl %ebx,%ecx
	incl 40(%ecx)
	movl 4(%ecx),%ecx
	movl (%ecx),%eax
	movl 596(%eax),%edx
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edi
	pushl %esi
	pushl %ecx
	call *%edx
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe135:
	.size	 M3CG_Check__start_call_direct,.Lfe135-M3CG_Check__start_call_direct
	.align 16
	.type	 M3CG_Check__start_call_indirect,@function
M3CG_Check__start_call_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 16(%ebp),%esi
	cmpb $0,9(%ebx)
	je .L228
	movl (%ebx),%eax
	movl 648(%eax),%ecx
	pushl %ebx
	call *%ecx
	addl $4,%esp
.L228:
	cmpl $0,40(%ebx)
	jle .L229
	cmpb $0,10(%ebx)
	jne .L229
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1952
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L229:
	movl %ebx,%ecx
	incl 40(%ecx)
	movl 4(%ecx),%ecx
	movl (%ecx),%eax
	movl 604(%eax),%edx
	pushl %esi
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ecx
	call *%edx
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe136:
	.size	 M3CG_Check__start_call_indirect,.Lfe136-M3CG_Check__start_call_indirect
	.align 16
	.type	 M3CG_Check__pop_param,@function
M3CG_Check__pop_param:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	cmpl $0,40(%ebx)
	jg .L231
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1988
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L231:
	movl (%ebx),%eax
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	pushl $12
	movzbl 12(%ebp),%esi
	xorl %eax,%eax
	movb MM_M3CG_Check+44(%esi),%al
	pushl %eax
	pushl %ebx
	call *%edx
	addl $20,%esp
	cmpb $0,8(%ebx)
	je .L232
	movl (%ebx),%eax
	movl 648(%eax),%edx
	pushl %ebx
	call *%edx
	addl $4,%esp
.L232:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 612(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe137:
	.size	 M3CG_Check__pop_param,.Lfe137-M3CG_Check__pop_param
	.align 16
	.type	 M3CG_Check__pop_struct,@function
M3CG_Check__pop_struct:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%edi
	movl 16(%ebp),%esi
	cmpl $0,40(%ebx)
	jg .L234
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1988
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L234:
	movl (%ebx),%eax
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%edx
	addl $20,%esp
	cmpb $0,8(%ebx)
	je .L235
	movl (%ebx),%eax
	movl 648(%eax),%edx
	pushl %ebx
	call *%edx
	addl $4,%esp
.L235:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 616(%eax),%eax
	pushl %esi
	pushl %edi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe138:
	.size	 M3CG_Check__pop_struct,.Lfe138-M3CG_Check__pop_struct
	.align 16
	.type	 M3CG_Check__pop_static_link,@function
M3CG_Check__pop_static_link:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	cmpl $0,40(%ebx)
	jg .L237
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1988
	pushl %ebx
	call M3CG_Check__PutErr
	addl $16,%esp
.L237:
	movl (%ebx),%eax
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %ebx
	call *%edx
	addl $20,%esp
	cmpb $0,8(%ebx)
	je .L238
	movl (%ebx),%eax
	movl 648(%eax),%edx
	pushl %ebx
	call *%edx
	addl $4,%esp
.L238:
	movl 4(%ebx),%edx
	movl (%edx),%eax
	movl 620(%eax),%eax
	pushl %edx
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe139:
	.size	 M3CG_Check__pop_static_link,.Lfe139-M3CG_Check__pop_static_link
	.align 16
	.type	 M3CG_Check__DoCall,@function
M3CG_Check__DoCall:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	cmpb $0,9(%ebx)
	je .L240
	movl (%ebx),%eax
	movl 648(%eax),%eax
	pushl %ebx
	call *%eax
	addl $4,%esp
.L240:
	movl 40(%ebx),%eax
	testl %eax,%eax
	jle .L241
	decl %eax
	movl %eax,40(%ebx)
	jmp .L239
	.align 16
.L241:
	pushl $0
	pushl $0
	pushl $MM_M3CG_Check+1988
	pushl %ebx
	call M3CG_Check__PutErr
.L239:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe140:
	.size	 M3CG_Check__DoCall,.Lfe140-M3CG_Check__DoCall
	.align 16
	.type	 M3CG_Check__call_direct,@function
M3CG_Check__call_direct:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%edi
	movb 16(%ebp),%bl
	pushl %edi
	pushl %esi
	call M3CG_Check__CheckProc
	pushl %esi
	call M3CG_Check__DoCall
	andl $255,%ebx
	addl $12,%esp
	cmpl $15,%ebx
	je .L244
	movl (%esi),%eax
	movl 640(%eax),%edx
	pushl %ebx
	pushl %esi
	call *%edx
	addl $8,%esp
.L244:
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 600(%eax),%eax
	pushl %ebx
	pushl %edi
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe141:
	.size	 M3CG_Check__call_direct,.Lfe141-M3CG_Check__call_direct
	.align 16
	.type	 M3CG_Check__call_indirect,@function
M3CG_Check__call_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movb 12(%ebp),%bl
	movl (%esi),%eax
	movl 16(%ebp),%edi
	movl 636(%eax),%edx
	pushl $12
	pushl $12
	pushl $12
	pushl $0
	pushl %esi
	call *%edx
	pushl %esi
	call M3CG_Check__DoCall
	andl $255,%ebx
	addl $24,%esp
	cmpl $15,%ebx
	je .L246
	movl (%esi),%eax
	movl 640(%eax),%edx
	pushl %ebx
	pushl %esi
	call *%edx
	addl $8,%esp
.L246:
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 608(%eax),%eax
	pushl %edi
	pushl %ebx
	pushl %edx
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe142:
	.size	 M3CG_Check__call_indirect,.Lfe142-M3CG_Check__call_indirect
	.align 16
	.type	 M3CG_Check__load_procedure,@function
M3CG_Check__load_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckProc
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 624(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe143:
	.size	 M3CG_Check__load_procedure,.Lfe143-M3CG_Check__load_procedure
	.align 16
	.type	 M3CG_Check__load_static_link,@function
M3CG_Check__load_static_link:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %esi
	pushl %ebx
	call M3CG_Check__CheckProc
	movl (%ebx),%eax
	movl 640(%eax),%edi
	pushl $0
	pushl %ebx
	call *%edi
	movl 4(%ebx),%edi
	movl (%edi),%eax
	movl 628(%eax),%eax
	pushl %esi
	pushl %edi
	call *%eax
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe144:
	.size	 M3CG_Check__load_static_link,.Lfe144-M3CG_Check__load_static_link
	.align 16
	.type	 M_M3CG_Check_t1416cba5_INIT,@function
M_M3CG_Check_t1416cba5_INIT:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl %ebp,%esp
	movb $1,10(%eax)
	movl $1,16(%eax)
	movl $1,20(%eax)
	movl $1,24(%eax)
	popl %ebp
	ret
.Lfe145:
	.size	 M_M3CG_Check_t1416cba5_INIT,.Lfe145-M_M3CG_Check_t1416cba5_INIT
	.align 16
	.type	 M_M3CG_Check_t1416cba5_LINK,@function
M_M3CG_Check_t1416cba5_LINK:
	pushl %ebp
	movl %esp,%ebp
	movl MM_M3CG_Check+1308,%eax
	movl MM_M3CG_Check+244,%edx
	movl 52(%eax),%eax
	movl %ebp,%esp
	movl %edx,636(%eax)
	movl MM_M3CG_Check+248,%edx
	movl %edx,640(%eax)
	movl MM_M3CG_Check+252,%edx
	movl %edx,644(%eax)
	movl MM_M3CG_Check+256,%edx
	movl %edx,648(%eax)
	movl MM_M3CG_Check+268,%edx
	movl %edx,8(%eax)
	movl MM_M3CG_Check+272,%edx
	movl %edx,12(%eax)
	movl MM_M3CG_Check+276,%edx
	movl %edx,16(%eax)
	movl MM_M3CG_Check+280,%edx
	movl %edx,32(%eax)
	movl MM_M3CG_Check+284,%edx
	movl %edx,116(%eax)
	movl MM_M3CG_Check+288,%edx
	movl %edx,120(%eax)
	movl MM_M3CG_Check+292,%edx
	movl %edx,124(%eax)
	movl MM_M3CG_Check+300,%edx
	movl %edx,136(%eax)
	movl MM_M3CG_Check+304,%edx
	movl %edx,156(%eax)
	movl MM_M3CG_Check+308,%edx
	movl %edx,160(%eax)
	movl MM_M3CG_Check+312,%edx
	movl %edx,164(%eax)
	movl MM_M3CG_Check+316,%edx
	movl %edx,168(%eax)
	movl MM_M3CG_Check+324,%edx
	movl %edx,172(%eax)
	movl MM_M3CG_Check+328,%edx
	movl %edx,176(%eax)
	movl MM_M3CG_Check+332,%edx
	movl %edx,180(%eax)
	movl MM_M3CG_Check+336,%edx
	movl %edx,184(%eax)
	movl MM_M3CG_Check+340,%edx
	movl %edx,188(%eax)
	movl MM_M3CG_Check+344,%edx
	movl %edx,192(%eax)
	movl MM_M3CG_Check+348,%edx
	movl %edx,196(%eax)
	movl MM_M3CG_Check+356,%edx
	movl %edx,208(%eax)
	movl MM_M3CG_Check+360,%edx
	movl %edx,212(%eax)
	movl MM_M3CG_Check+364,%edx
	movl %edx,216(%eax)
	movl MM_M3CG_Check+368,%edx
	movl %edx,220(%eax)
	movl MM_M3CG_Check+372,%edx
	movl %edx,224(%eax)
	movl MM_M3CG_Check+380,%edx
	movl %edx,228(%eax)
	movl MM_M3CG_Check+384,%edx
	movl %edx,232(%eax)
	movl MM_M3CG_Check+388,%edx
	movl %edx,236(%eax)
	movl MM_M3CG_Check+392,%edx
	movl %edx,240(%eax)
	movl MM_M3CG_Check+396,%edx
	movl %edx,244(%eax)
	movl MM_M3CG_Check+400,%edx
	movl %edx,248(%eax)
	movl MM_M3CG_Check+404,%edx
	movl %edx,252(%eax)
	movl MM_M3CG_Check+408,%edx
	movl %edx,256(%eax)
	movl MM_M3CG_Check+412,%edx
	movl %edx,260(%eax)
	movl MM_M3CG_Check+416,%edx
	movl %edx,264(%eax)
	movl MM_M3CG_Check+420,%edx
	movl %edx,268(%eax)
	movl MM_M3CG_Check+424,%edx
	movl %edx,272(%eax)
	movl MM_M3CG_Check+428,%edx
	movl %edx,276(%eax)
	movl MM_M3CG_Check+432,%edx
	movl %edx,288(%eax)
	movl MM_M3CG_Check+436,%edx
	movl %edx,296(%eax)
	movl MM_M3CG_Check+440,%edx
	movl %edx,280(%eax)
	movl MM_M3CG_Check+444,%edx
	movl %edx,284(%eax)
	movl MM_M3CG_Check+448,%edx
	movl %edx,292(%eax)
	movl MM_M3CG_Check+452,%edx
	movl %edx,300(%eax)
	movl MM_M3CG_Check+456,%edx
	movl %edx,304(%eax)
	movl MM_M3CG_Check+460,%edx
	movl %edx,308(%eax)
	movl MM_M3CG_Check+464,%edx
	movl %edx,312(%eax)
	movl MM_M3CG_Check+476,%edx
	movl %edx,316(%eax)
	movl MM_M3CG_Check+480,%edx
	movl %edx,320(%eax)
	movl MM_M3CG_Check+484,%edx
	movl %edx,324(%eax)
	movl MM_M3CG_Check+488,%edx
	movl %edx,328(%eax)
	movl MM_M3CG_Check+492,%edx
	movl %edx,332(%eax)
	movl MM_M3CG_Check+496,%edx
	movl %edx,336(%eax)
	movl MM_M3CG_Check+500,%edx
	movl %edx,340(%eax)
	movl MM_M3CG_Check+504,%edx
	movl %edx,344(%eax)
	movl MM_M3CG_Check+508,%edx
	movl %edx,348(%eax)
	movl MM_M3CG_Check+512,%edx
	movl %edx,352(%eax)
	movl MM_M3CG_Check+516,%edx
	movl %edx,392(%eax)
	movl MM_M3CG_Check+520,%edx
	movl %edx,396(%eax)
	movl MM_M3CG_Check+524,%edx
	movl %edx,356(%eax)
	movl MM_M3CG_Check+528,%edx
	movl %edx,360(%eax)
	movl MM_M3CG_Check+532,%edx
	movl %edx,364(%eax)
	movl MM_M3CG_Check+536,%edx
	movl %edx,368(%eax)
	movl MM_M3CG_Check+540,%edx
	movl %edx,372(%eax)
	movl MM_M3CG_Check+544,%edx
	movl %edx,376(%eax)
	movl MM_M3CG_Check+548,%edx
	movl %edx,380(%eax)
	movl MM_M3CG_Check+552,%edx
	movl %edx,384(%eax)
	movl MM_M3CG_Check+556,%edx
	movl %edx,388(%eax)
	movl MM_M3CG_Check+560,%edx
	movl %edx,400(%eax)
	movl MM_M3CG_Check+564,%edx
	movl %edx,404(%eax)
	movl MM_M3CG_Check+568,%edx
	movl %edx,408(%eax)
	movl MM_M3CG_Check+572,%edx
	movl %edx,412(%eax)
	movl MM_M3CG_Check+576,%edx
	movl %edx,416(%eax)
	movl MM_M3CG_Check+580,%edx
	movl %edx,420(%eax)
	movl MM_M3CG_Check+584,%edx
	movl %edx,424(%eax)
	movl MM_M3CG_Check+588,%edx
	movl %edx,436(%eax)
	movl MM_M3CG_Check+592,%edx
	movl %edx,440(%eax)
	movl MM_M3CG_Check+596,%edx
	movl %edx,428(%eax)
	movl MM_M3CG_Check+600,%edx
	movl %edx,432(%eax)
	movl MM_M3CG_Check+604,%edx
	movl %edx,444(%eax)
	movl MM_M3CG_Check+608,%edx
	movl %edx,448(%eax)
	movl MM_M3CG_Check+612,%edx
	movl %edx,452(%eax)
	movl MM_M3CG_Check+616,%edx
	movl %edx,456(%eax)
	movl MM_M3CG_Check+620,%edx
	movl %edx,460(%eax)
	movl MM_M3CG_Check+624,%edx
	movl %edx,464(%eax)
	movl MM_M3CG_Check+628,%edx
	movl %edx,468(%eax)
	movl MM_M3CG_Check+632,%edx
	movl %edx,472(%eax)
	movl MM_M3CG_Check+636,%edx
	movl %edx,476(%eax)
	movl MM_M3CG_Check+640,%edx
	movl %edx,480(%eax)
	movl MM_M3CG_Check+644,%edx
	movl %edx,484(%eax)
	movl MM_M3CG_Check+648,%edx
	movl %edx,488(%eax)
	movl MM_M3CG_Check+652,%edx
	movl %edx,492(%eax)
	movl MM_M3CG_Check+656,%edx
	movl %edx,496(%eax)
	movl MM_M3CG_Check+660,%edx
	movl %edx,500(%eax)
	movl MM_M3CG_Check+664,%edx
	movl %edx,504(%eax)
	movl MM_M3CG_Check+668,%edx
	movl %edx,508(%eax)
	movl MM_M3CG_Check+672,%edx
	movl %edx,512(%eax)
	movl MM_M3CG_Check+676,%edx
	movl %edx,516(%eax)
	movl MM_M3CG_Check+680,%edx
	movl %edx,520(%eax)
	movl MM_M3CG_Check+688,%edx
	movl %edx,528(%eax)
	movl MM_M3CG_Check+684,%edx
	movl %edx,524(%eax)
	movl MM_M3CG_Check+696,%edx
	movl %edx,536(%eax)
	movl MM_M3CG_Check+692,%edx
	movl %edx,532(%eax)
	movl MM_M3CG_Check+700,%edx
	movl %edx,540(%eax)
	movl MM_M3CG_Check+704,%edx
	movl %edx,544(%eax)
	movl MM_M3CG_Check+708,%edx
	movl %edx,548(%eax)
	movl MM_M3CG_Check+712,%edx
	movl %edx,552(%eax)
	movl MM_M3CG_Check+716,%edx
	movl %edx,556(%eax)
	movl MM_M3CG_Check+720,%edx
	movl %edx,560(%eax)
	movl MM_M3CG_Check+724,%edx
	movl %edx,564(%eax)
	movl MM_M3CG_Check+728,%edx
	movl %edx,568(%eax)
	movl MM_M3CG_Check+732,%edx
	movl %edx,572(%eax)
	movl MM_M3CG_Check+736,%edx
	movl %edx,576(%eax)
	movl MM_M3CG_Check+740,%edx
	movl %edx,580(%eax)
	movl MM_M3CG_Check+744,%edx
	movl %edx,584(%eax)
	movl MM_M3CG_Check+748,%edx
	movl %edx,588(%eax)
	movl MM_M3CG_Check+752,%edx
	movl %edx,592(%eax)
	movl MM_M3CG_Check+756,%edx
	movl %edx,596(%eax)
	movl MM_M3CG_Check+780,%edx
	movl %edx,600(%eax)
	movl MM_M3CG_Check+760,%edx
	movl %edx,604(%eax)
	movl MM_M3CG_Check+784,%edx
	movl %edx,608(%eax)
	movl MM_M3CG_Check+764,%edx
	movl %edx,612(%eax)
	movl MM_M3CG_Check+768,%edx
	movl %edx,616(%eax)
	movl MM_M3CG_Check+772,%edx
	movl %edx,620(%eax)
	movl MM_M3CG_Check+788,%edx
	movl %edx,624(%eax)
	movl MM_M3CG_Check+792,%edx
	movl %edx,628(%eax)
	popl %ebp
	ret
.Lfe146:
	.size	 M_M3CG_Check_t1416cba5_LINK,.Lfe146-M_M3CG_Check_t1416cba5_LINK
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_M3CG_Check
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe147:
	.size	 _m3_fault,.Lfe147-_m3_fault
.globl MM_M3CG_Check
.data
	.align 4
	.type	 MM_M3CG_Check,@object
	.size	 MM_M3CG_Check,5352
MM_M3CG_Check:
	.long MM_M3CG_Check+5142
	.long MM_M3CG_Check+116
	.long MM_M3CG_Check+1308
	.zero	8
	.long MM_M3CG_Check+3400
	.zero	4
	.long MM_M3CG_Check+5132
	.long MM_M3CG_Check+5132
	.zero	8
.byte 0
.byte 2
.byte 2
.byte 3
.byte 4
.byte 5
.byte 2
.byte 2
.byte 2
.byte 2
.byte 2
.byte 2
.byte 2
.byte 2
.byte 0
.byte 6
	.long MM_M3CG_Check+808
	.long MM_M3CG_Check+828
	.long MM_M3CG_Check+848
	.long MM_M3CG_Check+868
	.long MM_M3CG_Check+888
	.long MM_M3CG_Check+908
	.long MM_M3CG_Check+928
	.long MM_M3CG_Check+948
	.long MM_M3CG_Check+968
	.long MM_M3CG_Check+988
	.long MM_M3CG_Check+1012
	.long MM_M3CG_Check+1032
	.long MM_M3CG_Check+1032
	.long MM_M3CG_Check+1048
	.zero	8
	.long 337038245
.byte 88
.byte 143
.byte 254
.byte 26
.byte 253
.byte 68
.byte 232
.byte 14
	.long 1
	.zero	4
	.long 108
	.long 4
	.zero	4
	.long 16
	.zero	12
	.long MM_M3CG_Check+5284
	.long MM_M3CG_Check+5306
	.long MM_M3CG_Check+5310
	.long M_M3CG_Check_t1416cba5_INIT
	.long M_M3CG_Check_t1416cba5_LINK
	.long -800126780
	.zero	16
	.long MM_M3CG_Check+5338
	.zero	4
	.long L_1
	.long M3CG_Check__Int
	.long M3CG_Check__PutErr
	.long M3CG_Check__Stack_Get
	.long M3CG_Check__IsOK
	.long M3CG_Check__ST_Name
	.long M3CG_Check__Stack_Pop
	.long M3CG_Check__Stack_Push
	.long M3CG_Check__Stack_Repush
	.long M3CG_Check__Stack_Empty
	.long M3CG_Check__Stack_Dump
	.long M3CG_Check__CrashAndBurn
	.long M3CG_Check__set_error_handler
	.long M3CG_Check__begin_unit
	.long M3CG_Check__end_unit
	.long M3CG_Check__set_source_line
	.long M3CG_Check__set_runtime_proc
	.long M3CG_Check__set_runtime_hook
	.long M3CG_Check__get_runtime_hook
	.long M3CG_Check__CheckVar
	.long M3CG_Check__bind_segment
	.long M3CG_Check__declare_temp
	.long M3CG_Check__free_temp
	.long M3CG_Check__begin_init
	.long M3CG_Check__end_init
	.long M3CG_Check__DoInit
	.long M3CG_Check__init_int
	.long M3CG_Check__init_proc
	.long M3CG_Check__init_label
	.long M3CG_Check__init_var
	.long M3CG_Check__init_offset
	.long M3CG_Check__init_chars
	.long M3CG_Check__init_float
	.long M3CG_Check__CheckProc
	.long M3CG_Check__begin_procedure
	.long M3CG_Check__end_procedure
	.long M3CG_Check__begin_block
	.long M3CG_Check__end_block
	.long M3CG_Check__note_procedure_origin
	.long M3CG_Check__CheckLabel
	.long M3CG_Check__set_label
	.long M3CG_Check__jump
	.long M3CG_Check__if_true
	.long M3CG_Check__if_false
	.long M3CG_Check__if_eq
	.long M3CG_Check__if_ne
	.long M3CG_Check__if_gt
	.long M3CG_Check__if_ge
	.long M3CG_Check__if_lt
	.long M3CG_Check__if_le
	.long M3CG_Check__case_jump
	.long M3CG_Check__exit_proc
	.long M3CG_Check__load
	.long M3CG_Check__store
	.long M3CG_Check__store_ref
	.long M3CG_Check__load_address
	.long M3CG_Check__load_indirect
	.long M3CG_Check__store_indirect
	.long M3CG_Check__store_ref_indirect
	.long M3CG_Check__load_nil
	.long M3CG_Check__load_integer
	.long M3CG_Check__load_float
	.long M3CG_Check__Binary
	.long M3CG_Check__Unary
	.long M3CG_Check__eq
	.long M3CG_Check__ne
	.long M3CG_Check__gt
	.long M3CG_Check__ge
	.long M3CG_Check__lt
	.long M3CG_Check__le
	.long M3CG_Check__add
	.long M3CG_Check__subtract
	.long M3CG_Check__multiply
	.long M3CG_Check__divide
	.long M3CG_Check__div
	.long M3CG_Check__mod
	.long M3CG_Check__negate
	.long M3CG_Check__abs
	.long M3CG_Check__max
	.long M3CG_Check__min
	.long M3CG_Check__round
	.long M3CG_Check__trunc
	.long M3CG_Check__floor
	.long M3CG_Check__ceiling
	.long M3CG_Check__cvt_float
	.long M3CG_Check__set_union
	.long M3CG_Check__set_difference
	.long M3CG_Check__set_intersection
	.long M3CG_Check__set_sym_difference
	.long M3CG_Check__set_member
	.long M3CG_Check__set_eq
	.long M3CG_Check__set_ne
	.long M3CG_Check__set_gt
	.long M3CG_Check__set_ge
	.long M3CG_Check__set_lt
	.long M3CG_Check__set_le
	.long M3CG_Check__set_range
	.long M3CG_Check__set_singleton
	.long M3CG_Check__not
	.long M3CG_Check__and
	.long M3CG_Check__or
	.long M3CG_Check__xor
	.long M3CG_Check__shift
	.long M3CG_Check__shift_left
	.long M3CG_Check__shift_right
	.long M3CG_Check__rotate
	.long M3CG_Check__rotate_left
	.long M3CG_Check__rotate_right
	.long M3CG_Check__extract
	.long M3CG_Check__extract_n
	.long M3CG_Check__extract_mn
	.long M3CG_Check__insert
	.long M3CG_Check__insert_n
	.long M3CG_Check__insert_mn
	.long M3CG_Check__swap
	.long M3CG_Check__pop
	.long M3CG_Check__copy_n
	.long M3CG_Check__copy
	.long M3CG_Check__zero_n
	.long M3CG_Check__zero
	.long M3CG_Check__loophole
	.long M3CG_Check__assert_fault
	.long M3CG_Check__narrow_fault
	.long M3CG_Check__return_fault
	.long M3CG_Check__case_fault
	.long M3CG_Check__typecase_fault
	.long M3CG_Check__check_nil
	.long M3CG_Check__check_lo
	.long M3CG_Check__check_hi
	.long M3CG_Check__check_range
	.long M3CG_Check__check_index
	.long M3CG_Check__check_eq
	.long M3CG_Check__add_offset
	.long M3CG_Check__index_address
	.long M3CG_Check__start_call_direct
	.long M3CG_Check__start_call_indirect
	.long M3CG_Check__pop_param
	.long M3CG_Check__pop_struct
	.long M3CG_Check__pop_static_link
	.long M3CG_Check__DoCall
	.long M3CG_Check__call_direct
	.long M3CG_Check__call_indirect
	.long M3CG_Check__load_procedure
	.long M3CG_Check__load_static_link
	.long M3CG_Check__New
.byte 3
.byte 4
.byte 5
	.zero	1
	.long 2
	.long MM_M3CG_Check+816
	.long 6
	.ascii	"Addr "
	.zero	3
	.long 2
	.long MM_M3CG_Check+836
	.long 6
	.ascii	"Word "
	.zero	3
	.long 2
	.long MM_M3CG_Check+856
	.long 5
	.ascii	"Int "
	.zero	4
	.long 2
	.long MM_M3CG_Check+876
	.long 6
	.ascii	"Real "
	.zero	3
	.long 2
	.long MM_M3CG_Check+896
	.long 7
	.ascii	"LReal "
	.zero	2
	.long 2
	.long MM_M3CG_Check+916
	.long 8
	.ascii	"ExReal "
	.zero	1
	.long 2
	.long MM_M3CG_Check+936
	.long 6
	.ascii	"Void "
	.zero	3
	.long 2
	.long MM_M3CG_Check+956
	.long 5
	.ascii	"W,I "
	.zero	4
	.long 2
	.long MM_M3CG_Check+976
	.long 7
	.ascii	"R,L,E "
	.zero	2
	.long 2
	.long MM_M3CG_Check+996
	.long 11
	.ascii	"W,I,R,L,E "
	.zero	2
	.long 2
	.long MM_M3CG_Check+1020
	.long 5
	.ascii	"any "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1040
	.long 1
	.zero	4
	.long 2
	.long MM_M3CG_Check+1056
	.long 9
	.ascii	"<=match "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1080
	.long 2
	.ascii	" "
	.zero	3
	.long 2
	.long MM_M3CG_Check+1096
	.long 40
	.ascii	"********* M3CG_Check ERROR *********** "
	.zero	1
	.long 2
	.long MM_M3CG_Check+1148
	.long 9
	.ascii	"] got [ "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1172
	.long 2
	.ascii	"]"
	.zero	3
	.long 2
	.long MM_M3CG_Check+1188
	.long 24
	.ascii	"bad stack:  expected [ "
	.zero	1
	.long 2
	.long MM_M3CG_Check+1224
	.long 15
	.ascii	"stack overflow"
	.zero	2
	.long 2
	.long MM_M3CG_Check+1252
	.long 18
	.ascii	"non-empty stack: "
	.zero	3
	.long 2
	.long MM_M3CG_Check+1284
	.long 3
	.ascii	"[ "
	.zero	2
	.long 2
	.long MM_M3CG_Check+1300
	.long 5
	.ascii	"... "
	.zero	4
	.long MM_M3CG_Check+1316
	.long 337038245
	.zero	4
	.long 951908833
	.long 2
	.long MM_M3CG_Check+1336
	.long 29
	.ascii	"Unhandled M3CG_Check error: "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1380
	.long 24
	.ascii	"1 code generation error"
	.zero	1
	.long 2
	.long MM_M3CG_Check+1416
	.long 24
	.ascii	" code generation errors"
	.zero	1
	.long 2
	.long MM_M3CG_Check+1452
	.long 25
	.ascii	"redefined runtime proc: "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1492
	.long 25
	.ascii	"redefined runtime hook: "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1532
	.long 25
	.ascii	"undefined runtime hook: "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1572
	.long 13
	.ascii	"NIL variable"
	.zero	4
	.long 2
	.long MM_M3CG_Check+1600
	.long 29
	.ascii	"nested static initialization"
	.zero	4
	.long 2
	.long MM_M3CG_Check+1644
	.long 19
	.ascii	"missing begin_init"
	.zero	2
	.long 2
	.long MM_M3CG_Check+1676
	.long 19
	.ascii	"decreasing offsets"
	.zero	2
	.long 2
	.long MM_M3CG_Check+1708
	.long 14
	.ascii	"NIL procedure"
	.zero	3
	.long 2
	.long MM_M3CG_Check+1736
	.long 29
	.ascii	"nested procedure declaration"
	.zero	4
	.long 2
	.long MM_M3CG_Check+1780
	.long 24
	.ascii	"missing begin_procedure"
	.zero	1
	.long 2
	.long MM_M3CG_Check+1816
	.long 21
	.ascii	"missing end_blocks: "
	.zero	4
	.long 2
	.long MM_M3CG_Check+1852
	.long 29
	.ascii	"begin_block not in procedure"
	.zero	4
	.long 2
	.long MM_M3CG_Check+1896
	.long 20
	.ascii	"missing begin_block"
	.zero	1
	.long 2
	.long MM_M3CG_Check+1928
	.long 18
	.ascii	"undefined label: "
	.zero	3
	.long 2
	.long MM_M3CG_Check+1960
	.long 22
	.ascii	"nested procedure call"
	.zero	3
	.long 2
	.long MM_M3CG_Check+1996
	.long 19
	.ascii	"missing start_call"
	.zero	2
	.ascii	"load_static_link"
	.zero	1
	.ascii	"load_procedure"
	.zero	1
	.ascii	"call_indirect"
	.zero	1
	.ascii	"call_direct"
	.zero	1
	.ascii	"DoCall"
	.zero	1
	.ascii	"pop_static_link"
	.zero	1
	.ascii	"pop_struct"
	.zero	1
	.ascii	"pop_param"
	.zero	1
	.ascii	"start_call_indirect"
	.zero	1
	.ascii	"start_call_direct"
	.zero	1
	.ascii	"index_address"
	.zero	1
	.ascii	"add_offset"
	.zero	1
	.ascii	"check_eq"
	.zero	1
	.ascii	"check_index"
	.zero	1
	.ascii	"check_range"
	.zero	1
	.ascii	"check_hi"
	.zero	1
	.ascii	"check_lo"
	.zero	1
	.ascii	"check_nil"
	.zero	1
	.ascii	"typecase_fault"
	.zero	1
	.ascii	"case_fault"
	.zero	1
	.ascii	"return_fault"
	.zero	1
	.ascii	"narrow_fault"
	.zero	1
	.ascii	"assert_fault"
	.zero	1
	.ascii	"loophole"
	.zero	1
	.ascii	"zero"
	.zero	1
	.ascii	"zero_n"
	.zero	1
	.ascii	"copy"
	.zero	1
	.ascii	"copy_n"
	.zero	1
	.ascii	"pop"
	.zero	1
	.ascii	"swap"
	.zero	1
	.ascii	"insert_mn"
	.zero	1
	.ascii	"insert_n"
	.zero	1
	.ascii	"insert"
	.zero	1
	.ascii	"extract_mn"
	.zero	1
	.ascii	"extract_n"
	.zero	1
	.ascii	"extract"
	.zero	1
	.ascii	"rotate_right"
	.zero	1
	.ascii	"rotate_left"
	.zero	1
	.ascii	"rotate"
	.zero	1
	.ascii	"shift_right"
	.zero	1
	.ascii	"shift_left"
	.zero	1
	.ascii	"shift"
	.zero	1
	.ascii	"xor"
	.zero	1
	.ascii	"or"
	.zero	1
	.ascii	"and"
	.zero	1
	.ascii	"not"
	.zero	1
	.ascii	"set_singleton"
	.zero	1
	.ascii	"set_range"
	.zero	1
	.ascii	"set_le"
	.zero	1
	.ascii	"set_lt"
	.zero	1
	.ascii	"set_ge"
	.zero	1
	.ascii	"set_gt"
	.zero	1
	.ascii	"set_ne"
	.zero	1
	.ascii	"set_eq"
	.zero	1
	.ascii	"set_member"
	.zero	1
	.ascii	"set_sym_difference"
	.zero	1
	.ascii	"set_intersection"
	.zero	1
	.ascii	"set_difference"
	.zero	1
	.ascii	"set_union"
	.zero	1
	.ascii	"cvt_float"
	.zero	1
	.ascii	"ceiling"
	.zero	1
	.ascii	"floor"
	.zero	1
	.ascii	"trunc"
	.zero	1
	.ascii	"round"
	.zero	1
	.ascii	"min"
	.zero	1
	.ascii	"max"
	.zero	1
	.ascii	"abs"
	.zero	1
	.ascii	"negate"
	.zero	1
	.ascii	"mod"
	.zero	1
	.ascii	"div"
	.zero	1
	.ascii	"divide"
	.zero	1
	.ascii	"multiply"
	.zero	1
	.ascii	"subtract"
	.zero	1
	.ascii	"add"
	.zero	1
	.ascii	"le"
	.zero	1
	.ascii	"lt"
	.zero	1
	.ascii	"ge"
	.zero	1
	.ascii	"gt"
	.zero	1
	.ascii	"ne"
	.zero	1
	.ascii	"eq"
	.zero	1
	.ascii	"Unary"
	.zero	1
	.ascii	"Binary"
	.zero	1
	.ascii	"load_float"
	.zero	1
	.ascii	"load_integer"
	.zero	1
	.ascii	"load_nil"
	.zero	1
	.ascii	"store_ref_indirect"
	.zero	1
	.ascii	"store_indirect"
	.zero	1
	.ascii	"load_indirect"
	.zero	1
	.ascii	"load_address"
	.zero	1
	.ascii	"store_ref"
	.zero	1
	.ascii	"store"
	.zero	1
	.ascii	"load"
	.zero	1
	.ascii	"exit_proc"
	.zero	1
	.ascii	"case_jump"
	.zero	1
	.ascii	"if_le"
	.zero	1
	.ascii	"if_lt"
	.zero	1
	.ascii	"if_ge"
	.zero	1
	.ascii	"if_gt"
	.zero	1
	.ascii	"if_ne"
	.zero	1
	.ascii	"if_eq"
	.zero	1
	.ascii	"if_false"
	.zero	1
	.ascii	"if_true"
	.zero	1
	.ascii	"jump"
	.zero	1
	.ascii	"set_label"
	.zero	1
	.ascii	"CheckLabel"
	.zero	1
	.ascii	"note_procedure_origin"
	.zero	1
	.ascii	"end_block"
	.zero	1
	.ascii	"begin_block"
	.zero	1
	.ascii	"end_procedure"
	.zero	1
	.ascii	"begin_procedure"
	.zero	1
	.ascii	"CheckProc"
	.zero	1
	.ascii	"init_float"
	.zero	1
	.ascii	"init_chars"
	.zero	1
	.ascii	"init_offset"
	.zero	1
	.ascii	"init_var"
	.zero	1
	.ascii	"init_label"
	.zero	1
	.ascii	"init_proc"
	.zero	1
	.ascii	"init_int"
	.zero	1
	.ascii	"DoInit"
	.zero	1
	.ascii	"end_init"
	.zero	1
	.ascii	"begin_init"
	.zero	1
	.ascii	"free_temp"
	.zero	1
	.ascii	"declare_temp"
	.zero	1
	.ascii	"bind_segment"
	.zero	1
	.ascii	"CheckVar"
	.zero	1
	.ascii	"get_runtime_hook"
	.zero	1
	.ascii	"set_runtime_hook"
	.zero	1
	.ascii	"set_runtime_proc"
	.zero	1
	.ascii	"set_source_line"
	.zero	1
	.ascii	"end_unit"
	.zero	1
	.ascii	"begin_unit"
	.zero	1
	.ascii	"set_error_handler"
	.zero	1
	.ascii	"CrashAndBurn"
	.zero	1
	.ascii	"New"
	.zero	1
	.ascii	"Stack_Dump"
	.zero	1
	.ascii	"Stack_Empty"
	.zero	1
	.ascii	"Stack_Repush"
	.zero	1
	.ascii	"Stack_Push"
	.zero	1
	.ascii	"Stack_Pop"
	.zero	1
	.ascii	"ST_Name"
	.zero	1
	.ascii	"IsOK"
	.zero	1
	.ascii	"Stack_Get"
	.zero	1
	.ascii	"PutErr"
	.zero	1
	.ascii	"Int"
	.zero	4
	.long M3CG_Check__load_static_link
	.long MM_M3CG_Check+2016
	.zero	4
	.long M3CG_Check__load_procedure
	.long MM_M3CG_Check+2033
	.zero	4
	.long M3CG_Check__call_indirect
	.long MM_M3CG_Check+2048
	.zero	4
	.long M3CG_Check__call_direct
	.long MM_M3CG_Check+2062
	.zero	4
	.long M3CG_Check__DoCall
	.long MM_M3CG_Check+2074
	.zero	4
	.long M3CG_Check__pop_static_link
	.long MM_M3CG_Check+2081
	.zero	4
	.long M3CG_Check__pop_struct
	.long MM_M3CG_Check+2097
	.zero	4
	.long M3CG_Check__pop_param
	.long MM_M3CG_Check+2108
	.zero	4
	.long M3CG_Check__start_call_indirect
	.long MM_M3CG_Check+2118
	.zero	4
	.long M3CG_Check__start_call_direct
	.long MM_M3CG_Check+2138
	.zero	4
	.long M3CG_Check__index_address
	.long MM_M3CG_Check+2156
	.zero	4
	.long M3CG_Check__add_offset
	.long MM_M3CG_Check+2170
	.zero	4
	.long M3CG_Check__check_eq
	.long MM_M3CG_Check+2181
	.zero	4
	.long M3CG_Check__check_index
	.long MM_M3CG_Check+2190
	.zero	4
	.long M3CG_Check__check_range
	.long MM_M3CG_Check+2202
	.zero	4
	.long M3CG_Check__check_hi
	.long MM_M3CG_Check+2214
	.zero	4
	.long M3CG_Check__check_lo
	.long MM_M3CG_Check+2223
	.zero	4
	.long M3CG_Check__check_nil
	.long MM_M3CG_Check+2232
	.zero	4
	.long M3CG_Check__typecase_fault
	.long MM_M3CG_Check+2242
	.zero	4
	.long M3CG_Check__case_fault
	.long MM_M3CG_Check+2257
	.zero	4
	.long M3CG_Check__return_fault
	.long MM_M3CG_Check+2268
	.zero	4
	.long M3CG_Check__narrow_fault
	.long MM_M3CG_Check+2281
	.zero	4
	.long M3CG_Check__assert_fault
	.long MM_M3CG_Check+2294
	.zero	4
	.long M3CG_Check__loophole
	.long MM_M3CG_Check+2307
	.zero	4
	.long M3CG_Check__zero
	.long MM_M3CG_Check+2316
	.zero	4
	.long M3CG_Check__zero_n
	.long MM_M3CG_Check+2321
	.zero	4
	.long M3CG_Check__copy
	.long MM_M3CG_Check+2328
	.zero	4
	.long M3CG_Check__copy_n
	.long MM_M3CG_Check+2333
	.zero	4
	.long M3CG_Check__pop
	.long MM_M3CG_Check+2340
	.zero	4
	.long M3CG_Check__swap
	.long MM_M3CG_Check+2344
	.zero	4
	.long M3CG_Check__insert_mn
	.long MM_M3CG_Check+2349
	.zero	4
	.long M3CG_Check__insert_n
	.long MM_M3CG_Check+2359
	.zero	4
	.long M3CG_Check__insert
	.long MM_M3CG_Check+2368
	.zero	4
	.long M3CG_Check__extract_mn
	.long MM_M3CG_Check+2375
	.zero	4
	.long M3CG_Check__extract_n
	.long MM_M3CG_Check+2386
	.zero	4
	.long M3CG_Check__extract
	.long MM_M3CG_Check+2396
	.zero	4
	.long M3CG_Check__rotate_right
	.long MM_M3CG_Check+2404
	.zero	4
	.long M3CG_Check__rotate_left
	.long MM_M3CG_Check+2417
	.zero	4
	.long M3CG_Check__rotate
	.long MM_M3CG_Check+2429
	.zero	4
	.long M3CG_Check__shift_right
	.long MM_M3CG_Check+2436
	.zero	4
	.long M3CG_Check__shift_left
	.long MM_M3CG_Check+2448
	.zero	4
	.long M3CG_Check__shift
	.long MM_M3CG_Check+2459
	.zero	4
	.long M3CG_Check__xor
	.long MM_M3CG_Check+2465
	.zero	4
	.long M3CG_Check__or
	.long MM_M3CG_Check+2469
	.zero	4
	.long M3CG_Check__and
	.long MM_M3CG_Check+2472
	.zero	4
	.long M3CG_Check__not
	.long MM_M3CG_Check+2476
	.zero	4
	.long M3CG_Check__set_singleton
	.long MM_M3CG_Check+2480
	.zero	4
	.long M3CG_Check__set_range
	.long MM_M3CG_Check+2494
	.zero	4
	.long M3CG_Check__set_le
	.long MM_M3CG_Check+2504
	.zero	4
	.long M3CG_Check__set_lt
	.long MM_M3CG_Check+2511
	.zero	4
	.long M3CG_Check__set_ge
	.long MM_M3CG_Check+2518
	.zero	4
	.long M3CG_Check__set_gt
	.long MM_M3CG_Check+2525
	.zero	4
	.long M3CG_Check__set_ne
	.long MM_M3CG_Check+2532
	.zero	4
	.long M3CG_Check__set_eq
	.long MM_M3CG_Check+2539
	.zero	4
	.long M3CG_Check__set_member
	.long MM_M3CG_Check+2546
	.zero	4
	.long M3CG_Check__set_sym_difference
	.long MM_M3CG_Check+2557
	.zero	4
	.long M3CG_Check__set_intersection
	.long MM_M3CG_Check+2576
	.zero	4
	.long M3CG_Check__set_difference
	.long MM_M3CG_Check+2593
	.zero	4
	.long M3CG_Check__set_union
	.long MM_M3CG_Check+2608
	.zero	4
	.long M3CG_Check__cvt_float
	.long MM_M3CG_Check+2618
	.zero	4
	.long M3CG_Check__ceiling
	.long MM_M3CG_Check+2628
	.zero	4
	.long M3CG_Check__floor
	.long MM_M3CG_Check+2636
	.zero	4
	.long M3CG_Check__trunc
	.long MM_M3CG_Check+2642
	.zero	4
	.long M3CG_Check__round
	.long MM_M3CG_Check+2648
	.zero	4
	.long M3CG_Check__min
	.long MM_M3CG_Check+2654
	.zero	4
	.long M3CG_Check__max
	.long MM_M3CG_Check+2658
	.zero	4
	.long M3CG_Check__abs
	.long MM_M3CG_Check+2662
	.zero	4
	.long M3CG_Check__negate
	.long MM_M3CG_Check+2666
	.zero	4
	.long M3CG_Check__mod
	.long MM_M3CG_Check+2673
	.zero	4
	.long M3CG_Check__div
	.long MM_M3CG_Check+2677
	.zero	4
	.long M3CG_Check__divide
	.long MM_M3CG_Check+2681
	.zero	4
	.long M3CG_Check__multiply
	.long MM_M3CG_Check+2688
	.zero	4
	.long M3CG_Check__subtract
	.long MM_M3CG_Check+2697
	.zero	4
	.long M3CG_Check__add
	.long MM_M3CG_Check+2706
	.zero	4
	.long M3CG_Check__le
	.long MM_M3CG_Check+2710
	.zero	4
	.long M3CG_Check__lt
	.long MM_M3CG_Check+2713
	.zero	4
	.long M3CG_Check__ge
	.long MM_M3CG_Check+2716
	.zero	4
	.long M3CG_Check__gt
	.long MM_M3CG_Check+2719
	.zero	4
	.long M3CG_Check__ne
	.long MM_M3CG_Check+2722
	.zero	4
	.long M3CG_Check__eq
	.long MM_M3CG_Check+2725
	.zero	4
	.long M3CG_Check__Unary
	.long MM_M3CG_Check+2728
	.zero	4
	.long M3CG_Check__Binary
	.long MM_M3CG_Check+2734
	.zero	4
	.long M3CG_Check__load_float
	.long MM_M3CG_Check+2741
	.zero	4
	.long M3CG_Check__load_integer
	.long MM_M3CG_Check+2752
	.zero	4
	.long M3CG_Check__load_nil
	.long MM_M3CG_Check+2765
	.zero	4
	.long M3CG_Check__store_ref_indirect
	.long MM_M3CG_Check+2774
	.zero	4
	.long M3CG_Check__store_indirect
	.long MM_M3CG_Check+2793
	.zero	4
	.long M3CG_Check__load_indirect
	.long MM_M3CG_Check+2808
	.zero	4
	.long M3CG_Check__load_address
	.long MM_M3CG_Check+2822
	.zero	4
	.long M3CG_Check__store_ref
	.long MM_M3CG_Check+2835
	.zero	4
	.long M3CG_Check__store
	.long MM_M3CG_Check+2845
	.zero	4
	.long M3CG_Check__load
	.long MM_M3CG_Check+2851
	.zero	4
	.long M3CG_Check__exit_proc
	.long MM_M3CG_Check+2856
	.zero	4
	.long M3CG_Check__case_jump
	.long MM_M3CG_Check+2866
	.zero	4
	.long M3CG_Check__if_le
	.long MM_M3CG_Check+2876
	.zero	4
	.long M3CG_Check__if_lt
	.long MM_M3CG_Check+2882
	.zero	4
	.long M3CG_Check__if_ge
	.long MM_M3CG_Check+2888
	.zero	4
	.long M3CG_Check__if_gt
	.long MM_M3CG_Check+2894
	.zero	4
	.long M3CG_Check__if_ne
	.long MM_M3CG_Check+2900
	.zero	4
	.long M3CG_Check__if_eq
	.long MM_M3CG_Check+2906
	.zero	4
	.long M3CG_Check__if_false
	.long MM_M3CG_Check+2912
	.zero	4
	.long M3CG_Check__if_true
	.long MM_M3CG_Check+2921
	.zero	4
	.long M3CG_Check__jump
	.long MM_M3CG_Check+2929
	.zero	4
	.long M3CG_Check__set_label
	.long MM_M3CG_Check+2934
	.zero	4
	.long M3CG_Check__CheckLabel
	.long MM_M3CG_Check+2944
	.zero	4
	.long M3CG_Check__note_procedure_origin
	.long MM_M3CG_Check+2955
	.zero	4
	.long M3CG_Check__end_block
	.long MM_M3CG_Check+2977
	.zero	4
	.long M3CG_Check__begin_block
	.long MM_M3CG_Check+2987
	.zero	4
	.long M3CG_Check__end_procedure
	.long MM_M3CG_Check+2999
	.zero	4
	.long M3CG_Check__begin_procedure
	.long MM_M3CG_Check+3013
	.zero	4
	.long M3CG_Check__CheckProc
	.long MM_M3CG_Check+3029
	.zero	4
	.long M3CG_Check__init_float
	.long MM_M3CG_Check+3039
	.zero	4
	.long M3CG_Check__init_chars
	.long MM_M3CG_Check+3050
	.zero	4
	.long M3CG_Check__init_offset
	.long MM_M3CG_Check+3061
	.zero	4
	.long M3CG_Check__init_var
	.long MM_M3CG_Check+3073
	.zero	4
	.long M3CG_Check__init_label
	.long MM_M3CG_Check+3082
	.zero	4
	.long M3CG_Check__init_proc
	.long MM_M3CG_Check+3093
	.zero	4
	.long M3CG_Check__init_int
	.long MM_M3CG_Check+3103
	.zero	4
	.long M3CG_Check__DoInit
	.long MM_M3CG_Check+3112
	.zero	4
	.long M3CG_Check__end_init
	.long MM_M3CG_Check+3119
	.zero	4
	.long M3CG_Check__begin_init
	.long MM_M3CG_Check+3128
	.zero	4
	.long M3CG_Check__free_temp
	.long MM_M3CG_Check+3139
	.zero	4
	.long M3CG_Check__declare_temp
	.long MM_M3CG_Check+3149
	.zero	4
	.long M3CG_Check__bind_segment
	.long MM_M3CG_Check+3162
	.zero	4
	.long M3CG_Check__CheckVar
	.long MM_M3CG_Check+3175
	.zero	4
	.long M3CG_Check__get_runtime_hook
	.long MM_M3CG_Check+3184
	.zero	4
	.long M3CG_Check__set_runtime_hook
	.long MM_M3CG_Check+3201
	.zero	4
	.long M3CG_Check__set_runtime_proc
	.long MM_M3CG_Check+3218
	.zero	4
	.long M3CG_Check__set_source_line
	.long MM_M3CG_Check+3235
	.zero	4
	.long M3CG_Check__end_unit
	.long MM_M3CG_Check+3251
	.zero	4
	.long M3CG_Check__begin_unit
	.long MM_M3CG_Check+3260
	.zero	4
	.long M3CG_Check__set_error_handler
	.long MM_M3CG_Check+3271
	.zero	4
	.long M3CG_Check__CrashAndBurn
	.long MM_M3CG_Check+3289
	.zero	4
	.long M3CG_Check__New
	.long MM_M3CG_Check+3302
	.long MI_M3CG_Check+44
	.long M3CG_Check__Stack_Dump
	.long MM_M3CG_Check+3306
	.zero	4
	.long M3CG_Check__Stack_Empty
	.long MM_M3CG_Check+3317
	.zero	4
	.long M3CG_Check__Stack_Repush
	.long MM_M3CG_Check+3329
	.zero	4
	.long M3CG_Check__Stack_Push
	.long MM_M3CG_Check+3342
	.zero	4
	.long M3CG_Check__Stack_Pop
	.long MM_M3CG_Check+3353
	.zero	4
	.long M3CG_Check__ST_Name
	.long MM_M3CG_Check+3363
	.zero	4
	.long M3CG_Check__IsOK
	.long MM_M3CG_Check+3371
	.zero	4
	.long M3CG_Check__Stack_Get
	.long MM_M3CG_Check+3376
	.zero	4
	.long M3CG_Check__PutErr
	.long MM_M3CG_Check+3386
	.zero	4
	.long M3CG_Check__Int
	.long MM_M3CG_Check+3393
	.zero	8
.byte 42
.byte 220
.byte 2
.byte 1
.byte 4
.byte 27
.byte 0
.byte 4
.byte 3
.byte 0
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/m3mid"
	.ascii	"dle/src/M3CG_Check.m3"
	.zero	1
.byte 16
.byte 16
.byte 16
.byte 16
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 14
.byte 6
.byte 4
.byte 1
.byte 16
.byte 26
.byte 51
.byte 0
.byte 42
.byte 52
.byte 4
.byte 0
.byte 20
.byte 10
.byte 18
.byte 2
.byte 23
.byte 23
.byte 23
.byte 7
.byte 27
.byte 27
.byte 27
.byte 27
.byte 27
.byte 27
.byte 27
.byte 27
.byte 27
.byte 27
.byte 13
.byte 16
.byte 59
.byte 238
.byte 29
.byte 237
.byte 1
.byte 51
.byte 5
.byte 16
	.ascii	"M3CG_Check.U"
	.zero	2
	.local	L_1
	.comm	L_1,4096,4
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
