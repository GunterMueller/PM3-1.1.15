	.file	"M3CG_Wr.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 M3CG_Wr__NL,@function
M3CG_Wr__NL:
	pushl %ebp
	movl %esp,%ebp
	movl MI_Target+816,%eax
	movl 8(%ebp),%edx
	pushl %eax
	pushl %edx
	call M3CG_Wr__OutT
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 M3CG_Wr__NL,.Lfe1-M3CG_Wr__NL
	.align 16
	.type	 M3CG_Wr__Cmd,@function
M3CG_Wr__Cmd:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%ebx
	pushl %ebx
	movl MI_Text+56,%eax
	call *%eax
	pushl $9
	movl %eax,%edi
	pushl %esi
	call M3CG_Wr__OutC
	pushl %ebx
	pushl %esi
	call M3CG_Wr__OutT
	pushl $9
	pushl %esi
	call M3CG_Wr__OutC
	addl $28,%esp
	cmpl $7,%edi
	jg .L2
	pushl $9
	pushl %esi
	call M3CG_Wr__OutC
.L2:
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 M3CG_Wr__Cmd,.Lfe2-M3CG_Wr__Cmd
	.align 16
	.type	 M3CG_Wr__ZName,@function
M3CG_Wr__ZName:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $32
	pushl %ebx
	call M3CG_Wr__OutC
	addl $8,%esp
	testl %esi,%esi
	jne .L5
	pushl $42
	pushl %ebx
	call M3CG_Wr__OutC
	jmp .L4
	.align 16
.L5:
	pushl %esi
	pushl %ebx
	call M3CG_Wr__OutN
.L4:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 M3CG_Wr__ZName,.Lfe3-M3CG_Wr__ZName
	.align 16
	.type	 M3CG_Wr__VName,@function
M3CG_Wr__VName:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%ebx
	testl %ebx,%ebx
	je .L12
	movl -4(%ebx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_M3CG_Wr+1760
	jg .L11
	movl MM_M3CG_Wr+1756,%eax
	cmpl %edx,4(%eax)
	jge .L10
	jmp .L11
	.align 16
.L12:
	pushl $MM_M3CG_Wr+1768
	jmp .L14
	.align 16
.L10:
	pushl $MM_M3CG_Wr+1784
	pushl %esi
	call M3CG_Wr__OutT
	movl 4(%ebx),%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__OutI
	jmp .L7
	.align 16
.L11:
	pushl $MM_M3CG_Wr+1800
.L14:
	pushl %esi
	call M3CG_Wr__OutT
.L7:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 M3CG_Wr__VName,.Lfe4-M3CG_Wr__VName
	.align 16
	.type	 M3CG_Wr__PName,@function
M3CG_Wr__PName:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%ebx
	testl %ebx,%ebx
	je .L20
	movl -4(%ebx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_M3CG_Wr+1820
	jg .L19
	movl MM_M3CG_Wr+1816,%eax
	cmpl %edx,4(%eax)
	jge .L18
	jmp .L19
	.align 16
.L20:
	pushl $MM_M3CG_Wr+1768
	jmp .L22
	.align 16
.L18:
	pushl $MM_M3CG_Wr+1828
	pushl %esi
	call M3CG_Wr__OutT
	movl 4(%ebx),%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__OutI
	jmp .L15
	.align 16
.L19:
	pushl $MM_M3CG_Wr+1844
.L22:
	pushl %esi
	call M3CG_Wr__OutT
.L15:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe5:
	.size	 M3CG_Wr__PName,.Lfe5-M3CG_Wr__PName
	.align 16
	.type	 M3CG_Wr__TName,@function
M3CG_Wr__TName:
	pushl %ebp
	movl %esp,%ebp
	xorl %edx,%edx
	movb 12(%ebp),%dl
	movl 8(%ebp),%eax
	movl MM_M3CG_Wr+1244(,%edx,4),%edx
	pushl %edx
	pushl %eax
	call M3CG_Wr__OutT
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe6:
	.size	 M3CG_Wr__TName,.Lfe6-M3CG_Wr__TName
	.align 16
	.type	 M3CG_Wr__Flt,@function
M3CG_Wr__Flt:
	pushl %ebp
	movl %esp,%ebp
	subl $396,%esp
	pushl %edi
	leal -388(%ebp),%edi
	pushl %esi
	leal -396(%ebp),%esi
	pushl %ebx
	movl %edi,-396(%ebp)
	movl $385,-392(%ebp)
	pushl %esi
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_TFloat+156,%eax
	call *%eax
	movl %eax,%ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_TFloat+96,%eax
	call *%eax
	movl MM_M3CG_Wr+1644(,%eax,4),%eax
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	addl $20,%esp
	testl %ebx,%ebx
	jge .L25
	pushl $4305
	call _m3_fault
	.align 16
.L25:
	cmpl $385,%ebx
	jle .L26
	pushl $4305
	call _m3_fault
	.align 16
.L26:
	movl %ebx,-392(%ebp)
	movl %edi,-396(%ebp)
	pushl %esi
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutS
	leal -408(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe7:
	.size	 M3CG_Wr__Flt,.Lfe7-M3CG_Wr__Flt
	.align 16
	.type	 M3CG_Wr__Bool,@function
M3CG_Wr__Bool:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movb 12(%ebp),%bl
	pushl $32
	pushl %esi
	call M3CG_Wr__OutC
	xorl %eax,%eax
	movb %bl,%al
	movb MM_M3CG_Wr+1704(%eax),%al
	andl $255,%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__OutC
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe8:
	.size	 M3CG_Wr__Bool,.Lfe8-M3CG_Wr__Bool
	.align 16
	.type	 M3CG_Wr__Lab,@function
M3CG_Wr__Lab:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $32
	pushl %ebx
	call M3CG_Wr__OutC
	addl $8,%esp
	cmpl $-1,%esi
	jne .L29
	pushl $42
	pushl %ebx
	call M3CG_Wr__OutC
	jmp .L28
	.align 16
.L29:
	pushl $MM_M3CG_Wr+1864
	pushl %ebx
	call M3CG_Wr__OutT
	pushl %esi
	pushl %ebx
	call M3CG_Wr__OutI
.L28:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe9:
	.size	 M3CG_Wr__Lab,.Lfe9-M3CG_Wr__Lab
	.align 16
	.type	 M3CG_Wr__Tipe,@function
M3CG_Wr__Tipe:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+1880
	pushl %ebx
	call M3CG_Wr__OutT
	pushl %esi
	pushl %ebx
	call M3CG_Wr__OutI
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe10:
	.size	 M3CG_Wr__Tipe,.Lfe10-M3CG_Wr__Tipe
	.align 16
	.type	 M3CG_Wr__Int,@function
M3CG_Wr__Int:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $32
	pushl %ebx
	call M3CG_Wr__OutC
	pushl %esi
	pushl %ebx
	call M3CG_Wr__OutI
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe11:
	.size	 M3CG_Wr__Int,.Lfe11-M3CG_Wr__Int
	.align 16
	.type	 M3CG_Wr__TInt,@function
M3CG_Wr__TInt:
	pushl %ebp
	movl %esp,%ebp
	subl $300,%esp
	pushl %edi
	leal -292(%ebp),%edi
	pushl %esi
	leal -300(%ebp),%esi
	pushl %ebx
	movl %edi,-300(%ebp)
	movl $289,-296(%ebp)
	pushl %esi
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_TInt+112,%eax
	call *%eax
	movl %eax,%ebx
	pushl $32
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutC
	addl $16,%esp
	testl %ebx,%ebx
	jge .L34
	pushl $4897
	call _m3_fault
	.align 16
.L34:
	cmpl $289,%ebx
	jle .L35
	pushl $4897
	call _m3_fault
	.align 16
.L35:
	movl %ebx,-296(%ebp)
	movl %edi,-300(%ebp)
	pushl %esi
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutS
	leal -312(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe12:
	.size	 M3CG_Wr__TInt,.Lfe12-M3CG_Wr__TInt
	.align 16
	.type	 M3CG_Wr__BInt,@function
M3CG_Wr__BInt:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%edx
	movl 12(%ebp),%eax
	pushl %eax
	pushl %edx
	call M3CG_Wr__Int
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe13:
	.size	 M3CG_Wr__BInt,.Lfe13-M3CG_Wr__BInt
	.align 16
	.type	 M3CG_Wr__Txt,@function
M3CG_Wr__Txt:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
.L38:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%edx
	movl %edx,RTThread__handlerStack
	pushl $32
	pushl %edi
	call M3CG_Wr__OutC
	addl $8,%esp
	cmpl $0,12(%ebp)
	jne .L39
	pushl $42
	jmp .L49
	.align 16
.L39:
	pushl $34
	pushl %edi
	call M3CG_Wr__OutC
	movl 12(%ebp),%edx
	pushl %edx
	movl MI_Text+56,%eax
	call *%eax
	movl $0,-12(%ebp)
	decl %eax
	movl %eax,-16(%ebp)
	addl $12,%esp
	jmp .L40
	.align 16
.L41:
	movl -12(%ebp),%edx
	pushl %edx
	movl 12(%ebp),%edx
	pushl %edx
	movl MI_Text+52,%eax
	call *%eax
	pushl $MM_M3CG_Wr+512
	xorl %ebx,%ebx
	movb %al,%bl
	pushl %ebx
	call set_member
	addl $16,%esp
	testl %eax,%eax
	je .L42
	pushl %ebx
	jmp .L50
	.align 16
.L42:
	pushl $92
	pushl %edi
	call M3CG_Wr__OutC
	movl %ebx,%eax
	sarl $6,%eax
	addl $8,%esp
	cmpl $7,%eax
	jbe .L44
	pushl $5537
	call _m3_fault
	.align 16
.L44:
	movl $MM_M3CG_Wr+544,%esi
	movb (%esi,%eax),%al
	andl $255,%eax
	pushl %eax
	pushl %edi
	call M3CG_Wr__OutC
	movl %ebx,%eax
	andl $63,%eax
	sarl $3,%eax
	addl $8,%esp
	cmpl $7,%eax
	jbe .L45
	pushl $5553
	call _m3_fault
	.align 16
.L45:
	movb (%esi,%eax),%al
	andl $255,%eax
	pushl %eax
	pushl %edi
	call M3CG_Wr__OutC
	movl %ebx,%eax
	andl $7,%eax
	addl $8,%esp
	cmpl $7,%eax
	jbe .L46
	pushl $5569
	call _m3_fault
	.align 16
.L46:
	movb (%esi,%eax),%al
	andl $255,%eax
	pushl %eax
.L50:
	pushl %edi
	call M3CG_Wr__OutC
	addl $8,%esp
	incl -12(%ebp)
.L40:
	movl -16(%ebp),%edx
	cmpl %edx,-12(%ebp)
	jle .L41
	pushl $34
.L49:
	pushl %edi
	call M3CG_Wr__OutC
.L48:
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe14:
	.size	 M3CG_Wr__Txt,.Lfe14-M3CG_Wr__Txt
	.align 16
	.type	 M3CG_Wr__Flush,@function
M3CG_Wr__Flush:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 8(%ebx),%eax
	pushl %eax
	movl 12(%ebx),%eax
	pushl %eax
	movl MI_M3Buf+80,%eax
	call *%eax
	movl $0,16(%ebx)
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe15:
	.size	 M3CG_Wr__Flush,.Lfe15-M3CG_Wr__Flush
	.align 16
	.type	 M3CG_Wr__OutC,@function
M3CG_Wr__OutC:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	movl 12(%ebx),%eax
	pushl %eax
	movl MI_M3Buf+48,%eax
	call *%eax
	movl 16(%ebx),%eax
	incl %eax
	movl %eax,16(%ebx)
	addl $8,%esp
	cmpl $1023,%eax
	jle .L52
	pushl %ebx
	call M3CG_Wr__Flush
.L52:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe16:
	.size	 M3CG_Wr__OutC,.Lfe16-M3CG_Wr__OutC
	.align 16
	.type	 M3CG_Wr__OutT,@function
M3CG_Wr__OutT:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%ebx
	pushl %ebx
	movl 12(%esi),%eax
	pushl %eax
	movl MI_M3Buf+52,%eax
	call *%eax
	pushl %ebx
	movl MI_Text+56,%eax
	call *%eax
	addl 16(%esi),%eax
	movl %eax,16(%esi)
	addl $12,%esp
	cmpl $1023,%eax
	jle .L54
	pushl %esi
	call M3CG_Wr__Flush
.L54:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe17:
	.size	 M3CG_Wr__OutT,.Lfe17-M3CG_Wr__OutT
	.align 16
	.type	 M3CG_Wr__OutN,@function
M3CG_Wr__OutN:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl 12(%ebx),%eax
	pushl %eax
	movl MI_M3ID+64,%eax
	call *%eax
	movl 16(%ebx),%eax
	addl $10,%eax
	movl %eax,16(%ebx)
	addl $8,%esp
	cmpl $1023,%eax
	jle .L56
	pushl %ebx
	call M3CG_Wr__Flush
.L56:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe18:
	.size	 M3CG_Wr__OutN,.Lfe18-M3CG_Wr__OutN
	.align 16
	.type	 M3CG_Wr__OutS,@function
M3CG_Wr__OutS:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl 12(%ebx),%eax
	pushl %eax
	movl MI_M3Buf+68,%eax
	call *%eax
	movl 12(%ebp),%eax
	addl $8,%esp
	movl 4(%eax),%eax
	addl 16(%ebx),%eax
	movl %eax,16(%ebx)
	cmpl $1023,%eax
	jle .L58
	pushl %ebx
	call M3CG_Wr__Flush
.L58:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe19:
	.size	 M3CG_Wr__OutS,.Lfe19-M3CG_Wr__OutS
	.align 16
	.type	 M3CG_Wr__OutI,@function
M3CG_Wr__OutI:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl 12(%ebx),%eax
	pushl %eax
	movl MI_M3Buf+56,%eax
	call *%eax
	movl 16(%ebx),%eax
	addl $4,%eax
	movl %eax,16(%ebx)
	addl $8,%esp
	cmpl $1023,%eax
	jle .L60
	pushl %ebx
	call M3CG_Wr__Flush
.L60:
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe20:
	.size	 M3CG_Wr__OutI,.Lfe20-M3CG_Wr__OutI
	.align 16
	.type	 M3CG_Wr__New,@function
M3CG_Wr__New:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl MI_M3Buf+44,%eax
	movl 8(%ebp),%ebx
	call *%eax
	movl %eax,%esi
	pushl %ebx
	movl %esi,%edi
	pushl %edi
	movl MI_M3Buf+84,%eax
	call *%eax
	movl MM_M3CG_Wr+1892,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%esi
	movl %ebx,8(%esi)
	movl %edi,12(%esi)
	movl $0,16(%esi)
	movl MM_M3CG_Wr+1900,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl (%edx),%eax
	movl 24(%eax),%eax
	pushl $20
	pushl %edx
	call *%eax
	movl %eax,20(%esi)
	leal -12(%ebp),%esp
	movl %esi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe21:
	.size	 M3CG_Wr__New,.Lfe21-M3CG_Wr__New
	.align 16
	.type	 M3CG_Wr__next_label,@function
M3CG_Wr__next_label:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl 12(%ebp),%ecx
	movl %ebp,%esp
	movl 24(%eax),%edx
	addl %edx,%ecx
	movl %ecx,24(%eax)
	movl %edx,%eax
	popl %ebp
	ret
.Lfe22:
	.size	 M3CG_Wr__next_label,.Lfe22-M3CG_Wr__next_label
	.align 16
	.type	 M3CG_Wr__set_error_handler,@function
M3CG_Wr__set_error_handler:
	pushl %ebp
	movl %esp,%ebp
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe23:
	.size	 M3CG_Wr__set_error_handler,.Lfe23-M3CG_Wr__set_error_handler
	.align 16
	.type	 M3CG_Wr__begin_unit,@function
M3CG_Wr__begin_unit:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+1912
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe24:
	.size	 M3CG_Wr__begin_unit,.Lfe24-M3CG_Wr__begin_unit
	.align 16
	.type	 M3CG_Wr__end_unit,@function
M3CG_Wr__end_unit:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+1936
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	pushl %ebx
	call M3CG_Wr__Flush
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe25:
	.size	 M3CG_Wr__end_unit,.Lfe25-M3CG_Wr__end_unit
	.align 16
	.type	 M3CG_Wr__import_unit,@function
M3CG_Wr__import_unit:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+1960
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe26:
	.size	 M3CG_Wr__import_unit,.Lfe26-M3CG_Wr__import_unit
	.align 16
	.type	 M3CG_Wr__export_unit,@function
M3CG_Wr__export_unit:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+1984
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe27:
	.size	 M3CG_Wr__export_unit,.Lfe27-M3CG_Wr__export_unit
	.align 16
	.type	 M3CG_Wr__set_source_file,@function
M3CG_Wr__set_source_file:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+2008
	pushl %ebx
	call M3CG_Wr__OutT
	pushl %esi
	pushl %ebx
	call M3CG_Wr__OutT
	pushl $MM_M3CG_Wr+2036
	pushl %ebx
	call M3CG_Wr__OutT
	movl MI_Target+816,%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__OutT
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe28:
	.size	 M3CG_Wr__set_source_file,.Lfe28-M3CG_Wr__set_source_file
	.align 16
	.type	 M3CG_Wr__set_source_line,@function
M3CG_Wr__set_source_line:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+2056
	pushl %ebx
	call M3CG_Wr__OutT
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl $MM_M3CG_Wr+2036
	pushl %ebx
	call M3CG_Wr__OutT
	movl MI_Target+816,%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__OutT
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe29:
	.size	 M3CG_Wr__set_source_line,.Lfe29-M3CG_Wr__set_source_line
	.align 16
	.type	 M3CG_Wr__declare_typename,@function
M3CG_Wr__declare_typename:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2084
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe30:
	.size	 M3CG_Wr__declare_typename,.Lfe30-M3CG_Wr__declare_typename
	.align 16
	.type	 M3CG_Wr__declare_array,@function
M3CG_Wr__declare_array:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2116
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Tipe
	addl $32,%esp
	movl 24(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__BInt
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe31:
	.size	 M3CG_Wr__declare_array,.Lfe31-M3CG_Wr__declare_array
	.align 16
	.type	 M3CG_Wr__declare_open_array,@function
M3CG_Wr__declare_open_array:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2144
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__BInt
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe32:
	.size	 M3CG_Wr__declare_open_array,.Lfe32-M3CG_Wr__declare_open_array
	.align 16
	.type	 M3CG_Wr__declare_enum,@function
M3CG_Wr__declare_enum:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2176
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__BInt
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe33:
	.size	 M3CG_Wr__declare_enum,.Lfe33-M3CG_Wr__declare_enum
	.align 16
	.type	 M3CG_Wr__declare_enum_elt,@function
M3CG_Wr__declare_enum_elt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+2204
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe34:
	.size	 M3CG_Wr__declare_enum_elt,.Lfe34-M3CG_Wr__declare_enum_elt
	.align 16
	.type	 M3CG_Wr__declare_packed,@function
M3CG_Wr__declare_packed:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2236
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__BInt
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Tipe
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe35:
	.size	 M3CG_Wr__declare_packed,.Lfe35-M3CG_Wr__declare_packed
	.align 16
	.type	 M3CG_Wr__declare_record,@function
M3CG_Wr__declare_record:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2264
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__BInt
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe36:
	.size	 M3CG_Wr__declare_record,.Lfe36-M3CG_Wr__declare_record
	.align 16
	.type	 M3CG_Wr__declare_field,@function
M3CG_Wr__declare_field:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2292
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__BInt
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__BInt
	addl $32,%esp
	movl 24(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe37:
	.size	 M3CG_Wr__declare_field,.Lfe37-M3CG_Wr__declare_field
	.align 16
	.type	 M3CG_Wr__declare_set,@function
M3CG_Wr__declare_set:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2320
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__BInt
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe38:
	.size	 M3CG_Wr__declare_set,.Lfe38-M3CG_Wr__declare_set
	.align 16
	.type	 M3CG_Wr__declare_subrange,@function
M3CG_Wr__declare_subrange:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2344
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	addl $32,%esp
	movl 24(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__BInt
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe39:
	.size	 M3CG_Wr__declare_subrange,.Lfe39-M3CG_Wr__declare_subrange
	.align 16
	.type	 M3CG_Wr__declare_pointer,@function
M3CG_Wr__declare_pointer:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2376
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Txt
	addl $32,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe40:
	.size	 M3CG_Wr__declare_pointer,.Lfe40-M3CG_Wr__declare_pointer
	.align 16
	.type	 M3CG_Wr__declare_indirect,@function
M3CG_Wr__declare_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2404
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe41:
	.size	 M3CG_Wr__declare_indirect,.Lfe41-M3CG_Wr__declare_indirect
	.align 16
	.type	 M3CG_Wr__declare_proctype,@function
M3CG_Wr__declare_proctype:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%ebx
	movl 16(%ebp),%esi
	pushl $MM_M3CG_Wr+2436
	pushl %edi
	call M3CG_Wr__Cmd
	pushl %ebx
	pushl %edi
	call M3CG_Wr__Tipe
	pushl %esi
	pushl %edi
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %edi
	call M3CG_Wr__Tipe
	addl $32,%esp
	movl 24(%ebp),%edx
	pushl %edx
	pushl %edi
	call M3CG_Wr__Int
	addl $8,%esp
	cmpl $0,28(%ebp)
	jne .L84
	pushl $9748
	call _m3_fault
	.align 16
.L84:
	movl 28(%ebp),%edx
	movl 4(%edx),%eax
	pushl %eax
	pushl %edi
	call M3CG_Wr__Int
	pushl %edi
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe42:
	.size	 M3CG_Wr__declare_proctype,.Lfe42-M3CG_Wr__declare_proctype
	.align 16
	.type	 M3CG_Wr__declare_formal,@function
M3CG_Wr__declare_formal:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2468
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe43:
	.size	 M3CG_Wr__declare_formal,.Lfe43-M3CG_Wr__declare_formal
	.align 16
	.type	 M3CG_Wr__declare_raises,@function
M3CG_Wr__declare_raises:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+2496
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe44:
	.size	 M3CG_Wr__declare_raises,.Lfe44-M3CG_Wr__declare_raises
	.align 16
	.type	 M3CG_Wr__declare_object,@function
M3CG_Wr__declare_object:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2524
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Txt
	addl $32,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 32(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 36(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__BInt
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe45:
	.size	 M3CG_Wr__declare_object,.Lfe45-M3CG_Wr__declare_object
	.align 16
	.type	 M3CG_Wr__declare_method,@function
M3CG_Wr__declare_method:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2552
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe46:
	.size	 M3CG_Wr__declare_method,.Lfe46-M3CG_Wr__declare_method
	.align 16
	.type	 M3CG_Wr__declare_opaque,@function
M3CG_Wr__declare_opaque:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2580
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe47:
	.size	 M3CG_Wr__declare_opaque,.Lfe47-M3CG_Wr__declare_opaque
	.align 16
	.type	 M3CG_Wr__reveal_opaque,@function
M3CG_Wr__reveal_opaque:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2608
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe48:
	.size	 M3CG_Wr__reveal_opaque,.Lfe48-M3CG_Wr__reveal_opaque
	.align 16
	.type	 M3CG_Wr__declare_exception,@function
M3CG_Wr__declare_exception:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2636
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Tipe
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	addl $32,%esp
	movl 24(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__VName
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe49:
	.size	 M3CG_Wr__declare_exception,.Lfe49-M3CG_Wr__declare_exception
	.align 16
	.type	 M3CG_Wr__GetRuntimeHook,@function
M3CG_Wr__GetRuntimeHook:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl $0,-4(%ebp)
	movl 20(%edi),%ecx
	movl (%ecx),%eax
	movl 12(%ebp),%esi
	movl 4(%eax),%edx
	movl %esi,-8(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	leal -8(%ebp),%eax
	pushl %eax
	xorl %ebx,%ebx
	pushl %ecx
	call *%edx
	addl $12,%esp
	testl %eax,%eax
	je .L93
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L94
	movl -4(%eax),%eax
	sall $11,%eax
	shrl $12,%eax
	cmpl %eax,MM_M3CG_Wr+2668
	je .L94
	pushl $10997
	call _m3_fault
	.align 16
.L94:
	movl -4(%ebp),%ebx
	jmp .L95
	.align 16
.L93:
	movl MM_M3CG_Wr+2664,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl %edx,%ecx
	movl %esi,(%edx)
	movl %ebx,4(%ecx)
	movl %ebx,8(%ecx)
	movl %ebx,12(%ecx)
	movl 20(%edi),%edx
	movl (%edx),%eax
	movl %ecx,%ebx
	movl 8(%eax),%ecx
	movl %esi,-12(%ebp)
	movl %ebx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	leal -12(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
.L95:
	leal -28(%ebp),%esp
	movl %ebx,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe50:
	.size	 M3CG_Wr__GetRuntimeHook,.Lfe50-M3CG_Wr__GetRuntimeHook
	.align 16
	.type	 M3CG_Wr__set_runtime_proc,@function
M3CG_Wr__set_runtime_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl %esi
	pushl %ebx
	call M3CG_Wr__GetRuntimeHook
	addl $8,%esp
	testl %eax,%eax
	jne .L97
	pushl $11172
	call _m3_fault
	.align 16
.L97:
	movl %edi,4(%eax)
	pushl $MM_M3CG_Wr+2676
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe51:
	.size	 M3CG_Wr__set_runtime_proc,.Lfe51-M3CG_Wr__set_runtime_proc
	.align 16
	.type	 M3CG_Wr__set_runtime_hook,@function
M3CG_Wr__set_runtime_hook:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl %esi
	pushl %ebx
	call M3CG_Wr__GetRuntimeHook
	addl $8,%esp
	testl %eax,%eax
	jne .L99
	pushl $11332
	call _m3_fault
	.align 16
.L99:
	movl %edi,8(%eax)
	movl 20(%ebp),%edx
	movl %edx,12(%eax)
	pushl $MM_M3CG_Wr+2708
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe52:
	.size	 M3CG_Wr__set_runtime_hook,.Lfe52-M3CG_Wr__set_runtime_hook
	.align 16
	.type	 M3CG_Wr__get_runtime_hook,@function
M3CG_Wr__get_runtime_hook:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edx
	movl 12(%ebp),%eax
	movl 16(%ebp),%ebx
	movl 20(%ebp),%esi
	movl 24(%ebp),%edi
	pushl %eax
	pushl %edx
	call M3CG_Wr__GetRuntimeHook
	movl %eax,%edx
	addl $8,%esp
	testl %edx,%edx
	jne .L102
	pushl $11540
	call _m3_fault
	.align 16
.L102:
	movl 4(%edx),%eax
	movl %eax,(%ebx)
	movl 8(%edx),%eax
	movl %eax,(%esi)
	movl 12(%edx),%eax
	leal -12(%ebp),%esp
	movl %eax,(%edi)
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe53:
	.size	 M3CG_Wr__get_runtime_hook,.Lfe53-M3CG_Wr__get_runtime_hook
	.align 16
	.type	 M3CG_Wr__NewVar,@function
M3CG_Wr__NewVar:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl MM_M3CG_Wr+1756,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl 28(%ebx),%eax
	movl %eax,4(%edx)
	movl %edx,%eax
	incl 28(%ebx)
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe54:
	.size	 M3CG_Wr__NewVar,.Lfe54-M3CG_Wr__NewVar
	.align 16
	.type	 M3CG_Wr__import_global,@function
M3CG_Wr__import_global:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2740
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $36,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe55:
	.size	 M3CG_Wr__import_global,.Lfe55-M3CG_Wr__import_global
	.align 16
	.type	 M3CG_Wr__declare_segment,@function
M3CG_Wr__declare_segment:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2768
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Tipe
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	addl $36,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe56:
	.size	 M3CG_Wr__declare_segment,.Lfe56-M3CG_Wr__declare_segment
	.align 16
	.type	 M3CG_Wr__bind_segment,@function
M3CG_Wr__bind_segment:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+2796
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 28(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe57:
	.size	 M3CG_Wr__bind_segment,.Lfe57-M3CG_Wr__bind_segment
	.align 16
	.type	 M3CG_Wr__declare_global,@function
M3CG_Wr__declare_global:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2824
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $36,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Tipe
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	xorl %eax,%eax
	movb 36(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	addl $32,%esp
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe58:
	.size	 M3CG_Wr__declare_global,.Lfe58-M3CG_Wr__declare_global
	.align 16
	.type	 M3CG_Wr__declare_constant,@function
M3CG_Wr__declare_constant:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2852
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $36,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Tipe
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	xorl %eax,%eax
	movb 36(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	addl $32,%esp
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe59:
	.size	 M3CG_Wr__declare_constant,.Lfe59-M3CG_Wr__declare_constant
	.align 16
	.type	 M3CG_Wr__declare_local,@function
M3CG_Wr__declare_local:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2884
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $36,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Tipe
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	xorl %eax,%eax
	movb 36(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	addl $32,%esp
	xorl %eax,%eax
	movb 40(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe60:
	.size	 M3CG_Wr__declare_local,.Lfe60-M3CG_Wr__declare_local
	.align 16
	.type	 M3CG_Wr__declare_param,@function
M3CG_Wr__declare_param:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2912
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	movl 20(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	addl $36,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	movl 28(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Tipe
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	xorl %eax,%eax
	movb 36(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	addl $32,%esp
	xorl %eax,%eax
	movb 40(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe61:
	.size	 M3CG_Wr__declare_param,.Lfe61-M3CG_Wr__declare_param
	.align 16
	.type	 M3CG_Wr__declare_temp,@function
M3CG_Wr__declare_temp:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl %ebx
	call M3CG_Wr__NewVar
	pushl $MM_M3CG_Wr+2940
	movl %eax,%edi
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	movl 16(%ebp),%edx
	pushl %edx
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	addl $36,%esp
	xorl %eax,%eax
	movb 24(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %edi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe62:
	.size	 M3CG_Wr__declare_temp,.Lfe62-M3CG_Wr__declare_temp
	.align 16
	.type	 M3CG_Wr__free_temp,@function
M3CG_Wr__free_temp:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+2968
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe63:
	.size	 M3CG_Wr__free_temp,.Lfe63-M3CG_Wr__free_temp
	.align 16
	.type	 M3CG_Wr__begin_init,@function
M3CG_Wr__begin_init:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+2992
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe64:
	.size	 M3CG_Wr__begin_init,.Lfe64-M3CG_Wr__begin_init
	.align 16
	.type	 M3CG_Wr__end_init,@function
M3CG_Wr__end_init:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3016
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe65:
	.size	 M3CG_Wr__end_init,.Lfe65-M3CG_Wr__end_init
	.align 16
	.type	 M3CG_Wr__init_int,@function
M3CG_Wr__init_int:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3040
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	movl 16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe66:
	.size	 M3CG_Wr__init_int,.Lfe66-M3CG_Wr__init_int
	.align 16
	.type	 M3CG_Wr__init_proc,@function
M3CG_Wr__init_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3064
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe67:
	.size	 M3CG_Wr__init_proc,.Lfe67-M3CG_Wr__init_proc
	.align 16
	.type	 M3CG_Wr__init_label,@function
M3CG_Wr__init_label:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3088
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Lab
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe68:
	.size	 M3CG_Wr__init_label,.Lfe68-M3CG_Wr__init_label
	.align 16
	.type	 M3CG_Wr__init_var,@function
M3CG_Wr__init_var:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3112
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	movl 20(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe69:
	.size	 M3CG_Wr__init_var,.Lfe69-M3CG_Wr__init_var
	.align 16
	.type	 M3CG_Wr__init_offset,@function
M3CG_Wr__init_offset:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3136
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe70:
	.size	 M3CG_Wr__init_offset,.Lfe70-M3CG_Wr__init_offset
	.align 16
	.type	 M3CG_Wr__init_chars,@function
M3CG_Wr__init_chars:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3160
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Txt
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe71:
	.size	 M3CG_Wr__init_chars,.Lfe71-M3CG_Wr__init_chars
	.align 16
	.type	 M3CG_Wr__init_float,@function
M3CG_Wr__init_float:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3184
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	movl 16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Flt
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe72:
	.size	 M3CG_Wr__init_float,.Lfe72-M3CG_Wr__init_float
	.align 16
	.type	 M3CG_Wr__NewProc,@function
M3CG_Wr__NewProc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	movl MM_M3CG_Wr+1816,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl 32(%ebx),%eax
	movl %eax,4(%edx)
	movl %edx,%eax
	incl 32(%ebx)
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe73:
	.size	 M3CG_Wr__NewProc,.Lfe73-M3CG_Wr__NewProc
	.align 16
	.type	 M3CG_Wr__import_procedure,@function
M3CG_Wr__import_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%ebx
	pushl %edi
	call M3CG_Wr__NewProc
	pushl $MM_M3CG_Wr+3208
	movl %eax,%esi
	pushl %edi
	call M3CG_Wr__Cmd
	pushl %ebx
	pushl %edi
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %edi
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edi
	call M3CG_Wr__TName
	addl $36,%esp
	cmpl $0,24(%ebp)
	jne .L126
	pushl $15348
	call _m3_fault
	.align 16
.L126:
	movl 24(%ebp),%edx
	movl 4(%edx),%eax
	pushl %eax
	pushl %edi
	call M3CG_Wr__Int
	pushl %esi
	pushl %edi
	call M3CG_Wr__PName
	pushl %edi
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %esi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe74:
	.size	 M3CG_Wr__import_procedure,.Lfe74-M3CG_Wr__import_procedure
	.align 16
	.type	 M3CG_Wr__declare_procedure,@function
M3CG_Wr__declare_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%ebx
	pushl %edi
	call M3CG_Wr__NewProc
	pushl $MM_M3CG_Wr+3240
	movl %eax,%esi
	pushl %edi
	call M3CG_Wr__Cmd
	pushl %ebx
	pushl %edi
	call M3CG_Wr__ZName
	movl 16(%ebp),%edx
	pushl %edx
	pushl %edi
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %edi
	call M3CG_Wr__TName
	addl $36,%esp
	movl 24(%ebp),%edx
	pushl %edx
	pushl %edi
	call M3CG_Wr__Int
	addl $8,%esp
	cmpl $0,28(%ebp)
	jne .L128
	pushl $15620
	call _m3_fault
	.align 16
.L128:
	movl 28(%ebp),%edx
	movl 4(%edx),%eax
	pushl %eax
	pushl %edi
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 32(%ebp),%al
	pushl %eax
	pushl %edi
	call M3CG_Wr__Bool
	movl 36(%ebp),%edx
	pushl %edx
	pushl %edi
	call M3CG_Wr__PName
	pushl %esi
	pushl %edi
	call M3CG_Wr__PName
	addl $32,%esp
	pushl %edi
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	movl %esi,%eax
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe75:
	.size	 M3CG_Wr__declare_procedure,.Lfe75-M3CG_Wr__declare_procedure
	.align 16
	.type	 M3CG_Wr__begin_procedure,@function
M3CG_Wr__begin_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3272
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe76:
	.size	 M3CG_Wr__begin_procedure,.Lfe76-M3CG_Wr__begin_procedure
	.align 16
	.type	 M3CG_Wr__end_procedure,@function
M3CG_Wr__end_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3300
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe77:
	.size	 M3CG_Wr__end_procedure,.Lfe77-M3CG_Wr__end_procedure
	.align 16
	.type	 M3CG_Wr__begin_block,@function
M3CG_Wr__begin_block:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3328
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe78:
	.size	 M3CG_Wr__begin_block,.Lfe78-M3CG_Wr__begin_block
	.align 16
	.type	 M3CG_Wr__end_block,@function
M3CG_Wr__end_block:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3352
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe79:
	.size	 M3CG_Wr__end_block,.Lfe79-M3CG_Wr__end_block
	.align 16
	.type	 M3CG_Wr__note_procedure_origin,@function
M3CG_Wr__note_procedure_origin:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3376
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe80:
	.size	 M3CG_Wr__note_procedure_origin,.Lfe80-M3CG_Wr__note_procedure_origin
	.align 16
	.type	 M3CG_Wr__set_label,@function
M3CG_Wr__set_label:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3412
	pushl %ebx
	call M3CG_Wr__OutT
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe81:
	.size	 M3CG_Wr__set_label,.Lfe81-M3CG_Wr__set_label
	.align 16
	.type	 M3CG_Wr__jump,@function
M3CG_Wr__jump:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3428
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe82:
	.size	 M3CG_Wr__jump,.Lfe82-M3CG_Wr__jump
	.align 16
	.type	 M3CG_Wr__if_true,@function
M3CG_Wr__if_true:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3448
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe83:
	.size	 M3CG_Wr__if_true,.Lfe83-M3CG_Wr__if_true
	.align 16
	.type	 M3CG_Wr__if_false,@function
M3CG_Wr__if_false:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3468
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe84:
	.size	 M3CG_Wr__if_false,.Lfe84-M3CG_Wr__if_false
	.align 16
	.type	 M3CG_Wr__if_eq,@function
M3CG_Wr__if_eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3492
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe85:
	.size	 M3CG_Wr__if_eq,.Lfe85-M3CG_Wr__if_eq
	.align 16
	.type	 M3CG_Wr__if_ne,@function
M3CG_Wr__if_ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3512
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe86:
	.size	 M3CG_Wr__if_ne,.Lfe86-M3CG_Wr__if_ne
	.align 16
	.type	 M3CG_Wr__if_gt,@function
M3CG_Wr__if_gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3532
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe87:
	.size	 M3CG_Wr__if_gt,.Lfe87-M3CG_Wr__if_gt
	.align 16
	.type	 M3CG_Wr__if_ge,@function
M3CG_Wr__if_ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3552
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe88:
	.size	 M3CG_Wr__if_ge,.Lfe88-M3CG_Wr__if_ge
	.align 16
	.type	 M3CG_Wr__if_lt,@function
M3CG_Wr__if_lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3572
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe89:
	.size	 M3CG_Wr__if_lt,.Lfe89-M3CG_Wr__if_lt
	.align 16
	.type	 M3CG_Wr__if_le,@function
M3CG_Wr__if_le:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3592
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Lab
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe90:
	.size	 M3CG_Wr__if_le,.Lfe90-M3CG_Wr__if_le
	.align 16
	.type	 M3CG_Wr__case_jump,@function
M3CG_Wr__case_jump:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	pushl $MM_M3CG_Wr+3612
	pushl %esi
	call M3CG_Wr__Cmd
	movl 12(%ebp),%eax
	movl 4(%eax),%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__Int
	movl 12(%ebp),%eax
	xorl %ebx,%ebx
	addl $16,%esp
	movl 4(%eax),%edi
	decl %edi
	jmp .L145
	.align 16
.L146:
	movl 12(%ebp),%eax
	cmpl %ebx,4(%eax)
	ja .L147
	pushl $17954
	call _m3_fault
	.align 16
.L147:
	movl (%eax),%eax
	movl (%eax,%ebx,4),%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__Lab
	incl %ebx
	addl $8,%esp
.L145:
	cmpl %edi,%ebx
	jle .L146
	pushl %esi
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe91:
	.size	 M3CG_Wr__case_jump,.Lfe91-M3CG_Wr__case_jump
	.align 16
	.type	 M3CG_Wr__exit_proc,@function
M3CG_Wr__exit_proc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3636
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe92:
	.size	 M3CG_Wr__exit_proc,.Lfe92-M3CG_Wr__exit_proc
	.align 16
	.type	 M3CG_Wr__load,@function
M3CG_Wr__load:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3660
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe93:
	.size	 M3CG_Wr__load,.Lfe93-M3CG_Wr__load
	.align 16
	.type	 M3CG_Wr__store,@function
M3CG_Wr__store:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3680
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe94:
	.size	 M3CG_Wr__store,.Lfe94-M3CG_Wr__store
	.align 16
	.type	 M3CG_Wr__store_ref,@function
M3CG_Wr__store_ref:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3700
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe95:
	.size	 M3CG_Wr__store_ref,.Lfe95-M3CG_Wr__store_ref
	.align 16
	.type	 M3CG_Wr__load_address,@function
M3CG_Wr__load_address:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+3724
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__VName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe96:
	.size	 M3CG_Wr__load_address,.Lfe96-M3CG_Wr__load_address
	.align 16
	.type	 M3CG_Wr__load_indirect,@function
M3CG_Wr__load_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3752
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe97:
	.size	 M3CG_Wr__load_indirect,.Lfe97-M3CG_Wr__load_indirect
	.align 16
	.type	 M3CG_Wr__store_indirect,@function
M3CG_Wr__store_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3780
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe98:
	.size	 M3CG_Wr__store_indirect,.Lfe98-M3CG_Wr__store_indirect
	.align 16
	.type	 M3CG_Wr__store_ref_indirect,@function
M3CG_Wr__store_ref_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+3808
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe99:
	.size	 M3CG_Wr__store_ref_indirect,.Lfe99-M3CG_Wr__store_ref_indirect
	.align 16
	.type	 M3CG_Wr__load_nil,@function
M3CG_Wr__load_nil:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3840
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe100:
	.size	 M3CG_Wr__load_nil,.Lfe100-M3CG_Wr__load_nil
	.align 16
	.type	 M3CG_Wr__load_integer,@function
M3CG_Wr__load_integer:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3864
	pushl %ebx
	call M3CG_Wr__Cmd
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe101:
	.size	 M3CG_Wr__load_integer,.Lfe101-M3CG_Wr__load_integer
	.align 16
	.type	 M3CG_Wr__load_float,@function
M3CG_Wr__load_float:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3892
	pushl %ebx
	call M3CG_Wr__Cmd
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Flt
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe102:
	.size	 M3CG_Wr__load_float,.Lfe102-M3CG_Wr__load_float
	.align 16
	.type	 M3CG_Wr__eq,@function
M3CG_Wr__eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3916
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe103:
	.size	 M3CG_Wr__eq,.Lfe103-M3CG_Wr__eq
	.align 16
	.type	 M3CG_Wr__ne,@function
M3CG_Wr__ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3932
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe104:
	.size	 M3CG_Wr__ne,.Lfe104-M3CG_Wr__ne
	.align 16
	.type	 M3CG_Wr__gt,@function
M3CG_Wr__gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3948
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe105:
	.size	 M3CG_Wr__gt,.Lfe105-M3CG_Wr__gt
	.align 16
	.type	 M3CG_Wr__ge,@function
M3CG_Wr__ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3964
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe106:
	.size	 M3CG_Wr__ge,.Lfe106-M3CG_Wr__ge
	.align 16
	.type	 M3CG_Wr__lt,@function
M3CG_Wr__lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3980
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe107:
	.size	 M3CG_Wr__lt,.Lfe107-M3CG_Wr__lt
	.align 16
	.type	 M3CG_Wr__le,@function
M3CG_Wr__le:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+3996
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe108:
	.size	 M3CG_Wr__le,.Lfe108-M3CG_Wr__le
	.align 16
	.type	 M3CG_Wr__add,@function
M3CG_Wr__add:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4012
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe109:
	.size	 M3CG_Wr__add,.Lfe109-M3CG_Wr__add
	.align 16
	.type	 M3CG_Wr__subtract,@function
M3CG_Wr__subtract:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4028
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe110:
	.size	 M3CG_Wr__subtract,.Lfe110-M3CG_Wr__subtract
	.align 16
	.type	 M3CG_Wr__multiply,@function
M3CG_Wr__multiply:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4052
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe111:
	.size	 M3CG_Wr__multiply,.Lfe111-M3CG_Wr__multiply
	.align 16
	.type	 M3CG_Wr__divide,@function
M3CG_Wr__divide:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4076
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe112:
	.size	 M3CG_Wr__divide,.Lfe112-M3CG_Wr__divide
	.align 16
	.type	 M3CG_Wr__div,@function
M3CG_Wr__div:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movb 12(%ebp),%bl
	pushl $MM_M3CG_Wr+4096
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 16(%ebp),%al
	movl $MM_M3CG_Wr+944,%esi
	movl (%esi,%eax,4),%eax
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl (%esi,%eax,4),%eax
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	addl $32,%esp
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe113:
	.size	 M3CG_Wr__div,.Lfe113-M3CG_Wr__div
	.align 16
	.type	 M3CG_Wr__mod,@function
M3CG_Wr__mod:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movb 12(%ebp),%bl
	pushl $MM_M3CG_Wr+4112
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 16(%ebp),%al
	movl $MM_M3CG_Wr+944,%esi
	movl (%esi,%eax,4),%eax
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	xorl %eax,%eax
	movb 20(%ebp),%al
	movl (%esi,%eax,4),%eax
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	addl $32,%esp
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe114:
	.size	 M3CG_Wr__mod,.Lfe114-M3CG_Wr__mod
	.align 16
	.type	 M3CG_Wr__negate,@function
M3CG_Wr__negate:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4128
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe115:
	.size	 M3CG_Wr__negate,.Lfe115-M3CG_Wr__negate
	.align 16
	.type	 M3CG_Wr__abs,@function
M3CG_Wr__abs:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4148
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe116:
	.size	 M3CG_Wr__abs,.Lfe116-M3CG_Wr__abs
	.align 16
	.type	 M3CG_Wr__max,@function
M3CG_Wr__max:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4164
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe117:
	.size	 M3CG_Wr__max,.Lfe117-M3CG_Wr__max
	.align 16
	.type	 M3CG_Wr__min,@function
M3CG_Wr__min:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4180
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe118:
	.size	 M3CG_Wr__min,.Lfe118-M3CG_Wr__min
	.align 16
	.type	 M3CG_Wr__round,@function
M3CG_Wr__round:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4196
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe119:
	.size	 M3CG_Wr__round,.Lfe119-M3CG_Wr__round
	.align 16
	.type	 M3CG_Wr__trunc,@function
M3CG_Wr__trunc:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4216
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe120:
	.size	 M3CG_Wr__trunc,.Lfe120-M3CG_Wr__trunc
	.align 16
	.type	 M3CG_Wr__floor,@function
M3CG_Wr__floor:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4236
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe121:
	.size	 M3CG_Wr__floor,.Lfe121-M3CG_Wr__floor
	.align 16
	.type	 M3CG_Wr__ceiling,@function
M3CG_Wr__ceiling:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4256
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe122:
	.size	 M3CG_Wr__ceiling,.Lfe122-M3CG_Wr__ceiling
	.align 16
	.type	 M3CG_Wr__cvt_float,@function
M3CG_Wr__cvt_float:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4276
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe123:
	.size	 M3CG_Wr__cvt_float,.Lfe123-M3CG_Wr__cvt_float
	.align 16
	.type	 M3CG_Wr__set_union,@function
M3CG_Wr__set_union:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4300
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe124:
	.size	 M3CG_Wr__set_union,.Lfe124-M3CG_Wr__set_union
	.align 16
	.type	 M3CG_Wr__set_difference,@function
M3CG_Wr__set_difference:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4324
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe125:
	.size	 M3CG_Wr__set_difference,.Lfe125-M3CG_Wr__set_difference
	.align 16
	.type	 M3CG_Wr__set_intersection,@function
M3CG_Wr__set_intersection:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4352
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe126:
	.size	 M3CG_Wr__set_intersection,.Lfe126-M3CG_Wr__set_intersection
	.align 16
	.type	 M3CG_Wr__set_sym_difference,@function
M3CG_Wr__set_sym_difference:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4384
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe127:
	.size	 M3CG_Wr__set_sym_difference,.Lfe127-M3CG_Wr__set_sym_difference
	.align 16
	.type	 M3CG_Wr__set_member,@function
M3CG_Wr__set_member:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4416
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe128:
	.size	 M3CG_Wr__set_member,.Lfe128-M3CG_Wr__set_member
	.align 16
	.type	 M3CG_Wr__set_eq,@function
M3CG_Wr__set_eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4440
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe129:
	.size	 M3CG_Wr__set_eq,.Lfe129-M3CG_Wr__set_eq
	.align 16
	.type	 M3CG_Wr__set_ne,@function
M3CG_Wr__set_ne:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4460
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe130:
	.size	 M3CG_Wr__set_ne,.Lfe130-M3CG_Wr__set_ne
	.align 16
	.type	 M3CG_Wr__set_gt,@function
M3CG_Wr__set_gt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4480
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe131:
	.size	 M3CG_Wr__set_gt,.Lfe131-M3CG_Wr__set_gt
	.align 16
	.type	 M3CG_Wr__set_ge,@function
M3CG_Wr__set_ge:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4500
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe132:
	.size	 M3CG_Wr__set_ge,.Lfe132-M3CG_Wr__set_ge
	.align 16
	.type	 M3CG_Wr__set_lt,@function
M3CG_Wr__set_lt:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4520
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe133:
	.size	 M3CG_Wr__set_lt,.Lfe133-M3CG_Wr__set_lt
	.align 16
	.type	 M3CG_Wr__set_le,@function
M3CG_Wr__set_le:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4540
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe134:
	.size	 M3CG_Wr__set_le,.Lfe134-M3CG_Wr__set_le
	.align 16
	.type	 M3CG_Wr__set_range,@function
M3CG_Wr__set_range:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4560
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe135:
	.size	 M3CG_Wr__set_range,.Lfe135-M3CG_Wr__set_range
	.align 16
	.type	 M3CG_Wr__set_singleton,@function
M3CG_Wr__set_singleton:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4584
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe136:
	.size	 M3CG_Wr__set_singleton,.Lfe136-M3CG_Wr__set_singleton
	.align 16
	.type	 M3CG_Wr__not,@function
M3CG_Wr__not:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4612
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe137:
	.size	 M3CG_Wr__not,.Lfe137-M3CG_Wr__not
	.align 16
	.type	 M3CG_Wr__and,@function
M3CG_Wr__and:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4628
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe138:
	.size	 M3CG_Wr__and,.Lfe138-M3CG_Wr__and
	.align 16
	.type	 M3CG_Wr__or,@function
M3CG_Wr__or:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4644
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe139:
	.size	 M3CG_Wr__or,.Lfe139-M3CG_Wr__or
	.align 16
	.type	 M3CG_Wr__xor,@function
M3CG_Wr__xor:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4660
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe140:
	.size	 M3CG_Wr__xor,.Lfe140-M3CG_Wr__xor
	.align 16
	.type	 M3CG_Wr__shift,@function
M3CG_Wr__shift:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4676
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe141:
	.size	 M3CG_Wr__shift,.Lfe141-M3CG_Wr__shift
	.align 16
	.type	 M3CG_Wr__shift_left,@function
M3CG_Wr__shift_left:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4696
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe142:
	.size	 M3CG_Wr__shift_left,.Lfe142-M3CG_Wr__shift_left
	.align 16
	.type	 M3CG_Wr__shift_right,@function
M3CG_Wr__shift_right:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4720
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe143:
	.size	 M3CG_Wr__shift_right,.Lfe143-M3CG_Wr__shift_right
	.align 16
	.type	 M3CG_Wr__rotate,@function
M3CG_Wr__rotate:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4744
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe144:
	.size	 M3CG_Wr__rotate,.Lfe144-M3CG_Wr__rotate
	.align 16
	.type	 M3CG_Wr__rotate_left,@function
M3CG_Wr__rotate_left:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4764
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe145:
	.size	 M3CG_Wr__rotate_left,.Lfe145-M3CG_Wr__rotate_left
	.align 16
	.type	 M3CG_Wr__rotate_right,@function
M3CG_Wr__rotate_right:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4788
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl $2
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe146:
	.size	 M3CG_Wr__rotate_right,.Lfe146-M3CG_Wr__rotate_right
	.align 16
	.type	 M3CG_Wr__extract,@function
M3CG_Wr__extract:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4816
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe147:
	.size	 M3CG_Wr__extract,.Lfe147-M3CG_Wr__extract
	.align 16
	.type	 M3CG_Wr__extract_n,@function
M3CG_Wr__extract_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 16(%ebp),%esi
	pushl $MM_M3CG_Wr+4836
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe148:
	.size	 M3CG_Wr__extract_n,.Lfe148-M3CG_Wr__extract_n
	.align 16
	.type	 M3CG_Wr__extract_mn,@function
M3CG_Wr__extract_mn:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 16(%ebp),%esi
	movl 20(%ebp),%edi
	pushl $MM_M3CG_Wr+4860
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe149:
	.size	 M3CG_Wr__extract_mn,.Lfe149-M3CG_Wr__extract_mn
	.align 16
	.type	 M3CG_Wr__insert,@function
M3CG_Wr__insert:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4884
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe150:
	.size	 M3CG_Wr__insert,.Lfe150-M3CG_Wr__insert
	.align 16
	.type	 M3CG_Wr__insert_n,@function
M3CG_Wr__insert_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+4904
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe151:
	.size	 M3CG_Wr__insert_n,.Lfe151-M3CG_Wr__insert_n
	.align 16
	.type	 M3CG_Wr__insert_mn,@function
M3CG_Wr__insert_mn:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+4928
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe152:
	.size	 M3CG_Wr__insert_mn,.Lfe152-M3CG_Wr__insert_mn
	.align 16
	.type	 M3CG_Wr__swap,@function
M3CG_Wr__swap:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4952
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe153:
	.size	 M3CG_Wr__swap,.Lfe153-M3CG_Wr__swap
	.align 16
	.type	 M3CG_Wr__pop,@function
M3CG_Wr__pop:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4972
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe154:
	.size	 M3CG_Wr__pop,.Lfe154-M3CG_Wr__pop
	.align 16
	.type	 M3CG_Wr__copy_n,@function
M3CG_Wr__copy_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+4988
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe155:
	.size	 M3CG_Wr__copy_n,.Lfe155-M3CG_Wr__copy_n
	.align 16
	.type	 M3CG_Wr__copy,@function
M3CG_Wr__copy:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5008
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__Bool
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe156:
	.size	 M3CG_Wr__copy,.Lfe156-M3CG_Wr__copy
	.align 16
	.type	 M3CG_Wr__zero_n,@function
M3CG_Wr__zero_n:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5028
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe157:
	.size	 M3CG_Wr__zero_n,.Lfe157-M3CG_Wr__zero_n
	.align 16
	.type	 M3CG_Wr__zero,@function
M3CG_Wr__zero:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5048
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe158:
	.size	 M3CG_Wr__zero,.Lfe158-M3CG_Wr__zero
	.align 16
	.type	 M3CG_Wr__loophole,@function
M3CG_Wr__loophole:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5068
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe159:
	.size	 M3CG_Wr__loophole,.Lfe159-M3CG_Wr__loophole
	.align 16
	.type	 M3CG_Wr__assert_fault,@function
M3CG_Wr__assert_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5092
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe160:
	.size	 M3CG_Wr__assert_fault,.Lfe160-M3CG_Wr__assert_fault
	.align 16
	.type	 M3CG_Wr__narrow_fault,@function
M3CG_Wr__narrow_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5120
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe161:
	.size	 M3CG_Wr__narrow_fault,.Lfe161-M3CG_Wr__narrow_fault
	.align 16
	.type	 M3CG_Wr__return_fault,@function
M3CG_Wr__return_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5148
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe162:
	.size	 M3CG_Wr__return_fault,.Lfe162-M3CG_Wr__return_fault
	.align 16
	.type	 M3CG_Wr__case_fault,@function
M3CG_Wr__case_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5176
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe163:
	.size	 M3CG_Wr__case_fault,.Lfe163-M3CG_Wr__case_fault
	.align 16
	.type	 M3CG_Wr__typecase_fault,@function
M3CG_Wr__typecase_fault:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5200
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe164:
	.size	 M3CG_Wr__typecase_fault,.Lfe164-M3CG_Wr__typecase_fault
	.align 16
	.type	 M3CG_Wr__check_nil,@function
M3CG_Wr__check_nil:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5228
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe165:
	.size	 M3CG_Wr__check_nil,.Lfe165-M3CG_Wr__check_nil
	.align 16
	.type	 M3CG_Wr__check_lo,@function
M3CG_Wr__check_lo:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5252
	pushl %ebx
	call M3CG_Wr__Cmd
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe166:
	.size	 M3CG_Wr__check_lo,.Lfe166-M3CG_Wr__check_lo
	.align 16
	.type	 M3CG_Wr__check_hi,@function
M3CG_Wr__check_hi:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5276
	pushl %ebx
	call M3CG_Wr__Cmd
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe167:
	.size	 M3CG_Wr__check_hi,.Lfe167-M3CG_Wr__check_hi
	.align 16
	.type	 M3CG_Wr__check_range,@function
M3CG_Wr__check_range:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5300
	pushl %ebx
	call M3CG_Wr__Cmd
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	movl 16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TInt
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe168:
	.size	 M3CG_Wr__check_range,.Lfe168-M3CG_Wr__check_range
	.align 16
	.type	 M3CG_Wr__check_index,@function
M3CG_Wr__check_index:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5324
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe169:
	.size	 M3CG_Wr__check_index,.Lfe169-M3CG_Wr__check_index
	.align 16
	.type	 M3CG_Wr__check_eq,@function
M3CG_Wr__check_eq:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5348
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe170:
	.size	 M3CG_Wr__check_eq,.Lfe170-M3CG_Wr__check_eq
	.align 16
	.type	 M3CG_Wr__add_offset,@function
M3CG_Wr__add_offset:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5372
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe171:
	.size	 M3CG_Wr__add_offset,.Lfe171-M3CG_Wr__add_offset
	.align 16
	.type	 M3CG_Wr__index_address,@function
M3CG_Wr__index_address:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5396
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe172:
	.size	 M3CG_Wr__index_address,.Lfe172-M3CG_Wr__index_address
	.align 16
	.type	 M3CG_Wr__start_call_direct,@function
M3CG_Wr__start_call_direct:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+5424
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	xorl %eax,%eax
	movb 20(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	addl $32,%esp
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe173:
	.size	 M3CG_Wr__start_call_direct,.Lfe173-M3CG_Wr__start_call_direct
	.align 16
	.type	 M3CG_Wr__start_call_indirect,@function
M3CG_Wr__start_call_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movb 12(%ebp),%bl
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+5456
	pushl %esi
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %esi
	call M3CG_Wr__TName
	addl $16,%esp
	testl %edi,%edi
	jne .L232
	pushl $29124
	call _m3_fault
	.align 16
.L232:
	movl 4(%edi),%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__Int
	pushl %esi
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe174:
	.size	 M3CG_Wr__start_call_indirect,.Lfe174-M3CG_Wr__start_call_indirect
	.align 16
	.type	 M3CG_Wr__pop_param,@function
M3CG_Wr__pop_param:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5488
	pushl %ebx
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb 12(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe175:
	.size	 M3CG_Wr__pop_param,.Lfe175-M3CG_Wr__pop_param
	.align 16
	.type	 M3CG_Wr__pop_struct,@function
M3CG_Wr__pop_struct:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+5512
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %edi
	pushl %ebx
	call M3CG_Wr__Int
	pushl %ebx
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe176:
	.size	 M3CG_Wr__pop_struct,.Lfe176-M3CG_Wr__pop_struct
	.align 16
	.type	 M3CG_Wr__pop_static_link,@function
M3CG_Wr__pop_static_link:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $MM_M3CG_Wr+5536
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %ebx
	call M3CG_Wr__NL
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe177:
	.size	 M3CG_Wr__pop_static_link,.Lfe177-M3CG_Wr__pop_static_link
	.align 16
	.type	 M3CG_Wr__call_direct,@function
M3CG_Wr__call_direct:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5564
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	xorl %eax,%eax
	movb 16(%ebp),%al
	pushl %eax
	pushl %ebx
	call M3CG_Wr__TName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe178:
	.size	 M3CG_Wr__call_direct,.Lfe178-M3CG_Wr__call_direct
	.align 16
	.type	 M3CG_Wr__call_indirect,@function
M3CG_Wr__call_indirect:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movb 12(%ebp),%bl
	movl 16(%ebp),%edi
	pushl $MM_M3CG_Wr+5588
	pushl %esi
	call M3CG_Wr__Cmd
	xorl %eax,%eax
	movb %bl,%al
	pushl %eax
	pushl %esi
	call M3CG_Wr__TName
	addl $16,%esp
	testl %edi,%edi
	jne .L238
	pushl $29812
	call _m3_fault
	.align 16
.L238:
	movl 4(%edi),%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__Int
	pushl %esi
	call M3CG_Wr__NL
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe179:
	.size	 M3CG_Wr__call_indirect,.Lfe179-M3CG_Wr__call_indirect
	.align 16
	.type	 M3CG_Wr__load_procedure,@function
M3CG_Wr__load_procedure:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5616
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe180:
	.size	 M3CG_Wr__load_procedure,.Lfe180-M3CG_Wr__load_procedure
	.align 16
	.type	 M3CG_Wr__load_static_link,@function
M3CG_Wr__load_static_link:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%esi
	pushl $MM_M3CG_Wr+5644
	pushl %ebx
	call M3CG_Wr__Cmd
	pushl %esi
	pushl %ebx
	call M3CG_Wr__PName
	pushl %ebx
	call M3CG_Wr__NL
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe181:
	.size	 M3CG_Wr__load_static_link,.Lfe181-M3CG_Wr__load_static_link
	.align 16
	.type	 M3CG_Wr__comment,@function
M3CG_Wr__comment:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl 12(%ebp),%eax
	movl 16(%ebp),%edi
	movl $-1,-4(%ebp)
	leal -4(%ebp),%ebx
	pushl %ebx
	pushl %eax
	pushl %esi
	call M3CG_Wr__Cmt
	pushl %ebx
	pushl %edi
	pushl %esi
	call M3CG_Wr__Cmt
	pushl %ebx
	movl 20(%ebp),%edx
	pushl %edx
	pushl %esi
	call M3CG_Wr__Cmt
	addl $36,%esp
	pushl %ebx
	movl 24(%ebp),%edx
	pushl %edx
	pushl %esi
	call M3CG_Wr__Cmt
	pushl %ebx
	movl MI_Target+816,%eax
	pushl %eax
	pushl %esi
	call M3CG_Wr__Cmt
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe182:
	.size	 M3CG_Wr__comment,.Lfe182-M3CG_Wr__comment
	.align 16
	.type	 M3CG_Wr__Cmt,@function
M3CG_Wr__Cmt:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%edi
	movl 16(%ebp),%esi
	testl %edi,%edi
	je .L242
	pushl %edi
	movl MI_Text+56,%eax
	call *%eax
	xorl %ebx,%ebx
	decl %eax
	movl %eax,-8(%ebp)
	addl $4,%esp
	jmp .L244
	.align 16
.L245:
	pushl %ebx
	pushl %edi
	movl MI_Text+52,%eax
	call *%eax
	movb %al,-4(%ebp)
	addl $8,%esp
	cmpl $-1,(%esi)
	jne .L246
	pushl $MM_M3CG_Wr+5676
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	movl $0,(%esi)
	addl $8,%esp
.L246:
	xorl %eax,%eax
	movb -4(%ebp),%al
	cmpl $13,%eax
	je .L248
	cmpl $10,%eax
	jne .L249
	movl MI_Target+816,%eax
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutT
	movl $-1,(%esi)
	jmp .L251
	.align 16
.L249:
	pushl %eax
	movl 8(%ebp),%edx
	pushl %edx
	call M3CG_Wr__OutC
.L251:
	addl $8,%esp
.L248:
	incl %ebx
.L244:
	cmpl %ebx,-8(%ebp)
	jge .L245
.L242:
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe183:
	.size	 M3CG_Wr__Cmt,.Lfe183-M3CG_Wr__Cmt
	.align 16
	.type	 M_M3CG_Wr_t510c0439_INIT,@function
M_M3CG_Wr_t510c0439_INIT:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	movl %ebp,%esp
	movl $1,24(%eax)
	movl $1,28(%eax)
	movl $1,32(%eax)
	movl $1,36(%eax)
	popl %ebp
	ret
.Lfe184:
	.size	 M_M3CG_Wr_t510c0439_INIT,.Lfe184-M_M3CG_Wr_t510c0439_INIT
	.align 16
	.type	 M_M3CG_Wr_t510c0439_LINK,@function
M_M3CG_Wr_t510c0439_LINK:
	pushl %ebp
	movl %esp,%ebp
	movl MM_M3CG_Wr+1892,%eax
	movl MM_M3CG_Wr+580,%edx
	movl 52(%eax),%eax
	movl %ebp,%esp
	movl %edx,4(%eax)
	movl MM_M3CG_Wr+584,%edx
	movl %edx,8(%eax)
	movl MM_M3CG_Wr+588,%edx
	movl %edx,12(%eax)
	movl MM_M3CG_Wr+592,%edx
	movl %edx,16(%eax)
	movl MM_M3CG_Wr+596,%edx
	movl %edx,20(%eax)
	movl MM_M3CG_Wr+600,%edx
	movl %edx,24(%eax)
	movl MM_M3CG_Wr+604,%edx
	movl %edx,28(%eax)
	movl MM_M3CG_Wr+608,%edx
	movl %edx,32(%eax)
	movl MM_M3CG_Wr+612,%edx
	movl %edx,36(%eax)
	movl MM_M3CG_Wr+616,%edx
	movl %edx,40(%eax)
	movl MM_M3CG_Wr+620,%edx
	movl %edx,44(%eax)
	movl MM_M3CG_Wr+624,%edx
	movl %edx,48(%eax)
	movl MM_M3CG_Wr+628,%edx
	movl %edx,52(%eax)
	movl MM_M3CG_Wr+632,%edx
	movl %edx,56(%eax)
	movl MM_M3CG_Wr+636,%edx
	movl %edx,60(%eax)
	movl MM_M3CG_Wr+640,%edx
	movl %edx,64(%eax)
	movl MM_M3CG_Wr+644,%edx
	movl %edx,68(%eax)
	movl MM_M3CG_Wr+648,%edx
	movl %edx,72(%eax)
	movl MM_M3CG_Wr+652,%edx
	movl %edx,76(%eax)
	movl MM_M3CG_Wr+656,%edx
	movl %edx,80(%eax)
	movl MM_M3CG_Wr+660,%edx
	movl %edx,84(%eax)
	movl MM_M3CG_Wr+664,%edx
	movl %edx,88(%eax)
	movl MM_M3CG_Wr+668,%edx
	movl %edx,92(%eax)
	movl MM_M3CG_Wr+672,%edx
	movl %edx,96(%eax)
	movl MM_M3CG_Wr+676,%edx
	movl %edx,100(%eax)
	movl MM_M3CG_Wr+680,%edx
	movl %edx,104(%eax)
	movl MM_M3CG_Wr+684,%edx
	movl %edx,108(%eax)
	movl MM_M3CG_Wr+696,%edx
	movl %edx,116(%eax)
	movl MM_M3CG_Wr+700,%edx
	movl %edx,120(%eax)
	movl MM_M3CG_Wr+704,%edx
	movl %edx,124(%eax)
	movl MM_M3CG_Wr+712,%edx
	movl %edx,128(%eax)
	movl MM_M3CG_Wr+716,%edx
	movl %edx,132(%eax)
	movl MM_M3CG_Wr+720,%edx
	movl %edx,136(%eax)
	movl MM_M3CG_Wr+724,%edx
	movl %edx,140(%eax)
	movl MM_M3CG_Wr+728,%edx
	movl %edx,144(%eax)
	movl MM_M3CG_Wr+732,%edx
	movl %edx,148(%eax)
	movl MM_M3CG_Wr+736,%edx
	movl %edx,152(%eax)
	movl MM_M3CG_Wr+740,%edx
	movl %edx,156(%eax)
	movl MM_M3CG_Wr+744,%edx
	movl %edx,160(%eax)
	movl MM_M3CG_Wr+688,%edx
	movl %edx,112(%eax)
	movl MM_M3CG_Wr+748,%edx
	movl %edx,164(%eax)
	movl MM_M3CG_Wr+752,%edx
	movl %edx,168(%eax)
	movl MM_M3CG_Wr+756,%edx
	movl %edx,172(%eax)
	movl MM_M3CG_Wr+760,%edx
	movl %edx,176(%eax)
	movl MM_M3CG_Wr+764,%edx
	movl %edx,180(%eax)
	movl MM_M3CG_Wr+768,%edx
	movl %edx,184(%eax)
	movl MM_M3CG_Wr+772,%edx
	movl %edx,188(%eax)
	movl MM_M3CG_Wr+776,%edx
	movl %edx,192(%eax)
	movl MM_M3CG_Wr+780,%edx
	movl %edx,196(%eax)
	movl MM_M3CG_Wr+788,%edx
	movl %edx,200(%eax)
	movl MM_M3CG_Wr+792,%edx
	movl %edx,204(%eax)
	movl MM_M3CG_Wr+796,%edx
	movl %edx,208(%eax)
	movl MM_M3CG_Wr+800,%edx
	movl %edx,212(%eax)
	movl MM_M3CG_Wr+804,%edx
	movl %edx,216(%eax)
	movl MM_M3CG_Wr+808,%edx
	movl %edx,220(%eax)
	movl MM_M3CG_Wr+812,%edx
	movl %edx,224(%eax)
	movl MM_M3CG_Wr+816,%edx
	movl %edx,228(%eax)
	movl MM_M3CG_Wr+820,%edx
	movl %edx,232(%eax)
	movl MM_M3CG_Wr+824,%edx
	movl %edx,236(%eax)
	movl MM_M3CG_Wr+828,%edx
	movl %edx,240(%eax)
	movl MM_M3CG_Wr+832,%edx
	movl %edx,244(%eax)
	movl MM_M3CG_Wr+836,%edx
	movl %edx,248(%eax)
	movl MM_M3CG_Wr+840,%edx
	movl %edx,252(%eax)
	movl MM_M3CG_Wr+844,%edx
	movl %edx,256(%eax)
	movl MM_M3CG_Wr+848,%edx
	movl %edx,260(%eax)
	movl MM_M3CG_Wr+852,%edx
	movl %edx,264(%eax)
	movl MM_M3CG_Wr+856,%edx
	movl %edx,268(%eax)
	movl MM_M3CG_Wr+860,%edx
	movl %edx,272(%eax)
	movl MM_M3CG_Wr+864,%edx
	movl %edx,276(%eax)
	movl MM_M3CG_Wr+868,%edx
	movl %edx,288(%eax)
	movl MM_M3CG_Wr+872,%edx
	movl %edx,296(%eax)
	movl MM_M3CG_Wr+876,%edx
	movl %edx,280(%eax)
	movl MM_M3CG_Wr+880,%edx
	movl %edx,284(%eax)
	movl MM_M3CG_Wr+884,%edx
	movl %edx,292(%eax)
	movl MM_M3CG_Wr+888,%edx
	movl %edx,300(%eax)
	movl MM_M3CG_Wr+892,%edx
	movl %edx,304(%eax)
	movl MM_M3CG_Wr+896,%edx
	movl %edx,308(%eax)
	movl MM_M3CG_Wr+900,%edx
	movl %edx,312(%eax)
	movl MM_M3CG_Wr+904,%edx
	movl %edx,316(%eax)
	movl MM_M3CG_Wr+908,%edx
	movl %edx,320(%eax)
	movl MM_M3CG_Wr+912,%edx
	movl %edx,324(%eax)
	movl MM_M3CG_Wr+916,%edx
	movl %edx,328(%eax)
	movl MM_M3CG_Wr+920,%edx
	movl %edx,332(%eax)
	movl MM_M3CG_Wr+924,%edx
	movl %edx,336(%eax)
	movl MM_M3CG_Wr+928,%edx
	movl %edx,340(%eax)
	movl MM_M3CG_Wr+932,%edx
	movl %edx,344(%eax)
	movl MM_M3CG_Wr+936,%edx
	movl %edx,348(%eax)
	movl MM_M3CG_Wr+940,%edx
	movl %edx,352(%eax)
	movl MM_M3CG_Wr+956,%edx
	movl %edx,392(%eax)
	movl MM_M3CG_Wr+960,%edx
	movl %edx,396(%eax)
	movl MM_M3CG_Wr+964,%edx
	movl %edx,356(%eax)
	movl MM_M3CG_Wr+968,%edx
	movl %edx,360(%eax)
	movl MM_M3CG_Wr+972,%edx
	movl %edx,364(%eax)
	movl MM_M3CG_Wr+976,%edx
	movl %edx,368(%eax)
	movl MM_M3CG_Wr+980,%edx
	movl %edx,372(%eax)
	movl MM_M3CG_Wr+984,%edx
	movl %edx,376(%eax)
	movl MM_M3CG_Wr+988,%edx
	movl %edx,380(%eax)
	movl MM_M3CG_Wr+992,%edx
	movl %edx,384(%eax)
	movl MM_M3CG_Wr+996,%edx
	movl %edx,388(%eax)
	movl MM_M3CG_Wr+1000,%edx
	movl %edx,400(%eax)
	movl MM_M3CG_Wr+1004,%edx
	movl %edx,404(%eax)
	movl MM_M3CG_Wr+1008,%edx
	movl %edx,408(%eax)
	movl MM_M3CG_Wr+1012,%edx
	movl %edx,412(%eax)
	movl MM_M3CG_Wr+1016,%edx
	movl %edx,416(%eax)
	movl MM_M3CG_Wr+1020,%edx
	movl %edx,420(%eax)
	movl MM_M3CG_Wr+1024,%edx
	movl %edx,424(%eax)
	movl MM_M3CG_Wr+1028,%edx
	movl %edx,436(%eax)
	movl MM_M3CG_Wr+1032,%edx
	movl %edx,440(%eax)
	movl MM_M3CG_Wr+1036,%edx
	movl %edx,428(%eax)
	movl MM_M3CG_Wr+1040,%edx
	movl %edx,432(%eax)
	movl MM_M3CG_Wr+1044,%edx
	movl %edx,444(%eax)
	movl MM_M3CG_Wr+1048,%edx
	movl %edx,448(%eax)
	movl MM_M3CG_Wr+1052,%edx
	movl %edx,452(%eax)
	movl MM_M3CG_Wr+1056,%edx
	movl %edx,456(%eax)
	movl MM_M3CG_Wr+1060,%edx
	movl %edx,460(%eax)
	movl MM_M3CG_Wr+1064,%edx
	movl %edx,464(%eax)
	movl MM_M3CG_Wr+1068,%edx
	movl %edx,468(%eax)
	movl MM_M3CG_Wr+1072,%edx
	movl %edx,472(%eax)
	movl MM_M3CG_Wr+1076,%edx
	movl %edx,476(%eax)
	movl MM_M3CG_Wr+1080,%edx
	movl %edx,480(%eax)
	movl MM_M3CG_Wr+1084,%edx
	movl %edx,484(%eax)
	movl MM_M3CG_Wr+1088,%edx
	movl %edx,488(%eax)
	movl MM_M3CG_Wr+1092,%edx
	movl %edx,492(%eax)
	movl MM_M3CG_Wr+1096,%edx
	movl %edx,496(%eax)
	movl MM_M3CG_Wr+1100,%edx
	movl %edx,500(%eax)
	movl MM_M3CG_Wr+1104,%edx
	movl %edx,504(%eax)
	movl MM_M3CG_Wr+1108,%edx
	movl %edx,508(%eax)
	movl MM_M3CG_Wr+1112,%edx
	movl %edx,512(%eax)
	movl MM_M3CG_Wr+1116,%edx
	movl %edx,516(%eax)
	movl MM_M3CG_Wr+1120,%edx
	movl %edx,520(%eax)
	movl MM_M3CG_Wr+1128,%edx
	movl %edx,528(%eax)
	movl MM_M3CG_Wr+1124,%edx
	movl %edx,524(%eax)
	movl MM_M3CG_Wr+1136,%edx
	movl %edx,536(%eax)
	movl MM_M3CG_Wr+1132,%edx
	movl %edx,532(%eax)
	movl MM_M3CG_Wr+1140,%edx
	movl %edx,540(%eax)
	movl MM_M3CG_Wr+1144,%edx
	movl %edx,544(%eax)
	movl MM_M3CG_Wr+1148,%edx
	movl %edx,548(%eax)
	movl MM_M3CG_Wr+1152,%edx
	movl %edx,552(%eax)
	movl MM_M3CG_Wr+1156,%edx
	movl %edx,556(%eax)
	movl MM_M3CG_Wr+1160,%edx
	movl %edx,560(%eax)
	movl MM_M3CG_Wr+1164,%edx
	movl %edx,564(%eax)
	movl MM_M3CG_Wr+1168,%edx
	movl %edx,568(%eax)
	movl MM_M3CG_Wr+1172,%edx
	movl %edx,572(%eax)
	movl MM_M3CG_Wr+1176,%edx
	movl %edx,576(%eax)
	movl MM_M3CG_Wr+1180,%edx
	movl %edx,580(%eax)
	movl MM_M3CG_Wr+1184,%edx
	movl %edx,584(%eax)
	movl MM_M3CG_Wr+1188,%edx
	movl %edx,588(%eax)
	movl MM_M3CG_Wr+1192,%edx
	movl %edx,592(%eax)
	movl MM_M3CG_Wr+1196,%edx
	movl %edx,596(%eax)
	movl MM_M3CG_Wr+1216,%edx
	movl %edx,600(%eax)
	movl MM_M3CG_Wr+1200,%edx
	movl %edx,604(%eax)
	movl MM_M3CG_Wr+1220,%edx
	movl %edx,608(%eax)
	movl MM_M3CG_Wr+1204,%edx
	movl %edx,612(%eax)
	movl MM_M3CG_Wr+1208,%edx
	movl %edx,616(%eax)
	movl MM_M3CG_Wr+1212,%edx
	movl %edx,620(%eax)
	movl MM_M3CG_Wr+1224,%edx
	movl %edx,624(%eax)
	movl MM_M3CG_Wr+1228,%edx
	movl %edx,628(%eax)
	movl MM_M3CG_Wr+1232,%edx
	movl %edx,632(%eax)
	popl %ebp
	ret
.Lfe185:
	.size	 M_M3CG_Wr_t510c0439_LINK,.Lfe185-M_M3CG_Wr_t510c0439_LINK
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_M3CG_Wr
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe186:
	.size	 _m3_fault,.Lfe186-_m3_fault
.globl MM_M3CG_Wr
.data
	.align 4
	.type	 MM_M3CG_Wr,@object
	.size	 MM_M3CG_Wr,10012
MM_M3CG_Wr:
	.long MM_M3CG_Wr+9736
	.long MM_M3CG_Wr+44
	.long MM_M3CG_Wr+1756
	.zero	8
	.long MM_M3CG_Wr+7536
	.zero	28
	.long -414855587
.byte 25
.byte 47
.byte 47
.byte 224
.byte 68
.byte 225
.byte 106
.byte 7
	.long 1
	.zero	4
	.long 4
	.long 4
	.zero	4
	.long 0
	.zero	12
	.long MM_M3CG_Wr+9989
	.zero	4
	.long MM_M3CG_Wr+9991
	.zero	8
	.long -68189575
	.zero	16
	.long MM_M3CG_Wr+9995
	.long MM_M3CG_Wr+148
	.zero	8
	.long -584715560
.byte 119
.byte 24
.byte 24
.byte 197
.byte 175
.byte 234
.byte 61
.byte 24
	.long 1
	.zero	4
	.long 4
	.long 4
	.zero	4
	.long 0
	.zero	12
	.long MM_M3CG_Wr+9968
	.zero	4
	.long MM_M3CG_Wr+9970
	.zero	8
	.long 1690609525
	.zero	16
	.long MM_M3CG_Wr+9974
	.long MM_M3CG_Wr+252
	.zero	8
	.long 2075417029
.byte 149
.byte 129
.byte 131
.byte 116
.byte 80
.byte 216
.byte 55
.byte 15
	.long 1
	.zero	4
	.long 16
	.long 4
	.zero	20
	.long MM_M3CG_Wr+9922
	.long MM_M3CG_Wr+9927
	.long MM_M3CG_Wr+9931
	.zero	28
	.long MM_M3CG_Wr+9948
	.long MM_M3CG_Wr+356
	.zero	8
	.long 1359742009
.byte 60
.byte 214
.byte 74
.byte 91
.byte 5
.byte 210
.byte 70
.byte 10
	.long 1
	.zero	4
	.long 32
	.long 4
	.zero	4
	.long 0
	.zero	12
	.long MM_M3CG_Wr+9875
	.long MM_M3CG_Wr+9884
	.long MM_M3CG_Wr+9889
	.long M_M3CG_Wr_t510c0439_INIT
	.long M_M3CG_Wr_t510c0439_LINK
	.long -800126780
	.zero	16
	.long MM_M3CG_Wr+9912
	.zero	4
	.long M3CG_Wr__NL
	.long M3CG_Wr__Cmd
	.long M3CG_Wr__ZName
	.long M3CG_Wr__VName
	.long M3CG_Wr__PName
	.long M3CG_Wr__TName
	.long M3CG_Wr__Flt
	.long M3CG_Wr__Bool
	.long M3CG_Wr__Lab
	.long M3CG_Wr__Tipe
	.long M3CG_Wr__Int
	.long M3CG_Wr__TInt
	.long M3CG_Wr__BInt
	.zero	4
	.long -5
	.long -268435457
	.long 2147483647
	.zero	16
.byte 48
.byte 49
.byte 50
.byte 51
.byte 52
.byte 53
.byte 54
.byte 55
	.long M3CG_Wr__Txt
	.long M3CG_Wr__Flush
	.long M3CG_Wr__OutC
	.long M3CG_Wr__OutT
	.long M3CG_Wr__OutN
	.long M3CG_Wr__OutS
	.long M3CG_Wr__OutI
	.long M3CG_Wr__next_label
	.long M3CG_Wr__set_error_handler
	.long M3CG_Wr__begin_unit
	.long M3CG_Wr__end_unit
	.long M3CG_Wr__import_unit
	.long M3CG_Wr__export_unit
	.long M3CG_Wr__set_source_file
	.long M3CG_Wr__set_source_line
	.long M3CG_Wr__declare_typename
	.long M3CG_Wr__declare_array
	.long M3CG_Wr__declare_open_array
	.long M3CG_Wr__declare_enum
	.long M3CG_Wr__declare_enum_elt
	.long M3CG_Wr__declare_packed
	.long M3CG_Wr__declare_record
	.long M3CG_Wr__declare_field
	.long M3CG_Wr__declare_set
	.long M3CG_Wr__declare_subrange
	.long M3CG_Wr__declare_pointer
	.long M3CG_Wr__declare_indirect
	.long M3CG_Wr__declare_proctype
	.long M3CG_Wr__declare_formal
	.long M3CG_Wr__declare_raises
	.long M3CG_Wr__declare_object
	.long M3CG_Wr__declare_method
	.long M3CG_Wr__declare_opaque
	.long M3CG_Wr__reveal_opaque
	.long M3CG_Wr__declare_exception
	.long M3CG_Wr__GetRuntimeHook
	.long M3CG_Wr__set_runtime_proc
	.long M3CG_Wr__set_runtime_hook
	.long M3CG_Wr__get_runtime_hook
	.long M3CG_Wr__NewVar
	.long M3CG_Wr__import_global
	.long M3CG_Wr__declare_segment
	.long M3CG_Wr__bind_segment
	.long M3CG_Wr__declare_global
	.long M3CG_Wr__declare_constant
	.long M3CG_Wr__declare_local
	.long M3CG_Wr__declare_param
	.long M3CG_Wr__declare_temp
	.long M3CG_Wr__free_temp
	.long M3CG_Wr__begin_init
	.long M3CG_Wr__end_init
	.long M3CG_Wr__init_int
	.long M3CG_Wr__init_proc
	.long M3CG_Wr__init_label
	.long M3CG_Wr__init_var
	.long M3CG_Wr__init_offset
	.long M3CG_Wr__init_chars
	.long M3CG_Wr__init_float
	.long M3CG_Wr__NewProc
	.long M3CG_Wr__import_procedure
	.long M3CG_Wr__declare_procedure
	.long M3CG_Wr__begin_procedure
	.long M3CG_Wr__end_procedure
	.long M3CG_Wr__begin_block
	.long M3CG_Wr__end_block
	.long M3CG_Wr__note_procedure_origin
	.long M3CG_Wr__set_label
	.long M3CG_Wr__jump
	.long M3CG_Wr__if_true
	.long M3CG_Wr__if_false
	.long M3CG_Wr__if_eq
	.long M3CG_Wr__if_ne
	.long M3CG_Wr__if_gt
	.long M3CG_Wr__if_ge
	.long M3CG_Wr__if_lt
	.long M3CG_Wr__if_le
	.long M3CG_Wr__case_jump
	.long M3CG_Wr__exit_proc
	.long M3CG_Wr__load
	.long M3CG_Wr__store
	.long M3CG_Wr__store_ref
	.long M3CG_Wr__load_address
	.long M3CG_Wr__load_indirect
	.long M3CG_Wr__store_indirect
	.long M3CG_Wr__store_ref_indirect
	.long M3CG_Wr__load_nil
	.long M3CG_Wr__load_integer
	.long M3CG_Wr__load_float
	.long M3CG_Wr__eq
	.long M3CG_Wr__ne
	.long M3CG_Wr__gt
	.long M3CG_Wr__ge
	.long M3CG_Wr__lt
	.long M3CG_Wr__le
	.long M3CG_Wr__add
	.long M3CG_Wr__subtract
	.long M3CG_Wr__multiply
	.long M3CG_Wr__divide
	.long MM_M3CG_Wr+1712
	.long MM_M3CG_Wr+1728
	.long MM_M3CG_Wr+1744
	.long M3CG_Wr__div
	.long M3CG_Wr__mod
	.long M3CG_Wr__negate
	.long M3CG_Wr__abs
	.long M3CG_Wr__max
	.long M3CG_Wr__min
	.long M3CG_Wr__round
	.long M3CG_Wr__trunc
	.long M3CG_Wr__floor
	.long M3CG_Wr__ceiling
	.long M3CG_Wr__cvt_float
	.long M3CG_Wr__set_union
	.long M3CG_Wr__set_difference
	.long M3CG_Wr__set_intersection
	.long M3CG_Wr__set_sym_difference
	.long M3CG_Wr__set_member
	.long M3CG_Wr__set_eq
	.long M3CG_Wr__set_ne
	.long M3CG_Wr__set_gt
	.long M3CG_Wr__set_ge
	.long M3CG_Wr__set_lt
	.long M3CG_Wr__set_le
	.long M3CG_Wr__set_range
	.long M3CG_Wr__set_singleton
	.long M3CG_Wr__not
	.long M3CG_Wr__and
	.long M3CG_Wr__or
	.long M3CG_Wr__xor
	.long M3CG_Wr__shift
	.long M3CG_Wr__shift_left
	.long M3CG_Wr__shift_right
	.long M3CG_Wr__rotate
	.long M3CG_Wr__rotate_left
	.long M3CG_Wr__rotate_right
	.long M3CG_Wr__extract
	.long M3CG_Wr__extract_n
	.long M3CG_Wr__extract_mn
	.long M3CG_Wr__insert
	.long M3CG_Wr__insert_n
	.long M3CG_Wr__insert_mn
	.long M3CG_Wr__swap
	.long M3CG_Wr__pop
	.long M3CG_Wr__copy_n
	.long M3CG_Wr__copy
	.long M3CG_Wr__zero_n
	.long M3CG_Wr__zero
	.long M3CG_Wr__loophole
	.long M3CG_Wr__assert_fault
	.long M3CG_Wr__narrow_fault
	.long M3CG_Wr__return_fault
	.long M3CG_Wr__case_fault
	.long M3CG_Wr__typecase_fault
	.long M3CG_Wr__check_nil
	.long M3CG_Wr__check_lo
	.long M3CG_Wr__check_hi
	.long M3CG_Wr__check_range
	.long M3CG_Wr__check_index
	.long M3CG_Wr__check_eq
	.long M3CG_Wr__add_offset
	.long M3CG_Wr__index_address
	.long M3CG_Wr__start_call_direct
	.long M3CG_Wr__start_call_indirect
	.long M3CG_Wr__pop_param
	.long M3CG_Wr__pop_struct
	.long M3CG_Wr__pop_static_link
	.long M3CG_Wr__call_direct
	.long M3CG_Wr__call_indirect
	.long M3CG_Wr__load_procedure
	.long M3CG_Wr__load_static_link
	.long M3CG_Wr__comment
	.long M3CG_Wr__Cmt
	.long M3CG_Wr__New
	.long MM_M3CG_Wr+1312
	.long MM_M3CG_Wr+1332
	.long MM_M3CG_Wr+1352
	.long MM_M3CG_Wr+1372
	.long MM_M3CG_Wr+1392
	.long MM_M3CG_Wr+1412
	.long MM_M3CG_Wr+1432
	.long MM_M3CG_Wr+1452
	.long MM_M3CG_Wr+1472
	.long MM_M3CG_Wr+1492
	.long MM_M3CG_Wr+1516
	.long MM_M3CG_Wr+1536
	.long MM_M3CG_Wr+1560
	.long MM_M3CG_Wr+1584
	.long MM_M3CG_Wr+1608
	.long MM_M3CG_Wr+1628
	.long 2
	.long MM_M3CG_Wr+1320
	.long 6
	.ascii	" Addr"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+1340
	.long 6
	.ascii	" Word"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+1360
	.long 5
	.ascii	" Int"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+1380
	.long 6
	.ascii	" Reel"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+1400
	.long 7
	.ascii	" LReel"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1420
	.long 7
	.ascii	" XReel"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1440
	.long 7
	.ascii	" Int.8"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1460
	.long 8
	.ascii	" Int.16"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1480
	.long 8
	.ascii	" Int.32"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1500
	.long 9
	.ascii	" Int.32D"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+1524
	.long 8
	.ascii	" Word.8"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1544
	.long 9
	.ascii	" Word.16"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+1568
	.long 9
	.ascii	" Word.32"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+1592
	.long 10
	.ascii	" Word.32D"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+1616
	.long 8
	.ascii	" Struct"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1636
	.long 6
	.ascii	" Void"
	.zero	3
	.long MM_M3CG_Wr+1660
	.long MM_M3CG_Wr+1676
	.long MM_M3CG_Wr+1692
	.long 2
	.long MM_M3CG_Wr+1668
	.long 4
	.ascii	" R "
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1684
	.long 4
	.ascii	" L "
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1700
	.long 4
	.ascii	" X "
	.zero	1
.byte 70
.byte 84
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1720
	.long 3
	.ascii	" P"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1736
	.long 3
	.ascii	" N"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1752
	.long 3
	.ascii	" X"
	.zero	2
	.long MM_M3CG_Wr+1816
	.long -414855587
	.long 2
	.long MM_M3CG_Wr+1776
	.long 3
	.ascii	" *"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1792
	.long 4
	.ascii	" v."
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1808
	.long 7
	.ascii	" v.???"
	.zero	2
	.long MM_M3CG_Wr+1892
	.long -584715560
	.long 2
	.long MM_M3CG_Wr+1836
	.long 4
	.ascii	" p."
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1852
	.long 7
	.ascii	" p.???"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1872
	.long 3
	.ascii	"L."
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1888
	.long 2
	.ascii	" "
	.zero	3
	.long MM_M3CG_Wr+1900
	.long 1359742009
	.long MM_M3CG_Wr+2664
	.long 1969248738
	.long 2
	.long MM_M3CG_Wr+1920
	.long 11
	.ascii	"begin_unit"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+1944
	.long 9
	.ascii	"end_unit"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+1968
	.long 12
	.ascii	"import_unit"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+1992
	.long 12
	.ascii	"export_unit"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+2016
	.long 16
	.ascii	"\t\t\t\t\t-----FILE "
	.zero	1
	.long 2
	.long MM_M3CG_Wr+2044
	.long 8
	.ascii	"  -----"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+2064
	.long 15
	.ascii	"\t\t\t\t\t-----LINE"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2092
	.long 17
	.ascii	"declare_typename"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2124
	.long 14
	.ascii	"declare_array"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+2152
	.long 19
	.ascii	"declare_open_array"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2184
	.long 13
	.ascii	"declare_enum"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2212
	.long 17
	.ascii	"declare_enum_elt"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2244
	.long 15
	.ascii	"declare_packed"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2272
	.long 15
	.ascii	"declare_record"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2300
	.long 14
	.ascii	"declare_field"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+2328
	.long 12
	.ascii	"declare_set"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+2352
	.long 17
	.ascii	"declare_subrange"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2384
	.long 16
	.ascii	"declare_pointer"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+2412
	.long 17
	.ascii	"declare_indirect"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2444
	.long 17
	.ascii	"declare_proctype"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2476
	.long 15
	.ascii	"declare_formal"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2504
	.long 15
	.ascii	"declare_raises"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2532
	.long 15
	.ascii	"declare_object"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2560
	.long 15
	.ascii	"declare_method"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2588
	.long 15
	.ascii	"declare_opaque"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2616
	.long 14
	.ascii	"reveal_opaque"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+2644
	.long 18
	.ascii	"declare_exception"
	.zero	7
	.long 2075417029
	.long 2
	.long MM_M3CG_Wr+2684
	.long 17
	.ascii	"set_runtime_proc"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2716
	.long 17
	.ascii	"set_runtime_hook"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2748
	.long 14
	.ascii	"import_global"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+2776
	.long 16
	.ascii	"declare_segment"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+2804
	.long 13
	.ascii	"bind_segment"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2832
	.long 15
	.ascii	"declare_global"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+2860
	.long 17
	.ascii	"declare_constant"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2892
	.long 14
	.ascii	"declare_local"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+2920
	.long 14
	.ascii	"declare_param"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+2948
	.long 13
	.ascii	"declare_temp"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+2976
	.long 10
	.ascii	"free_temp"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3000
	.long 11
	.ascii	"begin_init"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3024
	.long 9
	.ascii	"end_init"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3048
	.long 9
	.ascii	"init_int"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3072
	.long 10
	.ascii	"init_proc"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3096
	.long 11
	.ascii	"init_label"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3120
	.long 9
	.ascii	"init_var"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3144
	.long 12
	.ascii	"init_offset"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+3168
	.long 11
	.ascii	"init_chars"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3192
	.long 11
	.ascii	"init_float"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3216
	.long 17
	.ascii	"import_procedure"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3248
	.long 18
	.ascii	"declare_procedure"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3280
	.long 16
	.ascii	"begin_procedure"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+3308
	.long 14
	.ascii	"end_procedure"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3336
	.long 12
	.ascii	"begin_block"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+3360
	.long 10
	.ascii	"end_block"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3384
	.long 22
	.ascii	"note_procedure_origin"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3420
	.long 2
	.ascii	"."
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3436
	.long 5
	.ascii	"jump"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3456
	.long 8
	.ascii	"if_true"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+3476
	.long 9
	.ascii	"if_false"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3500
	.long 6
	.ascii	"if_eq"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3520
	.long 6
	.ascii	"if_ne"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3540
	.long 6
	.ascii	"if_gt"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3560
	.long 6
	.ascii	"if_ge"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3580
	.long 6
	.ascii	"if_lt"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3600
	.long 6
	.ascii	"if_le"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3620
	.long 10
	.ascii	"case_jump"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3644
	.long 10
	.ascii	"exit_proc"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3668
	.long 5
	.ascii	"load"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3688
	.long 6
	.ascii	"store"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3708
	.long 10
	.ascii	"store_ref"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3732
	.long 13
	.ascii	"load_address"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3760
	.long 14
	.ascii	"load_indirect"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+3788
	.long 15
	.ascii	"store_indirect"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3816
	.long 19
	.ascii	"store_ref_indirect"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3848
	.long 9
	.ascii	"load_nil"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3872
	.long 13
	.ascii	"load_integer"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+3900
	.long 11
	.ascii	"load_float"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3924
	.long 3
	.ascii	"eq"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3940
	.long 3
	.ascii	"ne"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3956
	.long 3
	.ascii	"gt"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3972
	.long 3
	.ascii	"ge"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+3988
	.long 3
	.ascii	"lt"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4004
	.long 3
	.ascii	"le"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4020
	.long 4
	.ascii	"add"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4036
	.long 9
	.ascii	"subtract"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+4060
	.long 9
	.ascii	"multiply"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+4084
	.long 7
	.ascii	"divide"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4104
	.long 4
	.ascii	"div"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4120
	.long 4
	.ascii	"mod"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4136
	.long 7
	.ascii	"negate"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4156
	.long 4
	.ascii	"abs"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4172
	.long 4
	.ascii	"max"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4188
	.long 4
	.ascii	"min"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4204
	.long 6
	.ascii	"round"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4224
	.long 6
	.ascii	"trunc"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4244
	.long 6
	.ascii	"floor"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4264
	.long 8
	.ascii	"ceiling"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4284
	.long 10
	.ascii	"cvt_float"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4308
	.long 10
	.ascii	"set_union"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4332
	.long 15
	.ascii	"set_difference"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4360
	.long 17
	.ascii	"set_intersection"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+4392
	.long 19
	.ascii	"set_sym_difference"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4424
	.long 11
	.ascii	"set_member"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4448
	.long 7
	.ascii	"set_eq"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4468
	.long 7
	.ascii	"set_ne"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4488
	.long 7
	.ascii	"set_gt"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4508
	.long 7
	.ascii	"set_ge"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4528
	.long 7
	.ascii	"set_lt"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4548
	.long 7
	.ascii	"set_le"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4568
	.long 10
	.ascii	"set_range"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4592
	.long 14
	.ascii	"set_singleton"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4620
	.long 4
	.ascii	"not"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4636
	.long 4
	.ascii	"and"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4652
	.long 3
	.ascii	"or"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4668
	.long 4
	.ascii	"xor"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4684
	.long 6
	.ascii	"shift"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4704
	.long 11
	.ascii	"shift_left"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4728
	.long 12
	.ascii	"shift_right"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4752
	.long 7
	.ascii	"rotate"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4772
	.long 12
	.ascii	"rotate_left"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4796
	.long 13
	.ascii	"rotate_right"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+4824
	.long 8
	.ascii	"extract"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4844
	.long 10
	.ascii	"extract_n"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4868
	.long 11
	.ascii	"extract_mn"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4892
	.long 7
	.ascii	"insert"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+4912
	.long 9
	.ascii	"insert_n"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+4936
	.long 10
	.ascii	"insert_mn"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+4960
	.long 5
	.ascii	"swap"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+4980
	.long 4
	.ascii	"pop"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+4996
	.long 7
	.ascii	"copy_n"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5016
	.long 5
	.ascii	"copy"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5036
	.long 7
	.ascii	"zero_n"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5056
	.long 5
	.ascii	"zero"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5076
	.long 9
	.ascii	"loophole"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5100
	.long 13
	.ascii	"assert_fault"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5128
	.long 13
	.ascii	"narrow_fault"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5156
	.long 13
	.ascii	"return_fault"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5184
	.long 11
	.ascii	"case_fault"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5208
	.long 15
	.ascii	"typecase_fault"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5236
	.long 10
	.ascii	"check_nil"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+5260
	.long 9
	.ascii	"check_lo"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5284
	.long 9
	.ascii	"check_hi"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5308
	.long 12
	.ascii	"check_range"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+5332
	.long 12
	.ascii	"check_index"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+5356
	.long 9
	.ascii	"check_eq"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5380
	.long 11
	.ascii	"add_offset"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5404
	.long 14
	.ascii	"index_address"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+5432
	.long 18
	.ascii	"start_call_direct"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+5464
	.long 20
	.ascii	"start_call_indirect"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+5496
	.long 10
	.ascii	"pop_param"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+5520
	.long 11
	.ascii	"pop_struct"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5544
	.long 16
	.ascii	"pop_static_link"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+5572
	.long 12
	.ascii	"call_direct"
	.zero	1
	.long 2
	.long MM_M3CG_Wr+5596
	.long 14
	.ascii	"call_indirect"
	.zero	3
	.long 2
	.long MM_M3CG_Wr+5624
	.long 15
	.ascii	"load_procedure"
	.zero	2
	.long 2
	.long MM_M3CG_Wr+5652
	.long 17
	.ascii	"load_static_link"
	.zero	4
	.long 2
	.long MM_M3CG_Wr+5684
	.long 4
	.ascii	"\t# "
	.zero	1
	.ascii	"Cmt"
	.zero	1
	.ascii	"comment"
	.zero	1
	.ascii	"load_static_link"
	.zero	1
	.ascii	"load_procedure"
	.zero	1
	.ascii	"call_indirect"
	.zero	1
	.ascii	"call_direct"
	.zero	1
	.ascii	"pop_static_link"
	.zero	1
	.ascii	"pop_struct"
	.zero	1
	.ascii	"pop_param"
	.zero	1
	.ascii	"start_call_indirect"
	.zero	1
	.ascii	"start_call_direct"
	.zero	1
	.ascii	"index_address"
	.zero	1
	.ascii	"add_offset"
	.zero	1
	.ascii	"check_eq"
	.zero	1
	.ascii	"check_index"
	.zero	1
	.ascii	"check_range"
	.zero	1
	.ascii	"check_hi"
	.zero	1
	.ascii	"check_lo"
	.zero	1
	.ascii	"check_nil"
	.zero	1
	.ascii	"typecase_fault"
	.zero	1
	.ascii	"case_fault"
	.zero	1
	.ascii	"return_fault"
	.zero	1
	.ascii	"narrow_fault"
	.zero	1
	.ascii	"assert_fault"
	.zero	1
	.ascii	"loophole"
	.zero	1
	.ascii	"zero"
	.zero	1
	.ascii	"zero_n"
	.zero	1
	.ascii	"copy"
	.zero	1
	.ascii	"copy_n"
	.zero	1
	.ascii	"pop"
	.zero	1
	.ascii	"swap"
	.zero	1
	.ascii	"insert_mn"
	.zero	1
	.ascii	"insert_n"
	.zero	1
	.ascii	"insert"
	.zero	1
	.ascii	"extract_mn"
	.zero	1
	.ascii	"extract_n"
	.zero	1
	.ascii	"extract"
	.zero	1
	.ascii	"rotate_right"
	.zero	1
	.ascii	"rotate_left"
	.zero	1
	.ascii	"rotate"
	.zero	1
	.ascii	"shift_right"
	.zero	1
	.ascii	"shift_left"
	.zero	1
	.ascii	"shift"
	.zero	1
	.ascii	"xor"
	.zero	1
	.ascii	"or"
	.zero	1
	.ascii	"and"
	.zero	1
	.ascii	"not"
	.zero	1
	.ascii	"set_singleton"
	.zero	1
	.ascii	"set_range"
	.zero	1
	.ascii	"set_le"
	.zero	1
	.ascii	"set_lt"
	.zero	1
	.ascii	"set_ge"
	.zero	1
	.ascii	"set_gt"
	.zero	1
	.ascii	"set_ne"
	.zero	1
	.ascii	"set_eq"
	.zero	1
	.ascii	"set_member"
	.zero	1
	.ascii	"set_sym_difference"
	.zero	1
	.ascii	"set_intersection"
	.zero	1
	.ascii	"set_difference"
	.zero	1
	.ascii	"set_union"
	.zero	1
	.ascii	"cvt_float"
	.zero	1
	.ascii	"ceiling"
	.zero	1
	.ascii	"floor"
	.zero	1
	.ascii	"trunc"
	.zero	1
	.ascii	"round"
	.zero	1
	.ascii	"min"
	.zero	1
	.ascii	"max"
	.zero	1
	.ascii	"abs"
	.zero	1
	.ascii	"negate"
	.zero	1
	.ascii	"mod"
	.zero	1
	.ascii	"div"
	.zero	1
	.ascii	"divide"
	.zero	1
	.ascii	"multiply"
	.zero	1
	.ascii	"subtract"
	.zero	1
	.ascii	"add"
	.zero	1
	.ascii	"le"
	.zero	1
	.ascii	"lt"
	.zero	1
	.ascii	"ge"
	.zero	1
	.ascii	"gt"
	.zero	1
	.ascii	"ne"
	.zero	1
	.ascii	"eq"
	.zero	1
	.ascii	"load_float"
	.zero	1
	.ascii	"load_integer"
	.zero	1
	.ascii	"load_nil"
	.zero	1
	.ascii	"store_ref_indirect"
	.zero	1
	.ascii	"store_indirect"
	.zero	1
	.ascii	"load_indirect"
	.zero	1
	.ascii	"load_address"
	.zero	1
	.ascii	"store_ref"
	.zero	1
	.ascii	"store"
	.zero	1
	.ascii	"load"
	.zero	1
	.ascii	"exit_proc"
	.zero	1
	.ascii	"case_jump"
	.zero	1
	.ascii	"if_le"
	.zero	1
	.ascii	"if_lt"
	.zero	1
	.ascii	"if_ge"
	.zero	1
	.ascii	"if_gt"
	.zero	1
	.ascii	"if_ne"
	.zero	1
	.ascii	"if_eq"
	.zero	1
	.ascii	"if_false"
	.zero	1
	.ascii	"if_true"
	.zero	1
	.ascii	"jump"
	.zero	1
	.ascii	"set_label"
	.zero	1
	.ascii	"note_procedure_origin"
	.zero	1
	.ascii	"end_block"
	.zero	1
	.ascii	"begin_block"
	.zero	1
	.ascii	"end_procedure"
	.zero	1
	.ascii	"begin_procedure"
	.zero	1
	.ascii	"declare_procedure"
	.zero	1
	.ascii	"import_procedure"
	.zero	1
	.ascii	"NewProc"
	.zero	1
	.ascii	"init_float"
	.zero	1
	.ascii	"init_chars"
	.zero	1
	.ascii	"init_offset"
	.zero	1
	.ascii	"init_var"
	.zero	1
	.ascii	"init_label"
	.zero	1
	.ascii	"init_proc"
	.zero	1
	.ascii	"init_int"
	.zero	1
	.ascii	"end_init"
	.zero	1
	.ascii	"begin_init"
	.zero	1
	.ascii	"free_temp"
	.zero	1
	.ascii	"declare_temp"
	.zero	1
	.ascii	"declare_param"
	.zero	1
	.ascii	"declare_local"
	.zero	1
	.ascii	"declare_constant"
	.zero	1
	.ascii	"declare_global"
	.zero	1
	.ascii	"bind_segment"
	.zero	1
	.ascii	"declare_segment"
	.zero	1
	.ascii	"import_global"
	.zero	1
	.ascii	"NewVar"
	.zero	1
	.ascii	"get_runtime_hook"
	.zero	1
	.ascii	"set_runtime_hook"
	.zero	1
	.ascii	"set_runtime_proc"
	.zero	1
	.ascii	"GetRuntimeHook"
	.zero	1
	.ascii	"declare_exception"
	.zero	1
	.ascii	"reveal_opaque"
	.zero	1
	.ascii	"declare_opaque"
	.zero	1
	.ascii	"declare_method"
	.zero	1
	.ascii	"declare_object"
	.zero	1
	.ascii	"declare_raises"
	.zero	1
	.ascii	"declare_formal"
	.zero	1
	.ascii	"declare_proctype"
	.zero	1
	.ascii	"declare_indirect"
	.zero	1
	.ascii	"declare_pointer"
	.zero	1
	.ascii	"declare_subrange"
	.zero	1
	.ascii	"declare_set"
	.zero	1
	.ascii	"declare_field"
	.zero	1
	.ascii	"declare_record"
	.zero	1
	.ascii	"declare_packed"
	.zero	1
	.ascii	"declare_enum_elt"
	.zero	1
	.ascii	"declare_enum"
	.zero	1
	.ascii	"declare_open_array"
	.zero	1
	.ascii	"declare_array"
	.zero	1
	.ascii	"declare_typename"
	.zero	1
	.ascii	"set_source_line"
	.zero	1
	.ascii	"set_source_file"
	.zero	1
	.ascii	"export_unit"
	.zero	1
	.ascii	"import_unit"
	.zero	1
	.ascii	"end_unit"
	.zero	1
	.ascii	"begin_unit"
	.zero	1
	.ascii	"set_error_handler"
	.zero	1
	.ascii	"next_label"
	.zero	1
	.ascii	"New"
	.zero	1
	.ascii	"OutI"
	.zero	1
	.ascii	"OutS"
	.zero	1
	.ascii	"OutN"
	.zero	1
	.ascii	"OutT"
	.zero	1
	.ascii	"OutC"
	.zero	1
	.ascii	"Flush"
	.zero	1
	.ascii	"Txt"
	.zero	1
	.ascii	"BInt"
	.zero	1
	.ascii	"TInt"
	.zero	1
	.ascii	"Int"
	.zero	1
	.ascii	"Tipe"
	.zero	1
	.ascii	"Lab"
	.zero	1
	.ascii	"Bool"
	.zero	1
	.ascii	"Flt"
	.zero	1
	.ascii	"TName"
	.zero	1
	.ascii	"PName"
	.zero	1
	.ascii	"VName"
	.zero	1
	.ascii	"ZName"
	.zero	1
	.ascii	"Cmd"
	.zero	1
	.ascii	"NL"
	.zero	3
	.long M3CG_Wr__Cmt
	.long MM_M3CG_Wr+5688
	.zero	4
	.long M3CG_Wr__comment
	.long MM_M3CG_Wr+5692
	.zero	4
	.long M3CG_Wr__load_static_link
	.long MM_M3CG_Wr+5700
	.zero	4
	.long M3CG_Wr__load_procedure
	.long MM_M3CG_Wr+5717
	.zero	4
	.long M3CG_Wr__call_indirect
	.long MM_M3CG_Wr+5732
	.zero	4
	.long M3CG_Wr__call_direct
	.long MM_M3CG_Wr+5746
	.zero	4
	.long M3CG_Wr__pop_static_link
	.long MM_M3CG_Wr+5758
	.zero	4
	.long M3CG_Wr__pop_struct
	.long MM_M3CG_Wr+5774
	.zero	4
	.long M3CG_Wr__pop_param
	.long MM_M3CG_Wr+5785
	.zero	4
	.long M3CG_Wr__start_call_indirect
	.long MM_M3CG_Wr+5795
	.zero	4
	.long M3CG_Wr__start_call_direct
	.long MM_M3CG_Wr+5815
	.zero	4
	.long M3CG_Wr__index_address
	.long MM_M3CG_Wr+5833
	.zero	4
	.long M3CG_Wr__add_offset
	.long MM_M3CG_Wr+5847
	.zero	4
	.long M3CG_Wr__check_eq
	.long MM_M3CG_Wr+5858
	.zero	4
	.long M3CG_Wr__check_index
	.long MM_M3CG_Wr+5867
	.zero	4
	.long M3CG_Wr__check_range
	.long MM_M3CG_Wr+5879
	.zero	4
	.long M3CG_Wr__check_hi
	.long MM_M3CG_Wr+5891
	.zero	4
	.long M3CG_Wr__check_lo
	.long MM_M3CG_Wr+5900
	.zero	4
	.long M3CG_Wr__check_nil
	.long MM_M3CG_Wr+5909
	.zero	4
	.long M3CG_Wr__typecase_fault
	.long MM_M3CG_Wr+5919
	.zero	4
	.long M3CG_Wr__case_fault
	.long MM_M3CG_Wr+5934
	.zero	4
	.long M3CG_Wr__return_fault
	.long MM_M3CG_Wr+5945
	.zero	4
	.long M3CG_Wr__narrow_fault
	.long MM_M3CG_Wr+5958
	.zero	4
	.long M3CG_Wr__assert_fault
	.long MM_M3CG_Wr+5971
	.zero	4
	.long M3CG_Wr__loophole
	.long MM_M3CG_Wr+5984
	.zero	4
	.long M3CG_Wr__zero
	.long MM_M3CG_Wr+5993
	.zero	4
	.long M3CG_Wr__zero_n
	.long MM_M3CG_Wr+5998
	.zero	4
	.long M3CG_Wr__copy
	.long MM_M3CG_Wr+6005
	.zero	4
	.long M3CG_Wr__copy_n
	.long MM_M3CG_Wr+6010
	.zero	4
	.long M3CG_Wr__pop
	.long MM_M3CG_Wr+6017
	.zero	4
	.long M3CG_Wr__swap
	.long MM_M3CG_Wr+6021
	.zero	4
	.long M3CG_Wr__insert_mn
	.long MM_M3CG_Wr+6026
	.zero	4
	.long M3CG_Wr__insert_n
	.long MM_M3CG_Wr+6036
	.zero	4
	.long M3CG_Wr__insert
	.long MM_M3CG_Wr+6045
	.zero	4
	.long M3CG_Wr__extract_mn
	.long MM_M3CG_Wr+6052
	.zero	4
	.long M3CG_Wr__extract_n
	.long MM_M3CG_Wr+6063
	.zero	4
	.long M3CG_Wr__extract
	.long MM_M3CG_Wr+6073
	.zero	4
	.long M3CG_Wr__rotate_right
	.long MM_M3CG_Wr+6081
	.zero	4
	.long M3CG_Wr__rotate_left
	.long MM_M3CG_Wr+6094
	.zero	4
	.long M3CG_Wr__rotate
	.long MM_M3CG_Wr+6106
	.zero	4
	.long M3CG_Wr__shift_right
	.long MM_M3CG_Wr+6113
	.zero	4
	.long M3CG_Wr__shift_left
	.long MM_M3CG_Wr+6125
	.zero	4
	.long M3CG_Wr__shift
	.long MM_M3CG_Wr+6136
	.zero	4
	.long M3CG_Wr__xor
	.long MM_M3CG_Wr+6142
	.zero	4
	.long M3CG_Wr__or
	.long MM_M3CG_Wr+6146
	.zero	4
	.long M3CG_Wr__and
	.long MM_M3CG_Wr+6149
	.zero	4
	.long M3CG_Wr__not
	.long MM_M3CG_Wr+6153
	.zero	4
	.long M3CG_Wr__set_singleton
	.long MM_M3CG_Wr+6157
	.zero	4
	.long M3CG_Wr__set_range
	.long MM_M3CG_Wr+6171
	.zero	4
	.long M3CG_Wr__set_le
	.long MM_M3CG_Wr+6181
	.zero	4
	.long M3CG_Wr__set_lt
	.long MM_M3CG_Wr+6188
	.zero	4
	.long M3CG_Wr__set_ge
	.long MM_M3CG_Wr+6195
	.zero	4
	.long M3CG_Wr__set_gt
	.long MM_M3CG_Wr+6202
	.zero	4
	.long M3CG_Wr__set_ne
	.long MM_M3CG_Wr+6209
	.zero	4
	.long M3CG_Wr__set_eq
	.long MM_M3CG_Wr+6216
	.zero	4
	.long M3CG_Wr__set_member
	.long MM_M3CG_Wr+6223
	.zero	4
	.long M3CG_Wr__set_sym_difference
	.long MM_M3CG_Wr+6234
	.zero	4
	.long M3CG_Wr__set_intersection
	.long MM_M3CG_Wr+6253
	.zero	4
	.long M3CG_Wr__set_difference
	.long MM_M3CG_Wr+6270
	.zero	4
	.long M3CG_Wr__set_union
	.long MM_M3CG_Wr+6285
	.zero	4
	.long M3CG_Wr__cvt_float
	.long MM_M3CG_Wr+6295
	.zero	4
	.long M3CG_Wr__ceiling
	.long MM_M3CG_Wr+6305
	.zero	4
	.long M3CG_Wr__floor
	.long MM_M3CG_Wr+6313
	.zero	4
	.long M3CG_Wr__trunc
	.long MM_M3CG_Wr+6319
	.zero	4
	.long M3CG_Wr__round
	.long MM_M3CG_Wr+6325
	.zero	4
	.long M3CG_Wr__min
	.long MM_M3CG_Wr+6331
	.zero	4
	.long M3CG_Wr__max
	.long MM_M3CG_Wr+6335
	.zero	4
	.long M3CG_Wr__abs
	.long MM_M3CG_Wr+6339
	.zero	4
	.long M3CG_Wr__negate
	.long MM_M3CG_Wr+6343
	.zero	4
	.long M3CG_Wr__mod
	.long MM_M3CG_Wr+6350
	.zero	4
	.long M3CG_Wr__div
	.long MM_M3CG_Wr+6354
	.zero	4
	.long M3CG_Wr__divide
	.long MM_M3CG_Wr+6358
	.zero	4
	.long M3CG_Wr__multiply
	.long MM_M3CG_Wr+6365
	.zero	4
	.long M3CG_Wr__subtract
	.long MM_M3CG_Wr+6374
	.zero	4
	.long M3CG_Wr__add
	.long MM_M3CG_Wr+6383
	.zero	4
	.long M3CG_Wr__le
	.long MM_M3CG_Wr+6387
	.zero	4
	.long M3CG_Wr__lt
	.long MM_M3CG_Wr+6390
	.zero	4
	.long M3CG_Wr__ge
	.long MM_M3CG_Wr+6393
	.zero	4
	.long M3CG_Wr__gt
	.long MM_M3CG_Wr+6396
	.zero	4
	.long M3CG_Wr__ne
	.long MM_M3CG_Wr+6399
	.zero	4
	.long M3CG_Wr__eq
	.long MM_M3CG_Wr+6402
	.zero	4
	.long M3CG_Wr__load_float
	.long MM_M3CG_Wr+6405
	.zero	4
	.long M3CG_Wr__load_integer
	.long MM_M3CG_Wr+6416
	.zero	4
	.long M3CG_Wr__load_nil
	.long MM_M3CG_Wr+6429
	.zero	4
	.long M3CG_Wr__store_ref_indirect
	.long MM_M3CG_Wr+6438
	.zero	4
	.long M3CG_Wr__store_indirect
	.long MM_M3CG_Wr+6457
	.zero	4
	.long M3CG_Wr__load_indirect
	.long MM_M3CG_Wr+6472
	.zero	4
	.long M3CG_Wr__load_address
	.long MM_M3CG_Wr+6486
	.zero	4
	.long M3CG_Wr__store_ref
	.long MM_M3CG_Wr+6499
	.zero	4
	.long M3CG_Wr__store
	.long MM_M3CG_Wr+6509
	.zero	4
	.long M3CG_Wr__load
	.long MM_M3CG_Wr+6515
	.zero	4
	.long M3CG_Wr__exit_proc
	.long MM_M3CG_Wr+6520
	.zero	4
	.long M3CG_Wr__case_jump
	.long MM_M3CG_Wr+6530
	.zero	4
	.long M3CG_Wr__if_le
	.long MM_M3CG_Wr+6540
	.zero	4
	.long M3CG_Wr__if_lt
	.long MM_M3CG_Wr+6546
	.zero	4
	.long M3CG_Wr__if_ge
	.long MM_M3CG_Wr+6552
	.zero	4
	.long M3CG_Wr__if_gt
	.long MM_M3CG_Wr+6558
	.zero	4
	.long M3CG_Wr__if_ne
	.long MM_M3CG_Wr+6564
	.zero	4
	.long M3CG_Wr__if_eq
	.long MM_M3CG_Wr+6570
	.zero	4
	.long M3CG_Wr__if_false
	.long MM_M3CG_Wr+6576
	.zero	4
	.long M3CG_Wr__if_true
	.long MM_M3CG_Wr+6585
	.zero	4
	.long M3CG_Wr__jump
	.long MM_M3CG_Wr+6593
	.zero	4
	.long M3CG_Wr__set_label
	.long MM_M3CG_Wr+6598
	.zero	4
	.long M3CG_Wr__note_procedure_origin
	.long MM_M3CG_Wr+6608
	.zero	4
	.long M3CG_Wr__end_block
	.long MM_M3CG_Wr+6630
	.zero	4
	.long M3CG_Wr__begin_block
	.long MM_M3CG_Wr+6640
	.zero	4
	.long M3CG_Wr__end_procedure
	.long MM_M3CG_Wr+6652
	.zero	4
	.long M3CG_Wr__begin_procedure
	.long MM_M3CG_Wr+6666
	.zero	4
	.long M3CG_Wr__declare_procedure
	.long MM_M3CG_Wr+6682
	.zero	4
	.long M3CG_Wr__import_procedure
	.long MM_M3CG_Wr+6700
	.zero	4
	.long M3CG_Wr__NewProc
	.long MM_M3CG_Wr+6717
	.zero	4
	.long M3CG_Wr__init_float
	.long MM_M3CG_Wr+6725
	.zero	4
	.long M3CG_Wr__init_chars
	.long MM_M3CG_Wr+6736
	.zero	4
	.long M3CG_Wr__init_offset
	.long MM_M3CG_Wr+6747
	.zero	4
	.long M3CG_Wr__init_var
	.long MM_M3CG_Wr+6759
	.zero	4
	.long M3CG_Wr__init_label
	.long MM_M3CG_Wr+6768
	.zero	4
	.long M3CG_Wr__init_proc
	.long MM_M3CG_Wr+6779
	.zero	4
	.long M3CG_Wr__init_int
	.long MM_M3CG_Wr+6789
	.zero	4
	.long M3CG_Wr__end_init
	.long MM_M3CG_Wr+6798
	.zero	4
	.long M3CG_Wr__begin_init
	.long MM_M3CG_Wr+6807
	.zero	4
	.long M3CG_Wr__free_temp
	.long MM_M3CG_Wr+6818
	.zero	4
	.long M3CG_Wr__declare_temp
	.long MM_M3CG_Wr+6828
	.zero	4
	.long M3CG_Wr__declare_param
	.long MM_M3CG_Wr+6841
	.zero	4
	.long M3CG_Wr__declare_local
	.long MM_M3CG_Wr+6855
	.zero	4
	.long M3CG_Wr__declare_constant
	.long MM_M3CG_Wr+6869
	.zero	4
	.long M3CG_Wr__declare_global
	.long MM_M3CG_Wr+6886
	.zero	4
	.long M3CG_Wr__bind_segment
	.long MM_M3CG_Wr+6901
	.zero	4
	.long M3CG_Wr__declare_segment
	.long MM_M3CG_Wr+6914
	.zero	4
	.long M3CG_Wr__import_global
	.long MM_M3CG_Wr+6930
	.zero	4
	.long M3CG_Wr__NewVar
	.long MM_M3CG_Wr+6944
	.zero	4
	.long M3CG_Wr__get_runtime_hook
	.long MM_M3CG_Wr+6951
	.zero	4
	.long M3CG_Wr__set_runtime_hook
	.long MM_M3CG_Wr+6968
	.zero	4
	.long M3CG_Wr__set_runtime_proc
	.long MM_M3CG_Wr+6985
	.zero	4
	.long M3CG_Wr__GetRuntimeHook
	.long MM_M3CG_Wr+7002
	.zero	4
	.long M3CG_Wr__declare_exception
	.long MM_M3CG_Wr+7017
	.zero	4
	.long M3CG_Wr__reveal_opaque
	.long MM_M3CG_Wr+7035
	.zero	4
	.long M3CG_Wr__declare_opaque
	.long MM_M3CG_Wr+7049
	.zero	4
	.long M3CG_Wr__declare_method
	.long MM_M3CG_Wr+7064
	.zero	4
	.long M3CG_Wr__declare_object
	.long MM_M3CG_Wr+7079
	.zero	4
	.long M3CG_Wr__declare_raises
	.long MM_M3CG_Wr+7094
	.zero	4
	.long M3CG_Wr__declare_formal
	.long MM_M3CG_Wr+7109
	.zero	4
	.long M3CG_Wr__declare_proctype
	.long MM_M3CG_Wr+7124
	.zero	4
	.long M3CG_Wr__declare_indirect
	.long MM_M3CG_Wr+7141
	.zero	4
	.long M3CG_Wr__declare_pointer
	.long MM_M3CG_Wr+7158
	.zero	4
	.long M3CG_Wr__declare_subrange
	.long MM_M3CG_Wr+7174
	.zero	4
	.long M3CG_Wr__declare_set
	.long MM_M3CG_Wr+7191
	.zero	4
	.long M3CG_Wr__declare_field
	.long MM_M3CG_Wr+7203
	.zero	4
	.long M3CG_Wr__declare_record
	.long MM_M3CG_Wr+7217
	.zero	4
	.long M3CG_Wr__declare_packed
	.long MM_M3CG_Wr+7232
	.zero	4
	.long M3CG_Wr__declare_enum_elt
	.long MM_M3CG_Wr+7247
	.zero	4
	.long M3CG_Wr__declare_enum
	.long MM_M3CG_Wr+7264
	.zero	4
	.long M3CG_Wr__declare_open_array
	.long MM_M3CG_Wr+7277
	.zero	4
	.long M3CG_Wr__declare_array
	.long MM_M3CG_Wr+7296
	.zero	4
	.long M3CG_Wr__declare_typename
	.long MM_M3CG_Wr+7310
	.zero	4
	.long M3CG_Wr__set_source_line
	.long MM_M3CG_Wr+7327
	.zero	4
	.long M3CG_Wr__set_source_file
	.long MM_M3CG_Wr+7343
	.zero	4
	.long M3CG_Wr__export_unit
	.long MM_M3CG_Wr+7359
	.zero	4
	.long M3CG_Wr__import_unit
	.long MM_M3CG_Wr+7371
	.zero	4
	.long M3CG_Wr__end_unit
	.long MM_M3CG_Wr+7383
	.zero	4
	.long M3CG_Wr__begin_unit
	.long MM_M3CG_Wr+7392
	.zero	4
	.long M3CG_Wr__set_error_handler
	.long MM_M3CG_Wr+7403
	.zero	4
	.long M3CG_Wr__next_label
	.long MM_M3CG_Wr+7421
	.zero	4
	.long M3CG_Wr__New
	.long MM_M3CG_Wr+7432
	.long MI_M3CG_Wr+44
	.long M3CG_Wr__OutI
	.long MM_M3CG_Wr+7436
	.zero	4
	.long M3CG_Wr__OutS
	.long MM_M3CG_Wr+7441
	.zero	4
	.long M3CG_Wr__OutN
	.long MM_M3CG_Wr+7446
	.zero	4
	.long M3CG_Wr__OutT
	.long MM_M3CG_Wr+7451
	.zero	4
	.long M3CG_Wr__OutC
	.long MM_M3CG_Wr+7456
	.zero	4
	.long M3CG_Wr__Flush
	.long MM_M3CG_Wr+7461
	.zero	4
	.long M3CG_Wr__Txt
	.long MM_M3CG_Wr+7467
	.zero	4
	.long M3CG_Wr__BInt
	.long MM_M3CG_Wr+7471
	.zero	4
	.long M3CG_Wr__TInt
	.long MM_M3CG_Wr+7476
	.zero	4
	.long M3CG_Wr__Int
	.long MM_M3CG_Wr+7481
	.zero	4
	.long M3CG_Wr__Tipe
	.long MM_M3CG_Wr+7485
	.zero	4
	.long M3CG_Wr__Lab
	.long MM_M3CG_Wr+7490
	.zero	4
	.long M3CG_Wr__Bool
	.long MM_M3CG_Wr+7494
	.zero	4
	.long M3CG_Wr__Flt
	.long MM_M3CG_Wr+7499
	.zero	4
	.long M3CG_Wr__TName
	.long MM_M3CG_Wr+7503
	.zero	4
	.long M3CG_Wr__PName
	.long MM_M3CG_Wr+7509
	.zero	4
	.long M3CG_Wr__VName
	.long MM_M3CG_Wr+7515
	.zero	4
	.long M3CG_Wr__ZName
	.long MM_M3CG_Wr+7521
	.zero	4
	.long M3CG_Wr__Cmd
	.long MM_M3CG_Wr+7527
	.zero	4
	.long M3CG_Wr__NL
	.long MM_M3CG_Wr+7531
	.zero	8
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/m3mid"
	.ascii	"dle/src/M3CG_Wr.m3"
	.zero	1
.byte 4
.byte 4
.byte 14
.byte 4
.byte 14
.byte 14
.byte 14
.byte 14
.byte 0
.byte 4
.byte 4
.byte 37
.byte 4
.byte 0
.byte 9
.byte 10
.byte 8
.byte 16
.byte 135
.byte 20
.byte 118
.byte 98
.byte 16
.byte 152
.byte 97
.byte 192
.byte 197
.byte 7
.byte 16
.byte 43
.byte 186
.byte 211
.byte 90
.byte 25
.byte 25
.byte 25
.byte 25
	.ascii	"M3CG_Wr.U"
	.zero	1
.byte 14
.byte 4
.byte 4
.byte 14
.byte 0
.byte 37
.byte 4
.byte 4
.byte 0
.byte 5
.byte 15
.byte 4
.byte 19
.byte 254
.byte 126
.byte 16
.byte 117
.byte 167
.byte 196
.byte 100
.byte 16
.byte 121
.byte 130
.byte 239
.byte 251
.byte 7
	.ascii	"M3CG_Wr.RuntimeHook"
	.zero	1
.byte 14
.byte 0
.byte 2
.byte 10
.byte 1
.byte 7
	.ascii	"M3CG_Wr.WrProc"
	.zero	1
.byte 14
.byte 0
.byte 2
.byte 10
.byte 1
.byte 7
	.ascii	"M3CG_Wr.WrVar"
	.zero	4
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
