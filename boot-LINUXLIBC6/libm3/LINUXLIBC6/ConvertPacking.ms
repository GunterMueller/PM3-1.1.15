	.file	"ConvertPacking.mc"
	.version	"01.01"
/ SRC Modula-3 version cygnus-2.7.2-960712 (i486--linuxelf) compiled by GNU C version egcs-2.91.66 19990314/Linux (egcs-1.1.2 release).
/ options passed:  -fno-strength-reduce -O2
/ options enabled:  -fdefer-pop -fcse-follow-jumps -fcse-skip-blocks
/ -fexpensive-optimizations -fthread-jumps -fpeephole -fforce-mem
/ -ffunction-cse -finline -fkeep-static-consts -fcaller-saves
/ -fpcc-struct-return -frerun-cse-after-loop -fschedule-insns2 -fcommon
/ -fverbose-asm -fgnu-linker -m80387 -mhard-float -mno-soft-float -mieee-fp
/ -mfp-ret-in-387 -mschedule-prologue -mcpu=i486 -march=i486

gcc2_compiled.:
.text
	.align 16
	.type	 ConvertPacking__ExtractSwap,@function
ConvertPacking__ExtractSwap:
	pushl %ebp
	movl %esp,%ebp
	subl $40,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 16(%ebp),%edi
.L2:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl 12(%ebp),%eax
	movl %eax,-4(%ebp)
	xorl %edx,%edx
	movl %edx,-16(%ebp)
	movl %edi,%ebx
	sarl $3,%ebx
	movl %edi,%eax
	andl $7,%eax
	movl 8(%ebp),%ecx
	movl %eax,%edi
	cmpb $0,49(%ecx)
	jne .L4
	movl 20(%ebp),%ecx
	movl %ecx,-16(%ebp)
.L4:
	movl %ebx,-20(%ebp)
	movl 24(%ebp),%ecx
	decl %ecx
	movl %ecx,-24(%ebp)
	jmp .L5
	.align 16
.L6:
	movl $8,%eax
	subl %edi,%eax
	movl 20(%ebp),%ebx
	cmpl %eax,%ebx
	jle .L7
	movl %eax,%ebx
.L7:
	movl 8(%ebp),%ecx
	movl %ebx,%esi
	cmpb $0,49(%ecx)
	je .L8
	cmpl $0,-16(%ebp)
	jge .L9
	pushl $2273
	call _m3_fault
	.align 16
.L9:
	movl -16(%ebp),%ebx
	testl %esi,%esi
	jge .L10
	pushl $2273
	call _m3_fault
	.align 16
.L10:
	leal (%esi,%ebx),%eax
	cmpl $32,%eax
	jle .L12
	pushl $2273
	call _m3_fault
	.align 16
.L12:
	leal (%esi,%edi),%eax
	cmpl $32,%eax
	jle .L13
	pushl $2273
	call _m3_fault
	.align 16
.L13:
	cmpl $3,-20(%ebp)
	jbe .L14
	pushl $2273
	call _m3_fault
	.align 16
.L14:
	testl %esi,%esi
	je .L16
	cmpl $32,%esi
	jne .L17
	movl -20(%ebp),%ecx
	movsbl -4(%ecx,%ebp),%edx
	movl %esi,%eax
	subl %edi,%eax
	addl $-32,%eax
	movl %eax,%ecx
	sall %cl,%edx
	jmp .L16
	.align 16
.L17:
	movl $-1,%eax
	movl %esi,%ecx
	sall %cl,%eax
	notl %eax
	movl %eax,-36(%ebp)
	movl %ebx,%ecx
	sall %cl,%eax
	notl %eax
	andl %eax,%edx
	movl %edx,-32(%ebp)
	testl %esi,%esi
	je .L21
	movl -20(%ebp),%ecx
	movsbl -4(%ecx,%ebp),%eax
	movl $32,%edx
	subl %edi,%edx
	subl %esi,%edx
	movl %edx,%ecx
	sall %cl,%eax
	movl $32,%edx
	subl %esi,%edx
	movl %edx,%ecx
	shrl %cl,%eax
	andl -36(%ebp),%eax
	movl %ebx,%ecx
	sall %cl,%eax
	movl -32(%ebp),%edx
	orl %eax,%edx
	jmp .L16
	.align 16
.L21:
	movl -32(%ebp),%edx
.L16:
	addl %esi,-16(%ebp)
	jmp .L23
	.align 16
.L8:
	movl -16(%ebp),%eax
	subl %ebx,%eax
	movl %eax,-16(%ebp)
	jns .L24
	pushl $2337
	call _m3_fault
	.align 16
.L24:
	movl %eax,-28(%ebp)
	testl %ebx,%ebx
	jge .L25
	pushl $2337
	call _m3_fault
	.align 16
.L25:
	addl %ebx,%eax
	cmpl $32,%eax
	jle .L26
	pushl $2337
	call _m3_fault
	.align 16
.L26:
	movl $8,%eax
	subl %ebx,%eax
	subl %edi,%eax
	jns .L27
	pushl $2337
	call _m3_fault
	.align 16
.L27:
	movl %eax,%ebx
	leal (%esi,%ebx),%eax
	cmpl $32,%eax
	jle .L29
	pushl $2337
	call _m3_fault
	.align 16
.L29:
	cmpl $3,-20(%ebp)
	jbe .L30
	pushl $2337
	call _m3_fault
	.align 16
.L30:
	testl %esi,%esi
	je .L23
	cmpl $32,%esi
	jne .L33
	movl -20(%ebp),%ecx
	movsbl -4(%ecx,%ebp),%edx
	movl %esi,%eax
	subl %ebx,%eax
	addl $-32,%eax
	movl %eax,%ecx
	sall %cl,%edx
	jmp .L23
	.align 16
.L33:
	movl $-1,%eax
	movl %esi,%ecx
	sall %cl,%eax
	notl %eax
	movl %eax,-40(%ebp)
	movl -28(%ebp),%ecx
	sall %cl,%eax
	notl %eax
	movl %edx,%edi
	andl %eax,%edi
	testl %esi,%esi
	je .L37
	movl -20(%ebp),%ecx
	movsbl -4(%ecx,%ebp),%eax
	movl $32,%edx
	subl %ebx,%edx
	subl %esi,%edx
	movl %edx,%ecx
	sall %cl,%eax
	movl $32,%edx
	subl %esi,%edx
	movl %edx,%ecx
	shrl %cl,%eax
	andl -40(%ebp),%eax
	movl -28(%ebp),%ecx
	sall %cl,%eax
	movl %edi,%edx
	orl %eax,%edx
	jmp .L23
	.align 16
.L37:
	movl %edi,%edx
.L23:
	xorl %edi,%edi
	movl 20(%ebp),%eax
	subl %esi,%eax
	jns .L39
	pushl $2433
	call _m3_fault
	.align 16
.L39:
	movl %eax,20(%ebp)
	testl %eax,%eax
	je .L43
	incl -20(%ebp)
.L5:
	movl -24(%ebp),%ecx
	cmpl %ecx,-20(%ebp)
	jle .L6
.L43:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl %edx,%eax
.L42:
	leal -52(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe1:
	.size	 ConvertPacking__ExtractSwap,.Lfe1-ConvertPacking__ExtractSwap
	.align 16
	.type	 ConvertPacking__ReadData,@function
ConvertPacking__ReadData:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%edx
	movl 16(%ebp),%esi
	jmp .L45
	.align 16
.L46:
	movl (%edi),%eax
	movl 4(%eax),%ecx
	testl %edx,%edx
	jne .L47
	pushl $2724
	call _m3_fault
	.align 16
.L47:
	movl %edx,%ebx
	movl %ebx,-8(%ebp)
	movl $65536,-4(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edi
	call *%ecx
	leal 65536(%ebx),%edx
	addl $-65536,%esi
	addl $8,%esp
.L45:
	cmpl $65535,%esi
	jg .L46
	testl %esi,%esi
	jle .L44
	cmpl $65536,%esi
	jle .L51
	pushl $2785
	call _m3_fault
	.align 16
.L51:
	movl %esi,-4(%ebp)
	testl %edx,%edx
	jne .L52
	pushl $2788
	call _m3_fault
	.align 16
.L52:
	movl %edx,-8(%ebp)
	movl (%edi),%eax
	movl 4(%eax),%ebx
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edi
	call *%ebx
.L44:
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe2:
	.size	 ConvertPacking__ReadData,.Lfe2-ConvertPacking__ReadData
.section	.rodata
	.align 4
	.type	 L_6.0,@object
	.size	 L_6.0,56
L_6.0:
	.long .L60
	.long .L61
	.long .L62
	.long .L63
	.long .L64
	.long .L65
	.long .L66
	.long .L67
	.long .L68
	.long .L69
	.long .L68
	.long .L69
	.long .L70
	.long .L71
.text
	.align 16
	.type	 ConvertPacking__Convert,@function
ConvertPacking__Convert:
	pushl %ebp
	movl %esp,%ebp
	subl $112,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 20(%ebp),%ebx
.L54:
	movl $MM_ConvertPacking+1176,-12(%ebp)
	movl $4,-16(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-20(%ebp)
	leal -20(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl 8(%ebp),%ecx
	movl $1,-48(%ebp)
	movl 4(%ecx),%ecx
	movl %ecx,-112(%ebp)
	movl (%ecx),%eax
	movl 32(%eax),%edx
	pushl %ecx
	call *%edx
	movl %eax,-112(%ebp)
	addl $4,%esp
	cmpl $2,%eax
	jne .L55
	movl %ebx,-48(%ebp)
	movl $1,%ebx
.L55:
	movl $1,-52(%ebp)
	movl %ebx,-56(%ebp)
	jmp .L56
	.align 16
.L57:
	movl 8(%ebp),%ecx
	movl 4(%ecx),%edx
	movl (%edx),%eax
	movl 32(%eax),%eax
	movl %eax,-112(%ebp)
	pushl %edx
	movl -112(%ebp),%ecx
	call *%ecx
	movl %eax,-112(%ebp)
	movl $0,-60(%ebp)
	movl %eax,%ecx
	decl %ecx
	movl %ecx,-64(%ebp)
	addl $4,%esp
	jmp .L58
	.align 16
.L59:
	movl 8(%ebp),%ecx
	movl 4(%ecx),%ecx
	movl %ecx,-112(%ebp)
	movl (%ecx),%eax
	movl -60(%ebp),%ecx
	movl 44(%eax),%edx
	pushl %ecx
	movl -112(%ebp),%ecx
	pushl %ecx
	call *%edx
	movl %eax,%edi
	movl -48(%ebp),%esi
	addl $8,%esp
	xorl %eax,%eax
	movb 4(%edi),%al
	imull 8(%edi),%esi
	jmp *L_6.0(,%eax,4)
	.align 16
.L60:
	pushl %esi
	movl 12(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	call ConvertPacking__ReadData
	addl %esi,12(%ebp)
	addl $12,%esp
	jmp .L72
	.align 16
.L64:
	testl %edi,%edi
	je .L73
	movl -4(%edi),%eax
	sall $11,%eax
	movl %eax,%ebx
	shrl $12,%ebx
	cmpl %ebx,MM_ConvertPacking+1200
	jg .L74
	movl MM_ConvertPacking+1196,%eax
	cmpl %ebx,4(%eax)
	jge .L73
.L74:
	pushl $3205
	call _m3_fault
	.align 16
.L73:
	movl %edi,-68(%ebp)
	movl $1,-72(%ebp)
	movl %esi,-76(%ebp)
	jmp .L75
	.align 16
.L76:
	movl $0,-24(%ebp)
	movl $0,-28(%ebp)
	movl $0,-80(%ebp)
	movl -68(%ebp),%ecx
	leal -24(%ebp),%edx
	movl 12(%ecx),%eax
	cmpl $4,%eax
	jle .L77
	pushl $3329
	call _m3_fault
	.align 16
.L77:
	movl %eax,-32(%ebp)
	movl 16(%ebp),%ecx
	movl %edx,-36(%ebp)
	movl (%ecx),%eax
	movl 4(%eax),%esi
	leal -36(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%esi
	movl 8(%ebp),%ecx
	addl $8,%esp
	cmpb $0,49(%ecx)
	je .L79
	movl -68(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L80
	pushl $3428
	call _m3_fault
	.align 16
.L80:
	movl -80(%ebp),%edi
	movl 4(%eax),%eax
	decl %eax
	movl %eax,-84(%ebp)
	jmp .L81
	.align 16
.L82:
	movl 8(%ebp),%ecx
	movl (%ecx),%eax
	movl 28(%eax),%esi
	cmpl $0,-80(%ebp)
	jge .L83
	pushl $3441
	call _m3_fault
	.align 16
.L83:
	movl -68(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L84
	pushl $3444
	call _m3_fault
	.align 16
.L84:
	movl %eax,%edx
	cmpl %edi,4(%edx)
	ja .L85
	pushl $3442
	call _m3_fault
	.align 16
.L85:
	movl -68(%ebp),%ecx
	movl 12(%ecx),%eax
	pushl %eax
	movl (%edx),%eax
	movl (%eax,%edi,4),%eax
	pushl %eax
	movl -80(%ebp),%ecx
	pushl %ecx
	movl -24(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%ecx
	pushl %ecx
	call *%esi
	movl %eax,%ebx
	movl %ebx,%esi
	movl -68(%ebp),%ecx
	addl $20,%esp
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L86
	pushl $3556
	call _m3_fault
	.align 16
.L86:
	movl %eax,%edx
	cmpl %edi,4(%edx)
	ja .L87
	pushl $3554
	call _m3_fault
	.align 16
.L87:
	movl (%edx),%eax
	movl (%eax,%edi,4),%edx
	movl $32,%eax
	subl %edx,%eax
	subl -80(%ebp),%eax
	jns .L88
	pushl $3553
	call _m3_fault
	.align 16
.L88:
	movl %eax,%ebx
	movl %edx,-112(%ebp)
	leal (%edx,%ebx),%eax
	cmpl $32,%eax
	jle .L91
	pushl $3553
	call _m3_fault
	.align 16
.L91:
	cmpl $0,-112(%ebp)
	je .L93
	cmpl $32,-112(%ebp)
	je .L94
	movl $-1,%edx
	movl -112(%ebp),%ecx
	sall %cl,%edx
	notl %edx
	movl %edx,%eax
	movl %ebx,%ecx
	sall %cl,%eax
	notl %eax
	andl -28(%ebp),%eax
	movl %eax,-112(%ebp)
	movl %esi,%eax
	andl %edx,%eax
	sall %cl,%eax
	orl -112(%ebp),%eax
	movl %eax,-28(%ebp)
	jmp .L93
	.align 16
.L94:
	movl %esi,-28(%ebp)
.L93:
	movl -68(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L96
	pushl $3668
	call _m3_fault
	.align 16
.L96:
	movl %eax,%esi
	cmpl %edi,4(%esi)
	ja .L97
	pushl $3666
	call _m3_fault
	.align 16
.L97:
	movl (%esi),%eax
	movl (%eax,%edi,4),%eax
	addl %eax,-80(%ebp)
	incl %edi
.L81:
	cmpl %edi,-84(%ebp)
	jge .L82
	jmp .L99
	.align 16
.L79:
	movl -68(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L100
	pushl $3732
	call _m3_fault
	.align 16
.L100:
	movl -80(%ebp),%edi
	movl 4(%eax),%eax
	decl %eax
	movl %eax,-88(%ebp)
	jmp .L101
	.align 16
.L102:
	movl 8(%ebp),%ecx
	movl (%ecx),%eax
	movl 28(%eax),%esi
	cmpl $0,-80(%ebp)
	jge .L103
	pushl $3745
	call _m3_fault
	.align 16
.L103:
	movl -68(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L104
	pushl $3748
	call _m3_fault
	.align 16
.L104:
	movl %eax,%edx
	cmpl %edi,4(%edx)
	ja .L105
	pushl $3746
	call _m3_fault
	.align 16
.L105:
	movl -68(%ebp),%ecx
	movl 12(%ecx),%eax
	pushl %eax
	movl (%edx),%eax
	movl (%eax,%edi,4),%eax
	pushl %eax
	movl -80(%ebp),%ecx
	pushl %ecx
	movl -24(%ebp),%eax
	pushl %eax
	movl 8(%ebp),%ecx
	pushl %ecx
	call *%esi
	movl %eax,%ebx
	movl %ebx,%esi
	addl $20,%esp
	movl -68(%ebp),%ecx
	movl -80(%ebp),%ebx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L107
	pushl $3860
	call _m3_fault
	.align 16
.L107:
	movl %eax,%edx
	cmpl %edi,4(%edx)
	ja .L108
	pushl $3858
	call _m3_fault
	.align 16
.L108:
	movl (%edx),%eax
	movl (%eax,%edi,4),%eax
	movl %eax,-112(%ebp)
	addl %ebx,%eax
	cmpl $32,%eax
	jle .L109
	pushl $3857
	call _m3_fault
	.align 16
.L109:
	cmpl $0,-112(%ebp)
	je .L111
	cmpl $32,-112(%ebp)
	je .L112
	movl $-1,%edx
	movl -112(%ebp),%ecx
	sall %cl,%edx
	notl %edx
	movl %edx,%eax
	movl %ebx,%ecx
	sall %cl,%eax
	notl %eax
	andl -28(%ebp),%eax
	movl %eax,-112(%ebp)
	movl %esi,%eax
	andl %edx,%eax
	sall %cl,%eax
	orl -112(%ebp),%eax
	movl %eax,-28(%ebp)
	jmp .L111
	.align 16
.L112:
	movl %esi,-28(%ebp)
.L111:
	movl -68(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L114
	pushl $3956
	call _m3_fault
	.align 16
.L114:
	movl %eax,%edx
	cmpl %edi,4(%edx)
	ja .L115
	pushl $3954
	call _m3_fault
	.align 16
.L115:
	movl (%edx),%eax
	movl (%eax,%edi,4),%eax
	addl %eax,-80(%ebp)
	incl %edi
.L101:
	cmpl %edi,-88(%ebp)
	jge .L102
.L99:
	movl -68(%ebp),%ecx
	movl 12(%ecx),%edx
	cmpl $65536,%edx
	jle .L117
	pushl $4033
	call _m3_fault
	.align 16
.L117:
	movl %edx,-32(%ebp)
	movl 12(%ebp),%esi
	testl %esi,%esi
	jne .L118
	pushl $4036
	call _m3_fault
	.align 16
.L118:
	movl -68(%ebp),%ecx
	movl %esi,-36(%ebp)
	movl 12(%ecx),%eax
	cmpl $65536,%eax
	jle .L119
	pushl $4033
	call _m3_fault
	.align 16
.L119:
	movl %eax,-40(%ebp)
	leal -28(%ebp),%ebx
	movl %ebx,-44(%ebp)
	cmpl %edx,%eax
	je .L121
	pushl $4035
	call _m3_fault
	.align 16
.L121:
	pushl %eax
	pushl %ebx
	pushl %esi
	call memmove
	movl -68(%ebp),%ecx
	addl $12,%esp
	movl 12(%ecx),%eax
	addl %eax,12(%ebp)
	incl -72(%ebp)
.L75:
	movl -76(%ebp),%ecx
	cmpl %ecx,-72(%ebp)
	jle .L76
	jmp .L72
	.align 16
.L61:
	movl 16(%ebp),%ecx
	movl (%ecx),%eax
	movl 8(%eax),%edx
	pushl %esi
	pushl %ecx
	call *%edx
	addl $8,%esp
	jmp .L72
	.align 16
.L62:
	addl %esi,12(%ebp)
	jmp .L72
	.align 16
.L63:
	movl 16(%ebp),%ecx
	movl (%ecx),%eax
	movl 8(%eax),%edx
	pushl %esi
	pushl %ecx
	call *%edx
	addl %esi,12(%ebp)
	addl $8,%esp
	jmp .L72
	.align 16
.L65:
	movl %esi,%eax
	addl %esi,%eax
	pushl %eax
	movl 12(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	call ConvertPacking__ReadData
	movl $1,%edi
	addl $12,%esp
	jmp .L123
	.align 16
.L124:
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L125
	pushl $4308
	call _m3_fault
	.align 16
.L125:
	movswl (%eax),%eax
	pushl %eax
	movl MI_Swap+52,%eax
	call *%eax
	movl %eax,%ebx
	movl 12(%ebp),%eax
	addl $4,%esp
	testl %eax,%eax
	jne .L126
	pushl $4308
	call _m3_fault
	.align 16
.L126:
	movw %bx,(%eax)
	addl $2,12(%ebp)
	incl %edi
.L123:
	cmpl %esi,%edi
	jle .L124
	jmp .L72
	.align 16
.L66:
	leal 0(,%esi,4),%eax
	pushl %eax
	movl 12(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	call ConvertPacking__ReadData
	movl $1,%edi
	addl $12,%esp
	jmp .L128
	.align 16
.L129:
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L130
	pushl $4436
	call _m3_fault
	.align 16
.L130:
	movl (%eax),%eax
	pushl %eax
	movl MI_Swap+48,%eax
	call *%eax
	movl %eax,%ebx
	movl 12(%ebp),%eax
	addl $4,%esp
	testl %eax,%eax
	jne .L131
	pushl $4436
	call _m3_fault
	.align 16
.L131:
	movl %ebx,(%eax)
	addl $4,12(%ebp)
	incl %edi
.L128:
	cmpl %esi,%edi
	jle .L129
	jmp .L72
	.align 16
.L67:
	leal 0(,%esi,8),%eax
	pushl %eax
	movl 12(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%ecx
	pushl %ecx
	call ConvertPacking__ReadData
	movl $1,%ebx
	addl $12,%esp
	jmp .L133
	.align 16
.L134:
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L135
	pushl $4564
	call _m3_fault
	.align 16
.L135:
	movl %eax,%edx
	pushl %edx
	pushl %edx
	movl MI_Swap+60,%eax
	call *%eax
	addl $8,12(%ebp)
	incl %ebx
	addl $8,%esp
.L133:
	cmpl %esi,%ebx
	jle .L134
	jmp .L72
	.align 16
.L68:
	testl %edi,%edi
	je .L138
	movl -4(%edi),%eax
	sall $11,%eax
	movl %eax,%ebx
	shrl $12,%ebx
	cmpl %ebx,MM_ConvertPacking+1208
	jg .L139
	movl MM_ConvertPacking+1204,%eax
	cmpl %ebx,4(%eax)
	jge .L138
.L139:
	pushl $4645
	call _m3_fault
	.align 16
.L138:
	movl %edi,-92(%ebp)
	movl $1,%ebx
	movl %esi,-96(%ebp)
	jmp .L140
	.align 16
.L141:
	leal -8(%ebp),%ecx
	movl %ecx,-44(%ebp)
	movl 16(%ebp),%ecx
	movl $4,-40(%ebp)
	movl (%ecx),%eax
	movl 4(%eax),%edx
	leal -44(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%edx
	addl $8,%esp
	movl 8(%ebp),%ecx
	leal 12(%ebp),%esi
	cmpb $0,49(%ecx)
	je .L143
	movl 12(%ebp),%edx
	testl %edx,%edx
	jne .L144
	pushl $4772
	call _m3_fault
	.align 16
.L144:
	movl -8(%ebp),%eax
	movl %eax,(%edx)
	movl -92(%ebp),%ecx
	cmpb $0,12(%ecx)
	je .L145
	movl 12(%ebp),%ecx
	movl %ecx,-112(%ebp)
	testl %ecx,%ecx
	jne .L146
	pushl $4804
	call _m3_fault
	.align 16
.L146:
	xorl %eax,%eax
	movb -5(%ebp),%al
	movl %eax,%edx
	shrl $7,%edx
	cmpl $1,%edx
	jbe .L147
	pushl $4801
	call _m3_fault
	.align 16
.L147:
	movl $MM_ConvertPacking+360,%eax
	movl -112(%ebp),%ecx
	movl (%eax,%edx,4),%eax
	movl %eax,4(%ecx)
	jmp .L150
	.align 16
.L145:
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L149
	pushl $4836
	call _m3_fault
	.align 16
.L149:
	movl $0,4(%eax)
	jmp .L150
	.align 16
.L143:
	movl 12(%ebp),%ecx
	movl %ecx,-112(%ebp)
	testl %ecx,%ecx
	jne .L151
	pushl $4884
	call _m3_fault
	.align 16
.L151:
	movl -112(%ebp),%ecx
	movl -8(%ebp),%eax
	movl %eax,4(%ecx)
	movl -92(%ebp),%ecx
	cmpb $0,12(%ecx)
	je .L156
	xorl %eax,%eax
	movb -8(%ebp),%al
	movl %eax,%edx
	shrl $7,%edx
	cmpl $1,%edx
	jbe .L154
	pushl $4913
	call _m3_fault
	.align 16
.L154:
	movl $MM_ConvertPacking+360,%eax
	movl -112(%ebp),%ecx
	movl (%eax,%edx,4),%eax
	movl %eax,(%ecx)
	jmp .L150
	.align 16
.L156:
	movl -112(%ebp),%ecx
	movl $0,(%ecx)
.L150:
	cmpb $10,4(%edi)
	jne .L157
	movl (%esi),%eax
	testl %eax,%eax
	jne .L158
	pushl $5028
	call _m3_fault
	.align 16
.L158:
	movl %eax,%edx
	pushl %edx
	pushl %edx
	movl MI_Swap+60,%eax
	call *%eax
	addl $8,%esp
.L157:
	addl $8,12(%ebp)
	incl %ebx
.L140:
	cmpl %ebx,-96(%ebp)
	jge .L141
	jmp .L72
	.align 16
.L69:
	movl $1,-100(%ebp)
	movl %esi,-104(%ebp)
	jmp .L161
	.align 16
.L162:
	movl 16(%ebp),%ecx
	movl (%ecx),%eax
	leal -8(%ebp),%ebx
	movl 4(%eax),%esi
	movl %ebx,-44(%ebp)
	movl $8,-40(%ebp)
	leal -44(%ebp),%eax
	pushl %eax
	pushl %ecx
	call *%esi
	addl $8,%esp
	movl %ebx,%esi
	leal 12(%ebp),%ecx
	movl %ecx,-108(%ebp)
	movl 8(%ebp),%ecx
	movl %esi,-28(%ebp)
	cmpb $0,49(%ecx)
	je .L164
	movl 12(%ebp),%edx
	testl %edx,%edx
	jne .L165
	pushl $5252
	call _m3_fault
	.align 16
.L165:
	movl -8(%ebp),%eax
	movl %eax,(%edx)
	movl -28(%ebp),%eax
	movl 4(%eax),%eax
	jmp .L184
	.align 16
.L164:
	movl 12(%ebp),%edx
	testl %edx,%edx
	jne .L168
	pushl $5332
	call _m3_fault
	.align 16
.L168:
	movl 4(%esi),%eax
	movl %eax,(%edx)
	movl -28(%ebp),%eax
	movl (%eax),%eax
.L184:
	testl %eax,%eax
	je .L167
	cmpl $-1,%eax
	je .L167
	pushl $MM_ConvertPacking+1216
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L167:
	cmpb $11,4(%edi)
	jne .L170
	movl -108(%ebp),%ecx
	movl (%ecx),%eax
	testl %eax,%eax
	jne .L171
	pushl $5460
	call _m3_fault
	.align 16
.L171:
	movl (%eax),%eax
	pushl %eax
	movl MI_Swap+48,%eax
	call *%eax
	movl %eax,%ebx
	movl -108(%ebp),%ecx
	addl $4,%esp
	movl (%ecx),%eax
	testl %eax,%eax
	jne .L172
	pushl $5460
	call _m3_fault
	.align 16
.L172:
	movl %ebx,(%eax)
.L170:
	addl $4,12(%ebp)
	incl -100(%ebp)
.L161:
	movl -104(%ebp),%ecx
	cmpl %ecx,-100(%ebp)
	jle .L162
	jmp .L72
	.align 16
.L70:
	testl %edi,%edi
	je .L174
	movl -4(%edi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1248
	jg .L175
	movl MM_ConvertPacking+1244,%eax
	cmpl %edx,4(%eax)
	jge .L174
.L175:
	pushl $5557
	call _m3_fault
	.align 16
.L174:
	movl $1,%ebx
	jmp .L176
	.align 16
.L177:
	movl 16(%ebp),%ecx
	movl (%ecx),%eax
	movl 12(%eax),%eax
	movl %eax,-112(%ebp)
	xorl %eax,%eax
	movb 12(%edi),%al
	pushl %eax
	pushl %ecx
	movl -112(%ebp),%ecx
	call *%ecx
	movl 12(%ebp),%edx
	addl $8,%esp
	testl %edx,%edx
	jne .L178
	pushl $5604
	call _m3_fault
	.align 16
.L178:
	movl %eax,(%edx)
	movl 8(%ebp),%ecx
	incl %ebx
	movl 52(%ecx),%eax
	sarl $3,%eax
	addl %eax,12(%ebp)
.L176:
	cmpl %esi,%ebx
	jle .L177
.L71:
.L72:
	incl -60(%ebp)
.L58:
	movl -64(%ebp),%ecx
	cmpl %ecx,-60(%ebp)
	jle .L59
	incl -52(%ebp)
.L56:
	movl -56(%ebp),%ecx
	cmpl %ecx,-52(%ebp)
	jle .L57
	movl -20(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl 12(%ebp),%eax
.L183:
	leal -124(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe3:
	.size	 ConvertPacking__Convert,.Lfe3-ConvertPacking__Convert
	.align 16
	.type	 ConvertPacking__WriteData,@function
ConvertPacking__WriteData:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%edx
	movl 16(%ebp),%esi
	jmp .L186
	.align 16
.L187:
	movl (%edi),%eax
	movl 4(%eax),%ecx
	testl %edx,%edx
	jne .L188
	pushl $5876
	call _m3_fault
	.align 16
.L188:
	movl %edx,%ebx
	movl %ebx,-8(%ebp)
	movl $65536,-4(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edi
	call *%ecx
	leal 65536(%ebx),%edx
	addl $-65536,%esi
	addl $8,%esp
.L186:
	cmpl $65535,%esi
	jg .L187
	testl %esi,%esi
	jle .L185
	cmpl $65536,%esi
	jle .L192
	pushl $5937
	call _m3_fault
	.align 16
.L192:
	movl %esi,-4(%ebp)
	testl %edx,%edx
	jne .L193
	pushl $5940
	call _m3_fault
	.align 16
.L193:
	movl %edx,-8(%ebp)
	movl (%edi),%eax
	movl 4(%eax),%ebx
	leal -8(%ebp),%eax
	pushl %eax
	pushl %edi
	call *%ebx
.L185:
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe4:
	.size	 ConvertPacking__WriteData,.Lfe4-ConvertPacking__WriteData
.section	.rodata
	.align 4
	.type	 L_19.1,@object
	.size	 L_19.1,56
L_19.1:
	.long .L202
	.long .L203
	.long .L204
	.long .L205
	.long .L206
	.long .L207
	.long .L208
	.long .L209
	.long .L210
	.long .L211
	.long .L212
	.long .L213
	.long .L214
	.long .L215
.text
	.align 16
	.type	 ConvertPacking__Write,@function
ConvertPacking__Write:
	pushl %ebp
	movl %esp,%ebp
	subl $36,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 20(%ebp),%ebx
.L195:
	movl $MM_ConvertPacking+1252,-4(%ebp)
	movl $4,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edi
	movl %edi,RTThread__handlerStack
	movl 8(%ebp),%edi
	movl $1,-16(%ebp)
	movl 80(%edi),%eax
	testl %eax,%eax
	je .L196
	movl %eax,%edx
	movl (%edx),%eax
	movl 16(%eax),%ecx
	pushl %ebx
	movl 16(%ebp),%edi
	pushl %edi
	movl 12(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	movl %eax,%edx
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl %edx,%eax
	jmp .L194
	.align 16
.L196:
	movl 8(%ebp),%edi
	movl 4(%edi),%edx
	movl (%edx),%eax
	movl 32(%eax),%ecx
	pushl %edx
	call *%ecx
	addl $4,%esp
	cmpl $2,%eax
	jne .L197
	movl %ebx,-16(%ebp)
	movl $1,%ebx
.L197:
	movl $1,-20(%ebp)
	movl %ebx,-24(%ebp)
	jmp .L198
	.align 16
.L199:
	movl 8(%ebp),%edi
	movl 4(%edi),%ecx
	movl (%ecx),%eax
	movl 32(%eax),%edx
	pushl %ecx
	call *%edx
	movl $0,-28(%ebp)
	decl %eax
	movl %eax,-32(%ebp)
	addl $4,%esp
	jmp .L200
	.align 16
.L201:
	movl 8(%ebp),%edi
	movl 4(%edi),%edx
	movl (%edx),%eax
	movl -28(%ebp),%edi
	movl 44(%eax),%ecx
	pushl %edi
	pushl %edx
	call *%ecx
	movl %eax,%edx
	movl %edx,%ecx
	movl -16(%ebp),%ebx
	addl $8,%esp
	xorl %eax,%eax
	movb 4(%ecx),%al
	imull 8(%ecx),%ebx
	jmp *L_19.1(,%eax,4)
	.align 16
.L202:
	pushl %ebx
	movl 12(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%edi
	pushl %edi
	call ConvertPacking__WriteData
	addl %ebx,12(%ebp)
	addl $12,%esp
	jmp .L216
	.align 16
.L205:
	movl 16(%ebp),%edi
	movl (%edi),%eax
	movl 8(%eax),%edx
	pushl %ebx
	pushl %edi
	call *%edx
	addl %ebx,12(%ebp)
	jmp .L227
	.align 16
.L214:
	testl %ecx,%ecx
	je .L217
	movl -4(%ecx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1248
	jg .L218
	movl MM_ConvertPacking+1244,%eax
	cmpl %edx,4(%eax)
	jge .L217
.L218:
	pushl $6485
	call _m3_fault
	.align 16
.L217:
	movl %ecx,-36(%ebp)
	movl $1,%esi
	jmp .L219
	.align 16
.L220:
	movl 16(%ebp),%edi
	movl (%edi),%eax
	movl 12(%eax),%edx
	movl 12(%ebp),%eax
	testl %eax,%eax
	jne .L221
	pushl $6532
	call _m3_fault
	.align 16
.L221:
	movl (%eax),%eax
	pushl %eax
	movl -36(%ebp),%edi
	xorl %eax,%eax
	movb 12(%edi),%al
	pushl %eax
	movl 16(%ebp),%edi
	pushl %edi
	call *%edx
	movl 8(%ebp),%edi
	incl %esi
	addl $12,%esp
	movl 52(%edi),%eax
	sarl $3,%eax
	addl %eax,12(%ebp)
.L219:
	cmpl %ebx,%esi
	jle .L220
.L215:
	jmp .L216
	.align 16
.L206:
	pushl $MM_ConvertPacking+1272
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L203:
	pushl $MM_ConvertPacking+1332
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L204:
	pushl $MM_ConvertPacking+1392
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L207:
	pushl $MM_ConvertPacking+1448
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L208:
	pushl $MM_ConvertPacking+1504
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L209:
	pushl $MM_ConvertPacking+1560
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L210:
	pushl $MM_ConvertPacking+1616
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L212:
	pushl $MM_ConvertPacking+1676
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L211:
	pushl $MM_ConvertPacking+1736
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L213:
	pushl $MM_ConvertPacking+1796
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
.L227:
	addl $8,%esp
.L216:
	incl -28(%ebp)
.L200:
	movl -32(%ebp),%edi
	cmpl %edi,-28(%ebp)
	jle .L201
	incl -20(%ebp)
.L198:
	movl -24(%ebp),%edi
	cmpl %edi,-20(%ebp)
	jle .L199
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	movl 12(%ebp),%eax
.L226:
.L194:
	leal -48(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe5:
	.size	 ConvertPacking__Write,.Lfe5-ConvertPacking__Write
.section	.rodata
	.align 4
	.type	 L_22.2,@object
	.size	 L_22.2,56
L_22.2:
	.long .L231
	.long .L232
	.long .L233
	.long .L234
	.long .L235
	.long .L236
	.long .L237
	.long .L238
	.long .L239
	.long .L240
	.long .L239
	.long .L240
	.long .L241
	.long .L242
.text
	.align 16
	.type	 ConvertPacking__AppendProg,@function
ConvertPacking__AppendProg:
	pushl %ebp
	movl %esp,%ebp
	subl $40,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%ecx
	movl $0,-4(%ebp)
	movl 4(%ecx),%edx
	movl (%edx),%eax
	movl 32(%eax),%eax
	movl %eax,-40(%ebp)
	pushl %edx
	movl -40(%ebp),%edi
	call *%edi
	movl $0,-20(%ebp)
	decl %eax
	movl %eax,-24(%ebp)
	addl $4,%esp
	jmp .L229
	.align 16
.L230:
	movl 12(%ebp),%ecx
	movl 4(%ecx),%ecx
	movl %ecx,-40(%ebp)
	movl (%ecx),%eax
	movl -20(%ebp),%edi
	movl 44(%eax),%edx
	pushl %edi
	pushl %ecx
	call *%edx
	movl %eax,%ebx
	movl %ebx,%esi
	xorl %eax,%eax
	movb 4(%esi),%al
	addl $8,%esp
	jmp *L_22.2(,%eax,4)
	.align 16
.L231:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%ecx
	leal 0(,%ecx,8),%eax
	jmp .L261
	.align 16
.L235:
	testl %esi,%esi
	je .L244
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1200
	jg .L245
	movl MM_ConvertPacking+1196,%eax
	cmpl %edx,4(%eax)
	jge .L244
.L245:
	pushl $7269
	call _m3_fault
	.align 16
.L244:
	movl %esi,-28(%ebp)
	movl MM_ConvertPacking+1196,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	leal -16(%ebp),%edx
	leal -8(%ebp),%edi
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl 12(%esi),%eax
	movl %eax,12(%ebx)
	movl %edi,-16(%ebp)
	movl $1,-12(%ebp)
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L246
	pushl $7284
	call _m3_fault
	.align 16
.L246:
	movl 4(%eax),%eax
	movl %eax,-8(%ebp)
	pushl %edx
	movl MM_ConvertPacking+1860,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%edx
	movl %edx,16(%ebx)
	movl %ebx,-32(%ebp)
	addl $8,%esp
	testl %edx,%edx
	jne .L247
	pushl $7348
	call _m3_fault
	.align 16
.L247:
	xorl %ebx,%ebx
	movl 4(%edx),%edx
	decl %edx
	movl %edx,-36(%ebp)
	jmp .L248
	.align 16
.L249:
	movl -32(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L250
	pushl $7364
	call _m3_fault
	.align 16
.L250:
	movl %eax,-40(%ebp)
	cmpl %ebx,4(%eax)
	ja .L251
	pushl $7362
	call _m3_fault
	.align 16
.L251:
	movl -28(%ebp),%edi
	movl 16(%edi),%eax
	testl %eax,%eax
	jne .L252
	pushl $7364
	call _m3_fault
	.align 16
.L252:
	movl %eax,%edx
	cmpl %ebx,4(%edx)
	ja .L253
	pushl $7362
	call _m3_fault
	.align 16
.L253:
	movl -40(%ebp),%ecx
	movl (%edx),%edx
	movl (%ecx),%eax
	movl (%edx,%ebx,4),%edx
	movl %edx,(%eax,%ebx,4)
	incl %ebx
.L248:
	cmpl %ebx,-36(%ebp)
	jge .L249
	movl -32(%ebp),%edi
	movl %edi,-4(%ebp)
	movl -28(%ebp),%ecx
	movl 8(%ebp),%edi
	movl 12(%ecx),%ecx
	leal 0(,%ecx,8),%eax
	imull 8(%esi),%eax
	addl %eax,12(%edi)
	movl -28(%ebp),%ecx
	movl 12(%ecx),%ecx
	leal 0(,%ecx,8),%eax
	imull 8(%esi),%eax
	addl %eax,16(%edi)
	jmp .L243
	.align 16
.L232:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%esi),%esi
	movl 8(%ebp),%edi
	leal 0(,%esi,8),%eax
	addl %eax,12(%edi)
	jmp .L243
	.align 16
.L233:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%esi),%esi
	movl 8(%ebp),%ecx
	leal 0(,%esi,8),%eax
	addl %eax,16(%ecx)
	jmp .L243
	.align 16
.L234:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%edi
	leal 0(,%edi,8),%eax
.L261:
	addl %eax,12(%ebx)
	movl 8(%esi),%esi
	leal 0(,%esi,8),%eax
	addl %eax,16(%ebx)
	jmp .L243
	.align 16
.L236:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%eax
	sall $4,%eax
	addl %eax,12(%ebx)
	movl 8(%esi),%eax
	sall $4,%eax
	addl %eax,16(%ebx)
	jmp .L243
	.align 16
.L237:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%eax
	sall $5,%eax
	jmp .L262
	.align 16
.L238:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%eax
	sall $6,%eax
	jmp .L263
	.align 16
.L239:
	testl %esi,%esi
	je .L255
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1208
	jg .L256
	movl MM_ConvertPacking+1204,%eax
	cmpl %edx,4(%eax)
	jge .L255
.L256:
	pushl $7829
	call _m3_fault
	.align 16
.L255:
	movl MM_ConvertPacking+1204,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movb 12(%esi),%al
	movb %al,12(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%eax
	sall $5,%eax
.L263:
	addl %eax,12(%ebx)
	movl 8(%esi),%eax
	sall $6,%eax
	addl %eax,16(%ebx)
	jmp .L243
	.align 16
.L240:
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%eax
	sall $6,%eax
.L262:
	addl %eax,12(%ebx)
	movl 8(%esi),%eax
	sall $5,%eax
	addl %eax,16(%ebx)
	jmp .L243
	.align 16
.L241:
	testl %esi,%esi
	je .L257
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1248
	jg .L258
	movl MM_ConvertPacking+1244,%eax
	cmpl %edx,4(%eax)
	jge .L257
.L258:
	pushl $8005
	call _m3_fault
	.align 16
.L257:
	movl MM_ConvertPacking+1244,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	movb 4(%esi),%al
	addl $4,%esp
	movb %al,4(%ebx)
	movl 8(%esi),%eax
	movl %eax,8(%ebx)
	movb 12(%esi),%al
	movb %al,12(%ebx)
	movl %ebx,-4(%ebp)
	movl 8(%ebp),%ebx
	movl 8(%esi),%eax
	imull 36(%ebx),%eax
	addl %eax,12(%ebx)
	movl 8(%esi),%eax
	imull 52(%ebx),%eax
	addl %eax,16(%ebx)
	jmp .L243
	.align 16
.L242:
	jmp .L228
	.align 16
.L243:
	movl 8(%ebp),%ecx
	movl 4(%ecx),%ebx
	movl (%ebx),%eax
	movl 12(%eax),%edx
	leal -4(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
	incl -20(%ebp)
	addl $8,%esp
.L229:
	movl -24(%ebp),%edi
	cmpl %edi,-20(%ebp)
	jle .L230
	pushl $MM_ConvertPacking+1872
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
.L228:
	leal -52(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe6:
	.size	 ConvertPacking__AppendProg,.Lfe6-ConvertPacking__AppendProg
	.align 16
	.type	 ConvertPacking__GetHiKind,@function
ConvertPacking__GetHiKind:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	movl (%ebx),%eax
	movl 16(%ebp),%esi
	movl 32(%eax),%eax
	pushl %ebx
	call *%eax
	addl $4,%esp
	testl %eax,%eax
	jle .L265
	movl (%ebx),%eax
	movl 36(%eax),%eax
	pushl %ebx
	call *%eax
	movl %eax,(%esi)
	movb 12(%ebp),%dl
	cmpb %dl,4(%eax)
	jne .L265
	movl $1,%eax
	jmp .L267
	.align 16
.L265:
	xorl %eax,%eax
.L267:
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe7:
	.size	 ConvertPacking__GetHiKind,.Lfe7-ConvertPacking__GetHiKind
	.align 16
	.type	 ConvertPacking__AddCopy,@function
ConvertPacking__AddCopy:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L269:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	leal -4(%ebp),%eax
	addl %esi,12(%ebx)
	addl %esi,16(%ebx)
	pushl %eax
	pushl $0
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L270
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $3,%eax
	addl %eax,8(%ebx)
	jmp .L271
	.align 16
.L270:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $3,%esi
	movb $0,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L271:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe8:
	.size	 ConvertPacking__AddCopy,.Lfe8-ConvertPacking__AddCopy
	.align 16
	.type	 ConvertPacking__AddPackedSwapFirstField,@function
ConvertPacking__AddPackedSwapFirstField:
	pushl %ebp
	movl %esp,%ebp
	subl $28,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%edi
.L273:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%esi
	movl %esi,RTThread__handlerStack
	pushl $8
	pushl %edi
	call ConvertPacking__RoundUp
	movl 8(%ebp),%ebx
	movl %eax,-28(%ebp)
	addl %eax,12(%ebx)
	movl -28(%ebp),%esi
	addl %esi,16(%ebx)
	movl MM_ConvertPacking+1196,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	addl $12,%esp
	movb $4,4(%ebx)
	movl $1,8(%ebx)
	movl -28(%ebp),%eax
	sarl $3,%eax
	jns .L274
	pushl $8737
	call _m3_fault
	.align 16
.L274:
	movl %eax,12(%ebx)
	leal -20(%ebp),%eax
	leal -12(%ebp),%esi
	movl %esi,-20(%ebp)
	movl $1,-16(%ebp)
	movl $1,-12(%ebp)
	pushl %eax
	movl MM_ConvertPacking+1860,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%ecx
	movl %ecx,16(%ebx)
	addl $8,%esp
	testl %ecx,%ecx
	jne .L275
	pushl $8788
	call _m3_fault
	.align 16
.L275:
	cmpl $0,4(%ecx)
	jne .L276
	pushl $8786
	call _m3_fault
	.align 16
.L276:
	testl %edi,%edi
	jge .L277
	pushl $8785
	call _m3_fault
	.align 16
.L277:
	movl (%ecx),%eax
	movl %edi,(%eax)
	movl 8(%ebp),%esi
	movl 4(%esi),%edx
	movl (%edx),%eax
	movl 12(%eax),%ecx
	movl %ebx,-24(%ebp)
	leal -24(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
.L278:
	movl -8(%ebp),%eax
	leal -40(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe9:
	.size	 ConvertPacking__AddPackedSwapFirstField,.Lfe9-ConvertPacking__AddPackedSwapFirstField
	.align 16
	.type	 ConvertPacking__AddPackedSwapNextField,@function
ConvertPacking__AddPackedSwapNextField:
	pushl %ebp
	movl %esp,%ebp
	subl $36,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
.L280:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%ebx
	movl %ebx,RTThread__handlerStack
	movl $0,-4(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	pushl $4
	movl 4(%edi),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testb %al,%al
	jne .L281
	pushl $8992
	call _m3_fault
	.align 16
.L281:
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L282
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1200
	jg .L283
	movl MM_ConvertPacking+1196,%eax
	cmpl %edx,4(%eax)
	jge .L282
.L283:
	pushl $9013
	call _m3_fault
	.align 16
.L282:
	movl -4(%ebp),%esi
	xorl %ecx,%ecx
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L284
	pushl $9044
	call _m3_fault
	.align 16
.L284:
	movl %ecx,%edx
	movl 4(%eax),%eax
	decl %eax
	movl %eax,-36(%ebp)
	jmp .L285
	.align 16
.L286:
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L287
	pushl $9060
	call _m3_fault
	.align 16
.L287:
	cmpl %edx,4(%eax)
	ja .L288
	pushl $9058
	call _m3_fault
	.align 16
.L288:
	movl (%eax),%eax
	addl (%eax,%edx,4),%ecx
	incl %edx
.L285:
	cmpl %edx,-36(%ebp)
	jge .L286
	movl %ecx,%edx
	andl $7,%edx
	movl 16(%ebp),%eax
	andl $7,%eax
	cmpl %eax,%edx
	je .L290
	pushl $9136
	call _m3_fault
	.align 16
.L290:
	movl 12(%ebp),%ebx
	leal (%ebx,%ecx),%eax
	testl %eax,%eax
	jge .L291
	pushl $9169
	call _m3_fault
	.align 16
.L291:
	movl %eax,%ecx
	cmpl %ecx,36(%edi)
	jge .L292
	pushl $9296
	call _m3_fault
	.align 16
.L292:
	pushl $8
	pushl %ecx
	call ConvertPacking__RoundUp
	movl %eax,%edx
	addl $8,%esp
	testl %edx,%edx
	jge .L293
	pushl $9377
	call _m3_fault
	.align 16
.L293:
	movl %edx,%eax
	sarl $3,%eax
	movl %eax,%edx
	subl 12(%esi),%edx
	testl %edx,%edx
	jle .L294
	leal 0(,%edx,8),%eax
	addl %eax,12(%edi)
	addl %eax,16(%edi)
	movl 12(%esi),%eax
	addl %edx,%eax
	jns .L295
	pushl $9457
	call _m3_fault
	.align 16
.L295:
	movl %eax,12(%esi)
.L294:
	leal -24(%ebp),%edx
	leal -16(%ebp),%ebx
	movl %ebx,-24(%ebp)
	movl $1,-20(%ebp)
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L296
	pushl $9524
	call _m3_fault
	.align 16
.L296:
	movl 4(%eax),%eax
	incl %eax
	movl %eax,-16(%ebp)
	pushl %edx
	movl MM_ConvertPacking+1860,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,-36(%ebp)
	addl $8,%esp
	testl %eax,%eax
	jne .L297
	pushl $9556
	call _m3_fault
	.align 16
.L297:
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L298
	pushl $9556
	call _m3_fault
	.align 16
.L298:
	movl 4(%eax),%ecx
	movl %ecx,-28(%ebp)
	movl -36(%ebp),%ebx
	movl %ecx,%eax
	subl 4(%ebx),%eax
	testl %eax,%eax
	jle .L299
	pushl $9553
	call _m3_fault
	.align 16
.L299:
	movl -36(%ebp),%ebx
	movl (%ebx),%edi
	movl %edi,-32(%ebp)
	movl 16(%esi),%edx
	testl %edx,%edx
	jne .L300
	pushl $9556
	call _m3_fault
	.align 16
.L300:
	cmpl %ecx,4(%edx)
	je .L301
	pushl $9555
	call _m3_fault
	.align 16
.L301:
	leal 0(,%ecx,4),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	pushl %edi
	call memmove
	movl -36(%ebp),%ebx
	movl %ebx,16(%esi)
	addl $12,%esp
	movl 4(%ebx),%edx
	leal -1(%edx),%eax
	cmpl %edx,%eax
	jb .L304
	pushl $9602
	call _m3_fault
	.align 16
.L304:
	cmpl $0,12(%ebp)
	jge .L305
	pushl $9601
	call _m3_fault
	.align 16
.L305:
	movl -36(%ebp),%ebx
	movl (%ebx),%eax
	movl 12(%ebp),%ebx
	movl %ebx,-4(%eax,%edx,4)
.L306:
	movl -12(%ebp),%eax
	leal -48(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe10:
	.size	 ConvertPacking__AddPackedSwapNextField,.Lfe10-ConvertPacking__AddPackedSwapNextField
	.align 16
	.type	 ConvertPacking__AddPackedSwapArray,@function
ConvertPacking__AddPackedSwapArray:
	pushl %ebp
	movl %esp,%ebp
	subl $48,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
.L308:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%edi
	movl %edi,RTThread__handlerStack
	movl 24(%ebp),%edi
	pushl %edi
	movl 20(%ebp),%edi
	pushl %edi
	call m3_div
	movl %eax,%esi
	addl $8,%esp
	cmpl %esi,16(%ebp)
	jle .L309
	movl 20(%ebp),%eax
	imull %esi,%eax
	cmpl %eax,24(%ebp)
	je .L309
	pushl $9808
	call _m3_fault
	.align 16
.L309:
	movl 8(%ebp),%ebx
	movl 12(%ebp),%edi
	addl %edi,12(%ebx)
	addl %edi,16(%ebx)
	movl 16(%ebp),%edi
	pushl %edi
	pushl %esi
	call m3_div
	movl %eax,-32(%ebp)
	movl 24(%ebp),%edi
	sarl $3,%edi
	movl %edi,-36(%ebp)
	movl 16(%ebp),%edi
	pushl %edi
	pushl %esi
	call m3_mod
	movl %eax,-40(%ebp)
	movl 12(%ebp),%edi
	pushl %edi
	movl 24(%ebp),%edi
	pushl %edi
	call m3_mod
	sarl $3,%eax
	movl %eax,-44(%ebp)
	addl $24,%esp
	cmpl $0,-32(%ebp)
	jle .L310
	movl MM_ConvertPacking+1196,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ebx
	addl $4,%esp
	movb $4,4(%ebx)
	movl -32(%ebp),%edi
	movl %edi,8(%ebx)
	cmpl $0,-36(%ebp)
	jge .L311
	pushl $10049
	call _m3_fault
	.align 16
.L311:
	movl -36(%ebp),%edi
	movl %edi,12(%ebx)
	leal -20(%ebp),%eax
	leal -12(%ebp),%edi
	movl %edi,-20(%ebp)
	movl $1,-16(%ebp)
	movl %esi,-12(%ebp)
	pushl %eax
	movl MM_ConvertPacking+1860,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%esi
	movl %ebx,%edx
	addl $8,%esp
	movl %esi,16(%edx)
	movl %edx,-48(%ebp)
	testl %esi,%esi
	jne .L312
	pushl $10116
	call _m3_fault
	.align 16
.L312:
	xorl %ecx,%ecx
	movl 4(%esi),%ebx
	decl %ebx
	jmp .L313
	.align 16
.L314:
	movl -48(%ebp),%edi
	movl 16(%edi),%eax
	testl %eax,%eax
	jne .L315
	pushl $10132
	call _m3_fault
	.align 16
.L315:
	movl %eax,%edx
	cmpl %ecx,4(%edx)
	ja .L316
	pushl $10130
	call _m3_fault
	.align 16
.L316:
	cmpl $0,20(%ebp)
	jge .L317
	pushl $10129
	call _m3_fault
	.align 16
.L317:
	movl (%edx),%eax
	movl 20(%ebp),%edi
	movl %edi,(%eax,%ecx,4)
	incl %ecx
.L313:
	cmpl %ebx,%ecx
	jle .L314
	movl 8(%ebp),%edi
	movl 4(%edi),%edx
	movl (%edx),%eax
	movl -48(%ebp),%edi
	movl 12(%eax),%esi
	movl %edi,-24(%ebp)
	leal -24(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%esi
	addl $8,%esp
.L310:
	cmpl $0,-44(%ebp)
	jle .L328
	movl MM_ConvertPacking+1196,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%esi
	addl $4,%esp
	leal -20(%ebp),%eax
	movb $4,4(%esi)
	movl $1,8(%esi)
	movl -44(%ebp),%edi
	movl %edi,12(%esi)
	leal -12(%ebp),%edi
	movl %edi,-20(%ebp)
	movl $1,-16(%ebp)
	movl -40(%ebp),%edi
	movl %edi,-12(%ebp)
	pushl %eax
	movl MM_ConvertPacking+1860,%eax
	pushl %eax
	movl MI_RTHooks+84,%eax
	call *%eax
	movl %eax,%edx
	movl %esi,%ebx
	addl $8,%esp
	movl %edx,16(%ebx)
	testl %edx,%edx
	jne .L321
	pushl $10356
	call _m3_fault
	.align 16
.L321:
	xorl %ecx,%ecx
	movl 4(%edx),%edx
	decl %edx
	jmp .L322
	.align 16
.L323:
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L324
	pushl $10372
	call _m3_fault
	.align 16
.L324:
	movl %eax,%ebx
	cmpl %ecx,4(%ebx)
	ja .L325
	pushl $10370
	call _m3_fault
	.align 16
.L325:
	cmpl $0,20(%ebp)
	jge .L326
	pushl $10369
	call _m3_fault
	.align 16
.L326:
	movl (%ebx),%eax
	movl 20(%ebp),%edi
	movl %edi,(%eax,%ecx,4)
	incl %ecx
.L322:
	cmpl %edx,%ecx
	jle .L323
	movl 8(%ebp),%edi
	movl 4(%edi),%ebx
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %esi,-28(%ebp)
	leal -28(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L328:
	movl -8(%ebp),%eax
	leal -60(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe11:
	.size	 ConvertPacking__AddPackedSwapArray,.Lfe11-ConvertPacking__AddPackedSwapArray
	.align 16
	.type	 ConvertPacking__AddCopy32to64,@function
ConvertPacking__AddCopy32to64:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L330:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	movl %esi,%eax
	addl %esi,%eax
	addl %esi,12(%ebx)
	addl %eax,16(%ebx)
	leal -4(%ebp),%eax
	pushl %eax
	pushl $8
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L331
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L332
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1208
	jg .L333
	movl MM_ConvertPacking+1204,%eax
	cmpl %edx,4(%eax)
	jge .L332
.L333:
	pushl $10597
	call _m3_fault
	.align 16
.L332:
	movl -4(%ebp),%edx
	movb 16(%ebp),%cl
	cmpb %cl,12(%edx)
	jne .L331
	movl %esi,%eax
	sarl $5,%eax
	addl %eax,8(%edx)
	jmp .L335
	.align 16
.L331:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1204,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edi
	sarl $5,%esi
	movb $8,4(%edi)
	movl %esi,8(%edi)
	movb 16(%ebp),%cl
	movb %cl,12(%edi)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %edi,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L335:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe12:
	.size	 ConvertPacking__AddCopy32to64,.Lfe12-ConvertPacking__AddCopy32to64
	.align 16
	.type	 ConvertPacking__AddCopy64to32,@function
ConvertPacking__AddCopy64to32:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L337:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl %edi,%ebx
	movl $0,-4(%ebp)
	addl %esi,12(%ebx)
	testl $1,%esi
	je .L338
	pushl $10832
	call _m3_fault
	.align 16
.L338:
	movl %esi,%eax
	sarl $1,%eax
	addl %eax,16(%ebx)
	leal -4(%ebp),%eax
	pushl %eax
	pushl $9
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L339
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $6,%eax
	addl %eax,8(%ebx)
	jmp .L340
	.align 16
.L339:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $6,%esi
	movb $9,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L340:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe13:
	.size	 ConvertPacking__AddCopy64to32,.Lfe13-ConvertPacking__AddCopy64to32
	.align 16
	.type	 ConvertPacking__AddSkipFrom,@function
ConvertPacking__AddSkipFrom:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L342:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	leal -4(%ebp),%eax
	addl %esi,12(%ebx)
	pushl %eax
	pushl $1
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L343
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $3,%eax
	addl %eax,8(%ebx)
	jmp .L344
	.align 16
.L343:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $3,%esi
	movb $1,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L344:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe14:
	.size	 ConvertPacking__AddSkipFrom,.Lfe14-ConvertPacking__AddSkipFrom
	.align 16
	.type	 ConvertPacking__AddSkipTo,@function
ConvertPacking__AddSkipTo:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L346:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	leal -4(%ebp),%eax
	addl %esi,16(%ebx)
	pushl %eax
	pushl $2
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L347
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $3,%eax
	addl %eax,8(%ebx)
	jmp .L348
	.align 16
.L347:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $3,%esi
	movb $2,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L348:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe15:
	.size	 ConvertPacking__AddSkipTo,.Lfe15-ConvertPacking__AddSkipTo
	.align 16
	.type	 ConvertPacking__AddSkipOrCopy,@function
ConvertPacking__AddSkipOrCopy:
	pushl %ebp
	movl %esp,%ebp
	subl $20,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%edi
.L350:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl 8(%ebp),%ebx
	leal -4(%ebp),%esi
	addl %edi,12(%ebx)
	addl %edi,16(%ebx)
	pushl %esi
	pushl $0
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L351
.L354:
	movl -4(%ebp),%ebx
	movl %edi,%eax
	sarl $3,%eax
	addl %eax,8(%ebx)
	jmp .L353
	.align 16
.L351:
	pushl %esi
	pushl $3
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	jne .L354
	movl 8(%ebp),%edx
	movl MM_ConvertPacking+1852,%eax
	movl 4(%edx),%ebx
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $3,%edi
	movb $3,4(%ecx)
	movl %edi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%eax
	movl %eax,-20(%ebp)
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	movl -20(%ebp),%edx
	call *%edx
.L353:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -32(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe16:
	.size	 ConvertPacking__AddSkipOrCopy,.Lfe16-ConvertPacking__AddSkipOrCopy
	.align 16
	.type	 ConvertPacking__AddSkip,@function
ConvertPacking__AddSkip:
	pushl %ebp
	movl %esp,%ebp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 12(%ebp),%ebx
	movl 16(%ebp),%edi
	cmpl %edi,%ebx
	jne .L356
	testl %edi,%edi
	jle .L355
	movl 8(%ebp),%edx
	movl (%edx),%eax
	movl 68(%eax),%eax
	jmp .L363
	.align 16
.L356:
	movl %ebx,%esi
	cmpl %edi,%ebx
	jle .L359
	movl %edi,%esi
.L359:
	testl %esi,%esi
	jle .L360
	movl 8(%ebp),%edx
	movl (%edx),%eax
	movl 68(%eax),%eax
	pushl %esi
	pushl %edx
	call *%eax
	addl $8,%esp
.L360:
	subl %esi,%ebx
	subl %esi,%edi
	testl %ebx,%ebx
	jle .L361
	movl 8(%ebp),%edx
	movl (%edx),%eax
	movl 60(%eax),%eax
	pushl %ebx
	pushl %edx
	call *%eax
	addl $8,%esp
.L361:
	testl %edi,%edi
	jle .L355
	movl 8(%ebp),%edx
	movl (%edx),%eax
	movl 64(%eax),%eax
.L363:
	pushl %edi
	pushl %edx
	call *%eax
.L355:
	leal -12(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe17:
	.size	 ConvertPacking__AddSkip,.Lfe17-ConvertPacking__AddSkip
	.align 16
	.type	 ConvertPacking__AddSwap16,@function
ConvertPacking__AddSwap16:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L365:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	leal -4(%ebp),%eax
	addl %esi,12(%ebx)
	addl %esi,16(%ebx)
	pushl %eax
	pushl $5
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L366
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $4,%eax
	addl %eax,8(%ebx)
	jmp .L367
	.align 16
.L366:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $4,%esi
	movb $5,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L367:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe18:
	.size	 ConvertPacking__AddSwap16,.Lfe18-ConvertPacking__AddSwap16
	.align 16
	.type	 ConvertPacking__AddSwap32,@function
ConvertPacking__AddSwap32:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L369:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	leal -4(%ebp),%eax
	addl %esi,12(%ebx)
	addl %esi,16(%ebx)
	pushl %eax
	pushl $6
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L370
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $5,%eax
	addl %eax,8(%ebx)
	jmp .L371
	.align 16
.L370:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $5,%esi
	movb $6,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L371:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe19:
	.size	 ConvertPacking__AddSwap32,.Lfe19-ConvertPacking__AddSwap32
	.align 16
	.type	 ConvertPacking__AddSwap64,@function
ConvertPacking__AddSwap64:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L373:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	leal -4(%ebp),%eax
	addl %esi,12(%ebx)
	addl %esi,16(%ebx)
	pushl %eax
	pushl $7
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L374
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $6,%eax
	addl %eax,8(%ebx)
	jmp .L375
	.align 16
.L374:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $6,%esi
	movb $7,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L375:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe20:
	.size	 ConvertPacking__AddSwap64,.Lfe20-ConvertPacking__AddSwap64
	.align 16
	.type	 ConvertPacking__AddSwap32to64,@function
ConvertPacking__AddSwap32to64:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L377:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl $0,-4(%ebp)
	movl %edi,%ebx
	movl %esi,%eax
	addl %esi,%eax
	addl %esi,12(%ebx)
	addl %eax,16(%ebx)
	leal -4(%ebp),%eax
	pushl %eax
	pushl $10
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L378
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L379
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1208
	jg .L380
	movl MM_ConvertPacking+1204,%eax
	cmpl %edx,4(%eax)
	jge .L379
.L380:
	pushl $12725
	call _m3_fault
	.align 16
.L379:
	movl -4(%ebp),%edx
	movb 16(%ebp),%cl
	cmpb %cl,12(%edx)
	jne .L378
	movl %esi,%eax
	sarl $5,%eax
	addl %eax,8(%edx)
	jmp .L382
	.align 16
.L378:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1204,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edi
	sarl $5,%esi
	movb $10,4(%edi)
	movl %esi,8(%edi)
	movb 16(%ebp),%cl
	movb %cl,12(%edi)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %edi,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L382:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe21:
	.size	 ConvertPacking__AddSwap32to64,.Lfe21-ConvertPacking__AddSwap32to64
	.align 16
	.type	 ConvertPacking__AddSwap64to32,@function
ConvertPacking__AddSwap64to32:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%esi
.L384:
	movl $5,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%edx
	movl %edx,RTThread__handlerStack
	movl %edi,%ebx
	movl $0,-4(%ebp)
	addl %esi,12(%ebx)
	testl $1,%esi
	je .L385
	pushl $12960
	call _m3_fault
	.align 16
.L385:
	movl %esi,%eax
	sarl $1,%eax
	addl %eax,16(%ebx)
	leal -4(%ebp),%eax
	pushl %eax
	pushl $11
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L386
	movl -4(%ebp),%ebx
	movl %esi,%eax
	sarl $6,%eax
	addl %eax,8(%ebx)
	jmp .L387
	.align 16
.L386:
	movl 4(%edi),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	sarl $6,%esi
	movb $11,4(%ecx)
	movl %esi,8(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-16(%ebp)
	leal -16(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L387:
	movl -12(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -28(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe22:
	.size	 ConvertPacking__AddSwap64to32,.Lfe22-ConvertPacking__AddSwap64to32
	.align 16
	.type	 ConvertPacking__AddRef,@function
ConvertPacking__AddRef:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl %esi,%ebx
	movl $0,-4(%ebp)
	movl 36(%ebx),%eax
	addl %eax,12(%ebx)
	movl 52(%ebx),%eax
	addl %eax,16(%ebx)
	leal -4(%ebp),%eax
	pushl %eax
	pushl $12
	movl 4(%ebx),%eax
	pushl %eax
	call ConvertPacking__GetHiKind
	addl $12,%esp
	testl %eax,%eax
	je .L389
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L390
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1248
	jg .L391
	movl MM_ConvertPacking+1244,%eax
	cmpl %edx,4(%eax)
	jge .L390
.L391:
	pushl $13221
	call _m3_fault
	.align 16
.L390:
	movl -4(%ebp),%eax
	movb 12(%ebp),%cl
	cmpb %cl,12(%eax)
	jne .L389
	incl 8(%eax)
	jmp .L388
	.align 16
.L389:
	movl 4(%esi),%ebx
	movl MM_ConvertPacking+1244,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%esi
	movb $12,4(%esi)
	movl $1,8(%esi)
	movb 12(%ebp),%cl
	movb %cl,12(%esi)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %esi,-8(%ebp)
	leal -8(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
.L388:
	leal -16(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe23:
	.size	 ConvertPacking__AddRef,.Lfe23-ConvertPacking__AddRef
	.align 16
	.type	 ConvertPacking__AddDone,@function
ConvertPacking__AddDone:
	pushl %ebp
	movl %esp,%ebp
	subl $4,%esp
	pushl %ebx
	movl 8(%ebp),%eax
	movl 4(%eax),%ebx
	movl MM_ConvertPacking+1852,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	movb $13,4(%ecx)
	movl (%ebx),%eax
	movl 12(%eax),%edx
	movl %ecx,-4(%ebp)
	leal -4(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%edx
	movl -8(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe24:
	.size	 ConvertPacking__AddDone,.Lfe24-ConvertPacking__AddDone
	.align 16
	.type	 ConvertPacking__New,@function
ConvertPacking__New:
	pushl %ebp
	movl %esp,%ebp
	subl $16,%esp
	leal 12(%ebp),%eax
	pushl %ebx
	movl 8(%ebp),%ebx
	movl $0,-4(%ebp)
	pushl %eax
	movl MI_RTPacking+48,%eax
	call *%eax
	movl %eax,-16(%ebp)
	leal 28(%ebp),%eax
	pushl %eax
	movl MI_RTPacking+48,%eax
	call *%eax
	movl %eax,%edx
	movl %edx,-12(%ebp)
	movl MM_ConvertPacking+44,%edx
	movl %ebx,-8(%ebp)
	movl (%edx),%eax
	movl 4(%eax),%ecx
	leal -4(%ebp),%eax
	pushl %eax
	leal -16(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	addl $20,%esp
	testl %eax,%eax
	je .L395
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L396
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1912
	jg .L397
	movl MM_ConvertPacking+1908,%eax
	cmpl %edx,4(%eax)
	jge .L396
.L397:
	pushl $13637
	call _m3_fault
	.align 16
.L396:
	movl -4(%ebp),%ebx
	movl (%ebx),%eax
	movl 8(%eax),%ecx
	movl 52(%ebp),%eax
	pushl %eax
	movl 48(%ebp),%eax
	pushl %eax
	movl 44(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%ecx
	movl %ebx,%eax
	jmp .L398
	.align 16
.L395:
	movl MM_ConvertPacking+1908,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	movl (%ecx),%eax
	movl 4(%eax),%edx
	movl 52(%ebp),%eax
	pushl %eax
	movl 48(%ebp),%eax
	pushl %eax
	movl 44(%ebp),%eax
	pushl %eax
	movl 40(%ebp),%eax
	pushl %eax
	movl 36(%ebp),%eax
	pushl %eax
	movl 32(%ebp),%eax
	pushl %eax
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	movl 12(%ebp),%eax
	pushl %eax
	pushl %ebx
	pushl %ecx
	call *%edx
.L398:
	movl -20(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe25:
	.size	 ConvertPacking__New,.Lfe25-ConvertPacking__New
	.align 16
	.type	 ConvertPacking__GetDim,@function
ConvertPacking__GetDim:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edx
	movl 12(%ebp),%ecx
	movl 16(%ebp),%ebx
	movl 20(%ebp),%esi
	leal -8(%ebp),%esp
	movl 68(%edx),%eax
	movl %eax,(%ecx)
	movl 72(%edx),%eax
	movl %eax,(%ebx)
	movl 76(%edx),%eax
	movl %eax,(%esi)
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe26:
	.size	 ConvertPacking__GetDim,.Lfe26-ConvertPacking__GetDim
	.align 16
	.type	 ConvertPacking__RoundUp,@function
ConvertPacking__RoundUp:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %ebx
	movl 8(%ebp),%eax
	movl 12(%ebp),%ebx
.L401:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%edx
	movl %edx,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	testl %ebx,%ebx
	jne .L402
	movl %edx,RTThread__handlerStack
	jmp .L400
	.align 16
.L402:
	movl %edx,RTThread__handlerStack
	leal -1(%ebx,%eax),%eax
	pushl %eax
	pushl %ebx
	call m3_div
	imull %ebx,%eax
.L403:
.L400:
	movl -12(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe27:
	.size	 ConvertPacking__RoundUp,.Lfe27-ConvertPacking__RoundUp
	.align 16
	.type	 ConvertPacking__Init,@function
ConvertPacking__Init:
	pushl %ebp
	movl %esp,%ebp
	subl $32,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
	movl $0,-4(%ebp)
	leal 16(%ebp),%ebx
	pushl %ebx
	movl MI_RTPacking+48,%eax
	call *%eax
	movl %eax,-16(%ebp)
	leal 32(%ebp),%edi
	movl %edi,-32(%ebp)
	pushl %edi
	movl MI_RTPacking+48,%eax
	call *%eax
	movl %eax,%edx
	movl %edx,-12(%ebp)
	movl 12(%ebp),%edi
	movl MM_ConvertPacking+44,%edx
	movl %edi,-8(%ebp)
	movl (%edx),%eax
	movl 4(%eax),%ecx
	leal -4(%ebp),%eax
	pushl %eax
	leal -16(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	addl $20,%esp
	testl %eax,%eax
	je .L405
	movl -4(%ebp),%eax
	testl %eax,%eax
	je .L406
	movl -4(%eax),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1912
	jg .L407
	movl MM_ConvertPacking+1908,%eax
	cmpl %edx,4(%eax)
	jge .L406
.L407:
	pushl $14197
	call _m3_fault
	.align 16
.L406:
	movl -4(%ebp),%ebx
	movl (%ebx),%eax
	movl 8(%eax),%ecx
	movl 56(%ebp),%eax
	pushl %eax
	movl 52(%ebp),%eax
	pushl %eax
	movl 48(%ebp),%eax
	pushl %eax
	pushl %ebx
	call *%ecx
	movl %ebx,%eax
	jmp .L427
	.align 16
.L405:
	pushl %ebx
	movl 12(%ebp),%edi
	pushl %edi
	movl MI_RTTipe+1188,%eax
	call *%eax
	movl %eax,%ecx
	movl %ecx,28(%esi)
	addl $8,%esp
	testl %ecx,%ecx
	jne .L408
	pushl $MM_ConvertPacking+1920
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L408:
	movl -32(%ebp),%edi
	pushl %edi
	movl 12(%ebp),%edi
	pushl %edi
	movl MI_RTTipe+1188,%eax
	call *%eax
	movl %eax,32(%esi)
	addl $8,%esp
	testl %eax,%eax
	jne .L409
	pushl $MM_ConvertPacking+1956
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L409:
	movl 28(%esi),%ecx
	testl %ecx,%ecx
	je .L412
	movl -4(%ecx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1992
	jg .L413
	movl MM_ConvertPacking+1988,%eax
	cmpl %edx,4(%eax)
	jl .L413
.L412:
	movl %ecx,%ebx
	movl 32(%esi),%ecx
	testl %ecx,%ecx
	je .L414
	movl -4(%ecx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1992
	jg .L415
	movl MM_ConvertPacking+1988,%eax
	cmpl %edx,4(%eax)
	jge .L414
.L415:
	pushl $14565
	call _m3_fault
	.align 16
.L414:
	movl 16(%ebx),%eax
	movl %eax,68(%esi)
	movl 24(%ebx),%eax
	movl %eax,72(%esi)
	movl 24(%ecx),%eax
	movl %eax,76(%esi)
	movl 20(%ebx),%eax
	movl %eax,28(%esi)
	movl 20(%ecx),%eax
	movl %eax,32(%esi)
	jmp .L416
	.align 16
.L413:
	movl $0,68(%esi)
	movl $0,72(%esi)
	movl $0,76(%esi)
.L416:
	movl 48(%ebp),%edx
	movl 68(%esi),%eax
	movl %eax,(%edx)
	movl 52(%ebp),%edx
	movl 72(%esi),%eax
	movl %eax,(%edx)
	movl 56(%ebp),%edx
	movl 76(%esi),%eax
	movl %eax,(%edx)
	movb 28(%ebp),%al
	cmpb %al,44(%ebp)
	je .L417
	pushl $MM_ConvertPacking+2000
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L417:
	cmpl $31,16(%ebp)
	jle .L418
	cmpl $31,32(%ebp)
	jg .L419
.L418:
	pushl $MM_ConvertPacking+2048
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L419:
	movl 16(%ebp),%eax
	movl %eax,36(%esi)
	movl 20(%ebp),%eax
	movl %eax,40(%esi)
	movl 24(%ebp),%eax
	movl %eax,44(%esi)
	movl 28(%ebp),%eax
	movl %eax,48(%esi)
	movl 32(%ebp),%eax
	movl %eax,52(%esi)
	movl 36(%ebp),%eax
	movl %eax,56(%esi)
	movl 40(%ebp),%eax
	movl %eax,60(%esi)
	movl 44(%ebp),%eax
	movl %eax,64(%esi)
	movl MM_ConvertPacking+2096,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%ecx
	movl (%ecx),%eax
	movl 4(%eax),%eax
	pushl $5
	pushl %ecx
	call *%eax
	movl %eax,4(%esi)
	movl 44(%ebp),%eax
	pushl %eax
	movl 40(%ebp),%eax
	pushl %eax
	movl 36(%ebp),%eax
	pushl %eax
	movl 32(%ebp),%eax
	pushl %eax
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	call ConvertPacking__GetKind
	movb %al,8(%esi)
	movl (%esi),%eax
	addl $44,%esp
	movl 32(%eax),%ecx
	movl 32(%esi),%eax
	pushl %eax
	movl 28(%esi),%eax
	pushl %eax
	pushl %esi
	call *%ecx
	addl $12,%esp
	cmpl $0,68(%esi)
	jle .L420
	movl 28(%esi),%eax
	movl 8(%eax),%eax
	movl %eax,20(%esi)
	movl 32(%esi),%eax
	movl 8(%eax),%eax
	movl %eax,24(%esi)
	jmp .L421
	.align 16
.L420:
	movl 12(%esi),%eax
	movl %eax,20(%esi)
	movl 16(%esi),%eax
	movl %eax,24(%esi)
	movl 36(%esi),%eax
	pushl %eax
	movl 20(%esi),%eax
	pushl %eax
	call ConvertPacking__RoundUp
	movl %eax,%edx
	movl %edx,%ebx
	movl 52(%esi),%eax
	pushl %eax
	movl 24(%esi),%eax
	pushl %eax
	call ConvertPacking__RoundUp
	movl %eax,%edx
	subl 20(%esi),%ebx
	subl 24(%esi),%edx
	addl $16,%esp
	testl %ebx,%ebx
	jge .L422
	pushl $15696
	call _m3_fault
	.align 16
.L422:
	testl %edx,%edx
	jge .L423
	pushl $15712
	call _m3_fault
	.align 16
.L423:
	movl (%esi),%eax
	movl 72(%eax),%ecx
	pushl %edx
	pushl %ebx
	pushl %esi
	call *%ecx
	addl $12,%esp
.L421:
	movl (%esi),%eax
	movl 100(%eax),%ecx
	pushl %esi
	call *%ecx
	movl 52(%esi),%eax
	addl $4,%esp
	cmpl %eax,36(%esi)
	jne .L424
	movl 56(%esi),%eax
	cmpl %eax,40(%esi)
	jne .L424
	movl 60(%esi),%eax
	cmpl %eax,44(%esi)
	jne .L424
	movb 48(%esi),%al
	cmpb %al,64(%esi)
	jne .L424
	movb 49(%esi),%al
	cmpb %al,65(%esi)
	je .L425
.L424:
	leal -28(%ebp),%eax
	pushl %eax
	leal -24(%ebp),%eax
	pushl %eax
	leal -20(%ebp),%eax
	pushl %eax
	movl 44(%ebp),%ebx
	pushl %ebx
	movl 40(%ebp),%ecx
	pushl %ecx
	movl 36(%ebp),%edx
	pushl %edx
	movl 32(%ebp),%eax
	pushl %eax
	pushl %ebx
	pushl %ecx
	pushl %edx
	pushl %eax
	movl 12(%ebp),%edi
	pushl %edi
	call ConvertPacking__New
	movl %eax,80(%esi)
	addl $48,%esp
	jmp .L426
	.align 16
.L425:
	movl $0,80(%esi)
.L426:
	movl MM_ConvertPacking+44,%edx
	movl (%edx),%eax
	movl 8(%eax),%ecx
	movl %esi,-28(%ebp)
	leal -28(%ebp),%eax
	pushl %eax
	leal -16(%ebp),%eax
	pushl %eax
	pushl %edx
	call *%ecx
	movl %esi,%eax
.L427:
	leal -44(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe28:
	.size	 ConvertPacking__Init,.Lfe28-ConvertPacking__Init
	.align 16
	.type	 ConvertPacking__GetKind,@function
ConvertPacking__GetKind:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%edx
	cmpl %edx,24(%ebp)
	jne .L429
	movb 21(%ebp),%al
	cmpb %al,37(%ebp)
	jne .L430
	xorl %eax,%eax
	jmp .L434
	.align 16
.L430:
	movl $1,%eax
	jmp .L434
	.align 16
.L429:
	movb 21(%ebp),%al
	cmpb %al,37(%ebp)
	jne .L431
	cmpl $32,%edx
	jne .L432
	movl $2,%eax
	jmp .L434
	.align 16
.L432:
	movl $3,%eax
	jmp .L434
	.align 16
.L431:
	cmpl $32,%edx
	je .L433
	movl $5,%eax
	jmp .L434
	.align 16
.L433:
	movl $4,%eax
.L434:
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe29:
	.size	 ConvertPacking__GetKind,.Lfe29-ConvertPacking__GetKind
	.align 16
	.type	 ConvertPacking__BuildSuper,@function
ConvertPacking__BuildSuper:
	pushl %ebp
	movl %esp,%ebp
	subl $12,%esp
	pushl %edi
	pushl %esi
	leal -4(%ebp),%eax
	pushl %ebx
	movl 8(%ebp),%ebx
	movl 12(%ebp),%edx
	pushl %eax
	leal -8(%ebp),%eax
	pushl %eax
	leal -12(%ebp),%eax
	pushl %eax
	movl 64(%ebx),%eax
	pushl %eax
	movl 60(%ebx),%eax
	pushl %eax
	movl 56(%ebx),%eax
	pushl %eax
	movl 52(%ebx),%eax
	pushl %eax
	movl 48(%ebx),%eax
	pushl %eax
	movl 44(%ebx),%eax
	pushl %eax
	movl 40(%ebx),%eax
	pushl %eax
	movl 36(%ebx),%eax
	pushl %eax
	pushl %edx
	call ConvertPacking__New
	movl %eax,%edi
	movl %edi,%esi
	movl (%ebx),%eax
	addl $48,%esp
	movl 112(%eax),%edi
	pushl %esi
	pushl %ebx
	call *%edi
	movl 20(%esi),%eax
	movl 16(%ebp),%ecx
	addl $8,%esp
	movl %eax,(%ecx)
	movl 24(%ebp),%ecx
	movl 24(%esi),%eax
	movl %eax,(%ecx)
	movl 28(%esi),%edi
	testl %edi,%edi
	je .L436
	movl -4(%edi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+2108
	jg .L437
	movl MM_ConvertPacking+2104,%eax
	cmpl %edx,4(%eax)
	jge .L436
.L437:
	pushl $17061
	call _m3_fault
	.align 16
.L436:
	movl %edi,%ebx
	movl 32(%esi),%edi
	testl %edi,%edi
	je .L438
	movl -4(%edi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+2108
	jg .L439
	movl MM_ConvertPacking+2104,%eax
	cmpl %edx,4(%eax)
	jge .L438
.L439:
	pushl $17077
	call _m3_fault
	.align 16
.L438:
	movl 28(%ebx),%eax
	movl 20(%ebp),%ecx
	leal -24(%ebp),%esp
	movl %eax,(%ecx)
	movl 28(%ebp),%ecx
	movl 28(%edi),%eax
	movl %eax,(%ecx)
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe30:
	.size	 ConvertPacking__BuildSuper,.Lfe30-ConvertPacking__BuildSuper
.section	.rodata
	.align 4
	.type	 L_62.3,@object
	.size	 L_62.3,80
L_62.3:
	.long .L463
	.long .L462
	.long .L464
	.long .L464
	.long .L464
	.long .L464
	.long .L465
	.long .L464
	.long .L465
	.long .L466
	.long .L462
	.long .L462
	.long .L462
	.long .L467
	.long .L468
	.long .L462
	.long .L462
	.long .L469
	.long .L464
	.long .L464
	.align 4
	.type	 L_63.4,@object
	.size	 L_63.4,228
L_63.4:
	.long .L491
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L492
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L493
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L490
	.long .L494
	.align 4
	.type	 L_64.5,@object
	.size	 L_64.5,228
L_64.5:
	.long .L501
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L502
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L503
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L500
	.long .L504
	.align 4
	.type	 L_65.6,@object
	.size	 L_65.6,228
L_65.6:
	.long .L512
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L513
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L514
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L511
	.long .L515
.text
	.align 16
	.type	 ConvertPacking__BuildOne,@function
ConvertPacking__BuildOne:
	pushl %ebp
	movl %esp,%ebp
	subl $76,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%ebx
.L441:
	movl $MM_ConvertPacking+2112,-4(%ebp)
	movl $4,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	movl 16(%ebp),%esi
	movb 4(%ebx),%al
	cmpb %al,4(%esi)
	je .L442
	pushl $17264
	call _m3_fault
	.align 16
.L442:
	testl %ebx,%ebx
	je .L445
	movl -4(%ebx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+2124
	jg .L444
	movl MM_ConvertPacking+2120,%eax
	cmpl %edx,4(%eax)
	jge .L445
.L444:
	cmpl %edx,MM_ConvertPacking+2132
	jg .L447
	movl MM_ConvertPacking+2128,%eax
	cmpl %edx,4(%eax)
	jge .L445
.L447:
	cmpl %edx,MM_ConvertPacking+2140
	jg .L448
	movl MM_ConvertPacking+2136,%eax
	cmpl %edx,4(%eax)
	jge .L445
.L448:
	cmpl %edx,MM_ConvertPacking+2148
	jg .L449
	movl MM_ConvertPacking+2144,%eax
	cmpl %edx,4(%eax)
	jge .L450
.L449:
	movl MM_ConvertPacking+2156,%ecx
	movl %ecx,-32(%ebp)
	cmpl %ecx,%edx
	jl .L451
	movl MM_ConvertPacking+2152,%eax
	movl 4(%eax),%eax
	movl %eax,-76(%ebp)
	cmpl %edx,%eax
	jge .L452
.L451:
	movl MM_ConvertPacking+2108,%esi
	movl %esi,-36(%ebp)
	cmpl %esi,%edx
	jl .L453
	movl MM_ConvertPacking+2104,%eax
	movl 4(%eax),%eax
	movl %eax,-76(%ebp)
	cmpl %edx,%eax
	jge .L454
.L453:
	movl MM_ConvertPacking+2164,%ecx
	movl %ecx,-40(%ebp)
	cmpl %ecx,%edx
	jl .L455
	movl MM_ConvertPacking+2160,%eax
	movl 4(%eax),%eax
	movl %eax,-76(%ebp)
	cmpl %edx,%eax
	jge .L456
.L455:
	cmpl %edx,MM_ConvertPacking+2172
	jg .L457
	movl MM_ConvertPacking+2168,%eax
	cmpl %edx,4(%eax)
	jge .L458
.L457:
	cmpl %edx,MM_ConvertPacking+1992
	jg .L575
	movl MM_ConvertPacking+1988,%eax
	cmpl %edx,4(%eax)
	jge .L460
	jmp .L575
	.align 16
.L445:
	xorl %eax,%eax
	movb 4(%ebx),%al
	cmpl $19,%eax
	jg .L462
	jmp *L_62.3(,%eax,4)
	.align 16
.L463:
	jmp .L573
	.align 16
.L467:
	movl (%edi),%eax
	movl 96(%eax),%ebx
	pushl $2
	jmp .L576
	.align 16
.L469:
	movl (%edi),%eax
	movl 96(%eax),%ebx
	pushl $0
	jmp .L576
	.align 16
.L466:
	xorl %eax,%eax
	movb 8(%edi),%al
	cmpl $1,%eax
	jle .L471
	cmpl $2,%eax
	jle .L472
	cmpl $3,%eax
	jle .L473
	cmpl $4,%eax
	jle .L472
	cmpl $5,%eax
	jle .L473
.L471:
	movl 16(%ebp),%esi
	movl 8(%ebx),%edx
	cmpl %edx,8(%esi)
	je .L474
	pushl $17520
	call _m3_fault
	.align 16
.L474:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L472:
	movl 8(%ebx),%edx
	cmpl $32,%edx
	je .L476
	pushl $17568
	call _m3_fault
	.align 16
.L476:
	movl 16(%ebp),%ecx
	cmpl $64,8(%ecx)
	je .L477
	pushl $17584
	call _m3_fault
	.align 16
.L477:
	movl (%edi),%eax
	movl 40(%eax),%ebx
	pushl $0
	pushl %edx
	jmp .L577
	.align 16
.L473:
	movl 8(%ebx),%edx
	cmpl $64,%edx
	je .L478
	pushl $17632
	call _m3_fault
	.align 16
.L478:
	movl 16(%ebp),%esi
	cmpl $32,8(%esi)
	je .L479
	pushl $17648
	call _m3_fault
	.align 16
.L479:
	movl (%edi),%eax
	movl 44(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L464:
	cmpb $7,4(%ebx)
	sete %cl
	movb %cl,-44(%ebp)
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L481
	cmpl $1,%eax
	jle .L482
	cmpl $2,%eax
	jle .L483
	cmpl $3,%eax
	jle .L484
	cmpl $4,%eax
	jle .L485
	cmpl $5,%eax
	jle .L486
.L481:
	movl 16(%ebp),%esi
	movl 8(%ebx),%edx
	cmpl %edx,8(%esi)
	je .L487
	pushl $17792
	call _m3_fault
	.align 16
.L487:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L482:
	movl 16(%ebp),%ecx
	movl 8(%ebx),%eax
	cmpl %eax,8(%ecx)
	je .L489
	pushl $17840
	call _m3_fault
	.align 16
.L489:
	leal -8(%eax),%edx
	testl %edx,%edx
	jl .L490
	cmpl $56,%edx
	jg .L490
	jmp *L_63.4(,%edx,4)
	.align 16
.L491:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl $8
	jmp .L576
	.align 16
.L492:
	movl (%edi),%eax
	movl 76(%eax),%ebx
	pushl $16
	jmp .L576
	.align 16
.L493:
	movl (%edi),%eax
	movl 80(%eax),%ebx
	pushl $32
	jmp .L576
	.align 16
.L494:
	movl (%edi),%eax
	movl 84(%eax),%ebx
	pushl $64
	jmp .L576
	.align 16
.L490:
	pushl $MM_ConvertPacking+2180
	jmp .L578
	.align 16
.L483:
	movl 16(%ebp),%esi
	movl 8(%ebx),%edx
	cmpl %edx,8(%esi)
	jne .L496
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L496:
	movl (%edi),%eax
	movl 40(%eax),%ebx
	jmp .L579
	.align 16
.L484:
	movl 16(%ebp),%ecx
	movl 8(%ebx),%edx
	cmpl %edx,8(%ecx)
	jne .L498
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L498:
	movl (%edi),%eax
	movl 44(%eax),%ebx
	pushl $64
	jmp .L576
	.align 16
.L485:
	movl 8(%ebx),%edx
	addl $-8,%edx
	js .L500
	cmpl $56,%edx
	jg .L500
	jmp *L_64.5(,%edx,4)
	.align 16
.L501:
	movl 16(%ebp),%esi
	movl 8(%esi),%edx
	cmpl $8,%edx
	je .L505
	pushl $18208
	call _m3_fault
	.align 16
.L505:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L502:
	movl 16(%ebp),%ecx
	movl 8(%ecx),%edx
	cmpl $16,%edx
	je .L507
	pushl $18224
	call _m3_fault
	.align 16
.L507:
	movl (%edi),%eax
	movl 76(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L503:
	movl 16(%ebp),%esi
	movl 8(%esi),%edx
	cmpl $31,%edx
	jg .L508
	pushl $18256
	call _m3_fault
	.align 16
.L508:
	cmpl $32,%edx
	jne .L509
	movl (%edi),%eax
	movl 80(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L509:
	movl (%edi),%eax
	movl 88(%eax),%ebx
.L579:
	xorl %eax,%eax
	movb -44(%ebp),%al
	pushl %eax
	pushl $32
.L577:
	pushl %edi
	call *%ebx
	jmp .L575
	.align 16
.L504:
	pushl $MM_ConvertPacking+2216
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L500:
	pushl $MM_ConvertPacking+2252
	jmp .L578
	.align 16
.L486:
	movl 8(%ebx),%edx
	addl $-8,%edx
	js .L511
	cmpl $56,%edx
	jg .L511
	jmp *L_65.6(,%edx,4)
	.align 16
.L512:
	movl 16(%ebp),%ecx
	movl 8(%ecx),%edx
	cmpl $8,%edx
	je .L516
	pushl $18448
	call _m3_fault
	.align 16
.L516:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L513:
	movl 16(%ebp),%esi
	movl 8(%esi),%edx
	cmpl $16,%edx
	je .L518
	pushl $18464
	call _m3_fault
	.align 16
.L518:
	movl (%edi),%eax
	movl 76(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L514:
	movl 16(%ebp),%ecx
	movl 8(%ecx),%edx
	cmpl $32,%edx
	je .L519
	pushl $18480
	call _m3_fault
	.align 16
.L519:
	movl (%edi),%eax
	movl 80(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L515:
	movl 16(%ebp),%esi
	cmpl $32,8(%esi)
	je .L520
	pushl $18496
	call _m3_fault
	.align 16
.L520:
	movl (%edi),%eax
	movl 92(%eax),%ebx
	pushl $64
	jmp .L576
	.align 16
.L511:
	pushl $MM_ConvertPacking+2288
	jmp .L578
	.align 16
.L465:
	movl 16(%ebp),%ecx
	cmpl $64,8(%ecx)
	je .L522
	pushl $18608
	call _m3_fault
	.align 16
.L522:
	cmpl $64,8(%ebx)
	je .L523
	pushl $18624
	call _m3_fault
	.align 16
.L523:
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L524
	cmpl $1,%eax
	jle .L525
	cmpl $3,%eax
	jle .L524
	cmpl $5,%eax
	jle .L525
.L524:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl $64
	jmp .L576
	.align 16
.L525:
	movl (%edi),%eax
	movl 84(%eax),%ebx
	pushl $64
	jmp .L576
	.align 16
.L468:
	movl 16(%ebp),%esi
	cmpl $32,8(%esi)
	je .L528
	pushl $18752
	call _m3_fault
	.align 16
.L528:
	cmpl $32,8(%ebx)
	je .L529
	pushl $18768
	call _m3_fault
	.align 16
.L529:
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L530
	cmpl $1,%eax
	jle .L531
	cmpl $3,%eax
	jle .L530
	cmpl $5,%eax
	jle .L531
.L530:
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl $32
	jmp .L576
	.align 16
.L531:
	movl (%edi),%eax
	movl 80(%eax),%ebx
	pushl $32
	jmp .L576
	.align 16
.L462:
	pushl $MM_ConvertPacking+2324
	jmp .L578
	.align 16
.L450:
	movl 16(%ebp),%ecx
	movl %ebx,%edx
	movl 8(%ecx),%eax
	cmpl %eax,8(%edx)
	je .L535
	pushl $19024
	call _m3_fault
	.align 16
.L535:
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L536
	cmpl $1,%eax
	jle .L537
	cmpl $3,%eax
	jle .L536
	cmpl $5,%eax
	jle .L537
.L536:
	pushl $8
	movl 8(%edx),%eax
	pushl %eax
	call ConvertPacking__RoundUp
	movl %eax,%edx
	movl (%edi),%eax
	movl 36(%eax),%ebx
	pushl %edx
	jmp .L576
	.align 16
.L537:
	movl (%edi),%eax
	movl 48(%eax),%ebx
	movl 8(%edx),%eax
	pushl %eax
	jmp .L576
	.align 16
.L452:
	movl %ebx,-48(%ebp)
	cmpl $0,16(%ebp)
	je .L540
	movl 16(%ebp),%esi
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,-32(%ebp)
	jg .L541
	cmpl %edx,-76(%ebp)
	jge .L540
.L541:
	pushl $19205
	call _m3_fault
	.align 16
.L540:
	movl 16(%ebp),%ecx
	movl -48(%ebp),%esi
	movl %ecx,-52(%ebp)
	movl 20(%esi),%eax
	cmpb $12,4(%eax)
	jne .L542
	movl 8(%eax),%edx
	cmpl $8,%edx
	jne .L543
	movl (%edi),%eax
	movl 36(%eax),%ebx
	movl 8(%esi),%eax
	pushl %eax
	jmp .L576
	.align 16
.L543:
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L545
	cmpl $1,%eax
	jle .L546
	cmpl $3,%eax
	jle .L545
	cmpl $5,%eax
	jle .L547
.L545:
	movl (%edi),%eax
	movl -48(%ebp),%ecx
	movl 36(%eax),%ebx
	movl 8(%ecx),%eax
	pushl %eax
	jmp .L576
	.align 16
.L546:
	movl (%edi),%eax
	movl 56(%eax),%ebx
	movl 36(%edi),%eax
	pushl %eax
	pushl %edx
	movl -48(%ebp),%esi
	movl 16(%esi),%eax
	pushl %eax
	movl 8(%esi),%eax
	jmp .L580
	.align 16
.L547:
	movl (%edi),%eax
	movl 56(%eax),%ebx
	pushl $32
	pushl %edx
	movl -48(%ebp),%ecx
	movl 16(%ecx),%eax
	pushl %eax
	movl 8(%ecx),%eax
	jmp .L580
	.align 16
.L542:
	movl -48(%ebp),%esi
	movl $1,-76(%ebp)
	movl 16(%esi),%esi
	movl %esi,-56(%ebp)
	jmp .L551
	.align 16
.L552:
	movl (%edi),%eax
	movl -52(%ebp),%ecx
	movl 32(%eax),%ebx
	movl 20(%ecx),%eax
	pushl %eax
	movl -48(%ebp),%esi
	movl 20(%esi),%eax
	pushl %eax
	pushl %edi
	call *%ebx
	incl -76(%ebp)
	addl $12,%esp
.L551:
	movl -56(%ebp),%ecx
	cmpl %ecx,-76(%ebp)
	jle .L552
	jmp .L575
	.align 16
.L454:
	movl %ebx,-60(%ebp)
	cmpl $0,16(%ebp)
	je .L554
	movl 16(%ebp),%esi
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,-36(%ebp)
	jg .L555
	cmpl %edx,-76(%ebp)
	jge .L554
.L555:
	pushl $19701
	call _m3_fault
	.align 16
.L554:
	movl 16(%ebp),%ecx
	movl -60(%ebp),%esi
	movl %ecx,-64(%ebp)
	movl 16(%esi),%eax
	testl %eax,%eax
	jne .L556
	pushl $19712
	call _m3_fault
	.align 16
.L556:
	movl 16(%ebp),%ecx
	movl 16(%ecx),%edx
	testl %edx,%edx
	jne .L559
	pushl $19728
	call _m3_fault
	.align 16
.L559:
	movl (%eax),%eax
	cmpl %eax,(%edx)
	je .L560
	pushl $19744
	call _m3_fault
	.align 16
.L560:
	movl $0,-76(%ebp)
	movl -76(%ebp),%esi
	movl %esi,-68(%ebp)
	cmpl %eax,MM_ConvertPacking+2364
	jne .L564
	movl %esi,-16(%ebp)
	movl %esi,-24(%ebp)
	movl -60(%ebp),%ecx
	movl 16(%ebp),%esi
	movl 12(%ecx),%eax
	movl %eax,-20(%ebp)
	movl 12(%esi),%eax
	movl %eax,-28(%ebp)
	jmp .L563
	.align 16
.L564:
	cmpl %eax,MM_ConvertPacking+2372
	jne .L565
	pushl $MM_ConvertPacking+2380
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
	addl $8,%esp
.L565:
	movl (%edi),%eax
	movl -60(%ebp),%ecx
	movl 104(%eax),%ebx
	movl 16(%ecx),%edx
	testl %edx,%edx
	jne .L566
	pushl $20052
	call _m3_fault
	.align 16
.L566:
	leal -28(%ebp),%eax
	pushl %eax
	leal -24(%ebp),%eax
	pushl %eax
	leal -20(%ebp),%eax
	pushl %eax
	leal -16(%ebp),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	pushl %edi
	call *%ebx
	addl $24,%esp
.L563:
	movl -60(%ebp),%esi
	movl 28(%esi),%ebx
	movl %ebx,%edx
	subl -20(%ebp),%edx
	testl %edx,%edx
	jle .L567
	movl -16(%ebp),%eax
	addl 36(%edi),%eax
	pushl %eax
	pushl %ebx
	call m3_mod
	movl %eax,-76(%ebp)
	addl $8,%esp
	testl %eax,%eax
	jle .L567
	movl 28(%esi),%ecx
	subl %eax,%ecx
	movl %ecx,-76(%ebp)
.L567:
	movl -64(%ebp),%esi
	movl 28(%esi),%ebx
	movl %ebx,%edx
	subl -28(%ebp),%edx
	testl %edx,%edx
	jle .L569
	movl -24(%ebp),%eax
	addl 52(%edi),%eax
	pushl %eax
	pushl %ebx
	call m3_mod
	movl %eax,-68(%ebp)
	addl $8,%esp
	testl %eax,%eax
	jle .L569
	movl 28(%esi),%ecx
	subl %eax,%ecx
	movl %ecx,-68(%ebp)
.L569:
	movl (%edi),%eax
	movl -68(%ebp),%esi
	movl 72(%eax),%ebx
	pushl %esi
	movl -76(%ebp),%ecx
	pushl %ecx
	pushl %edi
	call *%ebx
	movl (%edi),%eax
	movl -64(%ebp),%esi
	movl 108(%eax),%ebx
	movl 24(%esi),%eax
	pushl %eax
	movl 20(%esi),%eax
	pushl %eax
	movl -60(%ebp),%ecx
	movl 24(%ecx),%eax
	pushl %eax
	movl 20(%ecx),%eax
	jmp .L580
	.align 16
.L456:
	movl %ebx,-72(%ebp)
	cmpl $0,16(%ebp)
	je .L571
	movl 16(%ebp),%esi
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,-40(%ebp)
	jg .L572
	cmpl %edx,-76(%ebp)
	jge .L571
.L572:
	pushl $20645
	call _m3_fault
	.align 16
.L571:
	movl (%edi),%eax
	movl 16(%ebp),%ecx
	movl 108(%eax),%ebx
	movl 8(%ecx),%eax
	pushl %eax
	movl 16(%ecx),%eax
	pushl %eax
	movl -72(%ebp),%esi
	movl 8(%esi),%eax
	pushl %eax
	movl 16(%esi),%eax
.L580:
	pushl %eax
	pushl %edi
	call *%ebx
	jmp .L575
	.align 16
.L458:
	cmpb $0,16(%ebx)
	je .L573
	movl (%edi),%eax
	movl 96(%eax),%ebx
	pushl $0
	jmp .L576
	.align 16
.L573:
	movl (%edi),%eax
	movl 96(%eax),%ebx
	pushl $1
.L576:
	pushl %edi
	call *%ebx
	jmp .L575
	.align 16
.L460:
	pushl $MM_ConvertPacking+2432
.L578:
	pushl $MI_ConvertPacking+44
	movl MI_RTHooks+52,%eax
	call *%eax
.L575:
	movl -12(%ebp),%eax
	leal -88(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe31:
	.size	 ConvertPacking__BuildOne,.Lfe31-ConvertPacking__BuildOne
	.align 16
	.type	 ConvertPacking__BuildFields,@function
ConvertPacking__BuildFields:
	pushl %ebp
	movl %esp,%ebp
	subl $24,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
	movl 12(%ebp),%ebx
.L582:
	movl $MM_ConvertPacking+2112,-4(%ebp)
	movl $4,-8(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-12(%ebp)
	leal -12(%ebp),%esi
	movl %esi,RTThread__handlerStack
	movl 12(%edi),%esi
	movl %esi,-20(%ebp)
	movl 16(%edi),%esi
	movl %esi,-16(%ebp)
	jmp .L583
	.align 16
.L584:
	cmpl $0,20(%ebp)
	jne .L586
	pushl $21012
	call _m3_fault
	.align 16
.L586:
	movl (%ebx),%eax
	movl 20(%ebp),%esi
	xorl %ecx,%ecx
	movb 4(%eax),%cl
	movl (%esi),%eax
	movb 4(%eax),%al
	andl $255,%eax
	cmpl %eax,%ecx
	je .L588
	pushl $21008
	call _m3_fault
	.align 16
.L588:
	movl -20(%ebp),%eax
	addl 8(%ebx),%eax
	subl 12(%edi),%eax
	movl %eax,-24(%ebp)
	movl 20(%ebp),%esi
	movl -16(%ebp),%eax
	addl 8(%esi),%eax
	movl %eax,%edx
	subl 16(%edi),%edx
	cmpl $-8,-24(%ebp)
	jg .L590
	pushl $21088
	call _m3_fault
	.align 16
.L590:
	cmpl $-8,%edx
	jg .L591
	pushl $21104
	call _m3_fault
	.align 16
.L591:
	cmpl $0,-24(%ebp)
	jge .L592
	cmpl $12,%ecx
	je .L595
	pushl $21152
	call _m3_fault
	.align 16
.L595:
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L597
	cmpl $1,%eax
	jle .L598
	cmpl $3,%eax
	jle .L597
	cmpl $5,%eax
	jle .L598
.L597:
	testl %ebx,%ebx
	jne .L599
	pushl $21252
	call _m3_fault
	.align 16
.L599:
	movl (%ebx),%eax
	movl -24(%ebp),%edx
	addl 8(%eax),%edx
	testl %edx,%edx
	jle .L605
	pushl $8
	pushl %edx
	call ConvertPacking__RoundUp
	movl %eax,%edx
	movl (%edi),%eax
	movl 36(%eax),%eax
	pushl %edx
	pushl %edi
	call *%eax
	addl $16,%esp
	jmp .L605
	.align 16
.L598:
	movl (%edi),%eax
	movl 52(%eax),%ecx
	testl %ebx,%ebx
	jne .L603
	pushl $21380
	call _m3_fault
	.align 16
.L603:
	movl 8(%ebx),%eax
	pushl %eax
	movl (%ebx),%eax
	movl 8(%eax),%eax
	pushl %eax
	jmp .L632
	.align 16
.L592:
	movl (%edi),%eax
	movl 72(%eax),%ecx
	pushl %edx
	movl -24(%ebp),%esi
	pushl %esi
	pushl %edi
	call *%ecx
	movl (%ebx),%edx
	addl $12,%esp
	xorl %eax,%eax
	movb 4(%edx),%al
	cmpl $12,%eax
	jne .L622
	movl 20(%ebp),%esi
	movl (%esi),%ecx
	movl 8(%ecx),%eax
	cmpl %eax,8(%edx)
	je .L611
	pushl $21552
	call _m3_fault
	.align 16
.L611:
	cmpb $12,4(%ecx)
	je .L612
	pushl $21568
	call _m3_fault
	.align 16
.L612:
	xorl %eax,%eax
	movb 8(%edi),%al
	testl %eax,%eax
	jle .L613
	cmpl $1,%eax
	jle .L614
	cmpl $3,%eax
	jle .L613
	cmpl $5,%eax
	jle .L614
.L613:
	testl %ebx,%ebx
	jne .L615
	pushl $21620
	call _m3_fault
	.align 16
.L615:
	pushl $8
	movl (%ebx),%eax
	movl 8(%eax),%eax
	pushl %eax
	call ConvertPacking__RoundUp
	movl %eax,%edx
	movl (%edi),%eax
	movl 36(%eax),%ecx
	pushl %edx
	pushl %edi
	call *%ecx
	addl $16,%esp
	jmp .L605
	.align 16
.L614:
	testl %ebx,%ebx
	jne .L617
	pushl $21684
	call _m3_fault
	.align 16
.L617:
	testb $7,8(%ebx)
	je .L618
	pushl $21680
	call _m3_fault
	.align 16
.L618:
	movl (%edi),%eax
	movl 48(%eax),%ecx
	movl (%ebx),%eax
	movl 8(%eax),%eax
	pushl %eax
	jmp .L633
	.align 16
.L622:
	cmpl $10,%eax
	jne .L623
	movl (%edi),%eax
	movl 96(%eax),%ecx
	pushl $0
.L633:
	pushl %edi
	call *%ecx
	addl $8,%esp
	jmp .L605
	.align 16
.L623:
	movl (%edi),%eax
	movl 20(%ebp),%esi
	movl 32(%eax),%ecx
	movl (%esi),%eax
	pushl %eax
	pushl %edx
.L632:
	pushl %edi
	call *%ecx
	addl $12,%esp
.L605:
	testl %ebx,%ebx
	jne .L626
	pushl $21892
	call _m3_fault
	.align 16
.L626:
	movl 4(%ebx),%ebx
	cmpl $0,20(%ebp)
	jne .L627
	pushl $21908
	call _m3_fault
	.align 16
.L627:
	movl 20(%ebp),%esi
	movl 4(%esi),%esi
	movl %esi,20(%ebp)
.L583:
	testl %ebx,%ebx
	jne .L584
	movl -20(%ebp),%eax
	addl 16(%ebp),%eax
	movl %eax,%ecx
	subl 12(%edi),%ecx
	movl -16(%ebp),%eax
	addl 24(%ebp),%eax
	subl 16(%edi),%eax
	movl %eax,%edx
	testl %ecx,%ecx
	jge .L629
	pushl $22016
	call _m3_fault
	.align 16
.L629:
	testl %eax,%eax
	jge .L630
	pushl $22032
	call _m3_fault
	.align 16
.L630:
	movl (%edi),%eax
	movl 72(%eax),%eax
	pushl %edx
	pushl %ecx
	pushl %edi
	call *%eax
.L631:
	movl -12(%ebp),%eax
	leal -36(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe32:
	.size	 ConvertPacking__BuildFields,.Lfe32-ConvertPacking__BuildFields
	.align 16
	.type	 ConvertPacking__PrintPacking,@function
ConvertPacking__PrintPacking:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	pushl $10
	movl 8(%ebp),%eax
	pushl %eax
	movl MI_Fmt+56,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+2472
	movl MI_RTHooks+76,%eax
	call *%eax
	movl $MM_ConvertPacking+2500,%ebx
	pushl %ebx
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	pushl $10
	movl 12(%ebp),%eax
	pushl %eax
	movl MI_Fmt+56,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+2516
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	pushl $10
	movl 16(%ebp),%eax
	pushl %eax
	movl MI_Fmt+56,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+2544
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	xorl %eax,%eax
	movb 20(%ebp),%al
	addl $32,%esp
	testl %eax,%eax
	jle .L635
	cmpl $1,%eax
	jle .L636
	cmpl $2,%eax
	jle .L637
.L635:
	pushl $0
	pushl $MM_ConvertPacking+2572
	jmp .L640
	.align 16
.L636:
	pushl $0
	pushl $MM_ConvertPacking+2604
	jmp .L640
	.align 16
.L637:
	pushl $0
	pushl $MM_ConvertPacking+2636
.L640:
	movl MI_IO+44,%eax
	call *%eax
	addl $8,%esp
	xorl %eax,%eax
	movb 21(%ebp),%al
	pushl %eax
	movl MI_Fmt+44,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+2668
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+2500
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe33:
	.size	 ConvertPacking__PrintPacking,.Lfe33-ConvertPacking__PrintPacking
.section	.rodata
	.align 4
	.type	 L_68.7,@object
	.size	 L_68.7,84
L_68.7:
	.long .L642
	.long .L643
	.long .L644
	.long .L645
	.long .L646
	.long .L647
	.long .L648
	.long .L649
	.long .L650
	.long .L651
	.long .L652
	.long .L653
	.long .L654
	.long .L655
	.long .L656
	.long .L657
	.long .L658
	.long .L659
	.long .L660
	.long .L661
	.long .L662
.text
	.align 16
	.type	 ConvertPacking__KindToText,@function
ConvertPacking__KindToText:
	pushl %ebp
	movl %esp,%ebp
	xorl %eax,%eax
	movb 8(%ebp),%al
	jmp *L_68.7(,%eax,4)
	.align 16
.L642:
	pushl $0
	pushl $MM_ConvertPacking+2700
	jmp .L665
	.align 16
.L643:
	pushl $0
	pushl $MM_ConvertPacking+2720
	jmp .L665
	.align 16
.L644:
	pushl $0
	pushl $MM_ConvertPacking+2740
	jmp .L665
	.align 16
.L645:
	pushl $0
	pushl $MM_ConvertPacking+2760
	jmp .L665
	.align 16
.L646:
	pushl $0
	pushl $MM_ConvertPacking+2784
	jmp .L665
	.align 16
.L647:
	pushl $0
	pushl $MM_ConvertPacking+2804
	jmp .L665
	.align 16
.L648:
	pushl $0
	pushl $MM_ConvertPacking+2824
	jmp .L665
	.align 16
.L649:
	pushl $0
	pushl $MM_ConvertPacking+2848
	jmp .L665
	.align 16
.L650:
	pushl $0
	pushl $MM_ConvertPacking+2868
	jmp .L665
	.align 16
.L651:
	pushl $0
	pushl $MM_ConvertPacking+2892
	jmp .L665
	.align 16
.L652:
	pushl $0
	pushl $MM_ConvertPacking+2912
	jmp .L665
	.align 16
.L653:
	pushl $0
	pushl $MM_ConvertPacking+2932
	jmp .L665
	.align 16
.L654:
	pushl $0
	pushl $MM_ConvertPacking+2956
	jmp .L665
	.align 16
.L655:
	pushl $0
	pushl $MM_ConvertPacking+2976
	jmp .L665
	.align 16
.L656:
	pushl $0
	pushl $MM_ConvertPacking+2996
	jmp .L665
	.align 16
.L657:
	pushl $0
	pushl $MM_ConvertPacking+3016
	jmp .L665
	.align 16
.L658:
	pushl $0
	pushl $MM_ConvertPacking+3036
	jmp .L665
	.align 16
.L659:
	pushl $0
	pushl $MM_ConvertPacking+3052
	jmp .L665
	.align 16
.L660:
	pushl $0
	pushl $MM_ConvertPacking+3072
	jmp .L665
	.align 16
.L661:
	pushl $0
	pushl $MM_ConvertPacking+3088
	jmp .L665
	.align 16
.L662:
	pushl $0
	pushl $MM_ConvertPacking+3112
.L665:
	movl MI_IO+44,%eax
	call *%eax
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe34:
	.size	 ConvertPacking__KindToText,.Lfe34-ConvertPacking__KindToText
	.align 16
	.type	 ConvertPacking__BasicTipeToText,@function
ConvertPacking__BasicTipeToText:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%esi
.L667:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%edx
	movl %edx,RTThread__handlerStack
	pushl $0
	pushl $MM_ConvertPacking+3136
	movl MI_IO+44,%eax
	call *%eax
	xorl %eax,%eax
	movb 4(%esi),%al
	pushl %eax
	call ConvertPacking__KindToText
	pushl $10
	movl 8(%esi),%eax
	sarl $3,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+3156
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3180
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $36,%esp
	movl %eax,%ebx
	pushl $10
	movl 8(%esi),%eax
	andl $7,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3196
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ebx
	pushl $10
	movl 12(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
.L668:
	movl -8(%ebp),%eax
	leal -16(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe35:
	.size	 ConvertPacking__BasicTipeToText,.Lfe35-ConvertPacking__BasicTipeToText
	.align 16
	.type	 ConvertPacking__FieldsToText,@function
ConvertPacking__FieldsToText:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%edi
.L670:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	testl %edi,%edi
	jne .L671
	pushl $MM_ConvertPacking+3220
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %edi
	movl %eax,%esi
	pushl %esi
	movl MI_IO+44,%eax
	call *%eax
	jmp .L683
	.align 16
.L671:
	pushl $MM_ConvertPacking+3244
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $8,%esp
	movl %eax,%esi
	pushl $10
	movl 8(%edi),%eax
	sarl $3,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3180
	movl %eax,%esi
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $24,%esp
	movl %eax,%esi
	pushl $10
	movl 8(%edi),%eax
	andl $7,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+2500
	jmp .L684
	.align 16
.L677:
	movl 12(%ebp),%ecx
	pushl %ecx
	movl $MM_ConvertPacking+2500,%ebx
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3244
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $16,%esp
	movl %eax,%esi
	pushl $10
	movl 8(%edi),%eax
	sarl $3,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3180
	movl %eax,%esi
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $24,%esp
	movl %eax,%esi
	pushl $10
	movl 8(%edi),%eax
	andl $7,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
.L684:
	movl %eax,%esi
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	movl 12(%ebp),%ecx
	pushl %ecx
	pushl $MM_ConvertPacking+3268
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	addl $8,%esp
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edx
	movl (%edi),%eax
	pushl %eax
	call ConvertPacking__TipeToText
	addl $24,%esp
	movl 4(%edi),%edi
	testl %edi,%edi
	jne .L677
.L683:
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe36:
	.size	 ConvertPacking__FieldsToText,.Lfe36-ConvertPacking__FieldsToText
	.align 16
	.type	 ConvertPacking__TipeToText,@function
ConvertPacking__TipeToText:
	pushl %ebp
	movl %esp,%ebp
	subl $8,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
.L686:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	testl %ebx,%ebx
	jne .L687
	pushl $MM_ConvertPacking+3284
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
	movl %eax,%edx
	pushl %edx
	jmp .L719
	.align 16
.L687:
	pushl $0
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_IO+44,%eax
	call *%eax
	pushl %ebx
	call ConvertPacking__BasicTipeToText
	addl $12,%esp
	movl -4(%ebx),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+2124
	jg .L689
	movl MM_ConvertPacking+2120,%eax
	cmpl %edx,4(%eax)
	jge .L690
.L689:
	cmpl %edx,MM_ConvertPacking+2156
	jg .L691
	movl MM_ConvertPacking+2152,%eax
	cmpl %edx,4(%eax)
	jge .L692
.L691:
	movl MM_ConvertPacking+2132,%esi
	cmpl %esi,%edx
	jl .L693
	movl MM_ConvertPacking+2128,%eax
	cmpl %edx,4(%eax)
	jge .L694
.L693:
	cmpl %edx,MM_ConvertPacking+2108
	jg .L695
	movl MM_ConvertPacking+2104,%eax
	cmpl %edx,4(%eax)
	jge .L696
.L695:
	cmpl %edx,MM_ConvertPacking+1992
	jg .L697
	movl MM_ConvertPacking+1988,%eax
	cmpl %edx,4(%eax)
	jge .L698
.L697:
	cmpl %edx,MM_ConvertPacking+2148
	jg .L699
	movl MM_ConvertPacking+2144,%eax
	cmpl %edx,4(%eax)
	jge .L700
.L699:
	cmpl %edx,MM_ConvertPacking+2164
	jg .L701
	movl MM_ConvertPacking+2160,%eax
	cmpl %edx,4(%eax)
	jge .L702
.L701:
	cmpl %edx,MM_ConvertPacking+2172
	jg .L703
	movl MM_ConvertPacking+2168,%eax
	cmpl %edx,4(%eax)
	jge .L704
.L703:
	cmpl %esi,%edx
	jl .L705
	movl MM_ConvertPacking+2128,%eax
	cmpl %edx,4(%eax)
	jge .L706
.L705:
	cmpl %edx,MM_ConvertPacking+2140
	jg .L718
	movl MM_ConvertPacking+2136,%eax
	cmpl %edx,4(%eax)
	jge .L708
	jmp .L718
	.align 16
.L690:
	pushl $0
	pushl $MM_ConvertPacking+3304
	jmp .L719
	.align 16
.L692:
	pushl $10
	movl 24(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3328
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3360
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl $10
	movl 16(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3380
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	pushl $MM_ConvertPacking+3268
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	addl $32,%esp
	jmp .L720
	.align 16
.L694:
	pushl $10
	movl 16(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3400
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3420
	pushl %eax
	jmp .L721
	.align 16
.L696:
	movl 12(%ebp),%ecx
	pushl %ecx
	pushl $MM_ConvertPacking+3444
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3460
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	movl %ebx,%edi
	call *%eax
	addl $24,%esp
	movl 16(%ebx),%eax
	testl %eax,%eax
	je .L711
	pushl $10
	movl (%eax),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+3488
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+2500
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%esi
	pushl %esi
	movl MI_IO+44,%eax
	call *%eax
	movl 16(%ebx),%edx
	addl $32,%esp
	testl %edx,%edx
	jne .L713
	pushl $23652
	call _m3_fault
	.align 16
.L713:
	leal 16(%ebp),%eax
	pushl %eax
	movl (%edx),%eax
	pushl %eax
	movl MI_RTTipe+1188,%eax
	call *%eax
	movl %eax,%esi
	pushl $MM_ConvertPacking+3512
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edx
	pushl %esi
	call ConvertPacking__TipeToText
	addl $40,%esp
	jmp .L714
	.align 16
.L711:
	pushl %eax
	pushl $MM_ConvertPacking+3532
	movl MI_IO+44,%eax
	call *%eax
	addl $8,%esp
.L714:
	movl 12(%ebp),%ecx
	pushl %ecx
	movl $MM_ConvertPacking+2500,%ebx
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3560
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl $10
	movl 24(%edi),%eax
	sarl $3,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $32,%esp
	pushl $MM_ConvertPacking+3180
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl $10
	movl 24(%edi),%eax
	andl $7,%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3196
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $32,%esp
	movl %eax,%esi
	pushl $10
	movl 28(%edi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %ebx
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	movl 12(%ebp),%ecx
	pushl %ecx
	pushl $MM_ConvertPacking+3512
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edx
	movl 20(%edi),%eax
	jmp .L722
	.align 16
.L698:
	pushl $10
	movl 16(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3592
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3612
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl $10
	movl 24(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3648
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	pushl $MM_ConvertPacking+3268
	movl 12(%ebp),%ecx
	pushl %ecx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	addl $32,%esp
	jmp .L720
	.align 16
.L700:
	pushl $10
	movl 16(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3592
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3668
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	movl 12(%ebp),%ecx
	pushl %ecx
	pushl $MM_ConvertPacking+3268
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
.L720:
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edx
	movl 20(%ebx),%eax
	pushl %eax
	call ConvertPacking__TipeToText
	jmp .L718
	.align 16
.L702:
	pushl $0
	pushl $MM_ConvertPacking+3692
	movl MI_IO+44,%eax
	call *%eax
	movl 12(%ebp),%ecx
	pushl %ecx
	pushl $MM_ConvertPacking+3268
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%edx
	movl 28(%ebp),%eax
	pushl %eax
	movl 24(%ebp),%eax
	pushl %eax
	movl 20(%ebp),%eax
	pushl %eax
	movl 16(%ebp),%eax
	pushl %eax
	pushl %edx
	movl 16(%ebx),%eax
.L722:
	pushl %eax
	call ConvertPacking__FieldsToText
	jmp .L718
	.align 16
.L704:
	xorl %eax,%eax
	movb 16(%ebx),%al
	pushl %eax
	movl MI_Fmt+44,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3712
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3736
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl $10
	movl 20(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl %esi
	movl MI_RTHooks+76,%eax
	call *%eax
	addl $36,%esp
	pushl $MM_ConvertPacking+3756
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	addl $16,%esp
	movl 24(%ebx),%eax
	testl %eax,%eax
	je .L715
	pushl $10
	movl (%eax),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl %eax
	pushl $MM_ConvertPacking+3488
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+2500
	pushl %eax
	jmp .L721
	.align 16
.L715:
	pushl %eax
	pushl $MM_ConvertPacking+3776
	jmp .L719
	.align 16
.L706:
	pushl $10
	movl 16(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3400
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3420
	pushl %eax
	jmp .L721
	.align 16
.L708:
	pushl $10
	movl 16(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+3804
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+3824
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%esi
	pushl $10
	movl 20(%ebx),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	pushl %esi
.L721:
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
.L719:
	movl MI_IO+44,%eax
	call *%eax
.L718:
	movl -8(%ebp),%eax
	movl %eax,RTThread__handlerStack
	leal -20(%ebp),%esp
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe37:
	.size	 ConvertPacking__TipeToText,.Lfe37-ConvertPacking__TipeToText
	.align 16
	.type	 ConvertPacking__Print,@function
ConvertPacking__Print:
	pushl %ebp
	movl %esp,%ebp
	pushl %esi
	pushl %ebx
	movl 8(%ebp),%ebx
	pushl $0
	pushl $MM_ConvertPacking+3844
	movl MI_IO+44,%eax
	call *%eax
	movl 48(%ebx),%eax
	pushl %eax
	movl 44(%ebx),%eax
	pushl %eax
	movl 40(%ebx),%eax
	pushl %eax
	movl 36(%ebx),%eax
	pushl %eax
	call ConvertPacking__PrintPacking
	pushl $0
	pushl $MM_ConvertPacking+3884
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	movl 64(%ebx),%eax
	pushl %eax
	movl 60(%ebx),%eax
	pushl %eax
	movl 56(%ebx),%eax
	pushl %eax
	movl 52(%ebx),%eax
	pushl %eax
	call ConvertPacking__PrintPacking
	pushl $0
	pushl $MM_ConvertPacking+3912
	movl MI_IO+44,%eax
	call *%eax
	movl 48(%ebx),%eax
	pushl %eax
	movl 44(%ebx),%eax
	pushl %eax
	movl 40(%ebx),%eax
	pushl %eax
	movl 36(%ebx),%eax
	pushl %eax
	movl $MM_ConvertPacking+3268,%esi
	pushl %esi
	movl 28(%ebx),%eax
	pushl %eax
	call ConvertPacking__TipeToText
	addl $48,%esp
	pushl $0
	pushl $MM_ConvertPacking+3952
	movl MI_IO+44,%eax
	call *%eax
	movl 64(%ebx),%eax
	pushl %eax
	movl 60(%ebx),%eax
	pushl %eax
	movl 56(%ebx),%eax
	pushl %eax
	movl 52(%ebx),%eax
	pushl %eax
	pushl %esi
	movl 32(%ebx),%eax
	pushl %eax
	call ConvertPacking__TipeToText
	movl (%ebx),%eax
	addl $32,%esp
	movl 24(%eax),%eax
	pushl %ebx
	call *%eax
	leal -8(%ebp),%esp
	popl %ebx
	popl %esi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe38:
	.size	 ConvertPacking__Print,.Lfe38-ConvertPacking__Print
.section	.rodata
	.align 4
	.type	 L_75.8,@object
	.size	 L_75.8,56
L_75.8:
	.long .L728
	.long .L729
	.long .L730
	.long .L731
	.long .L732
	.long .L733
	.long .L734
	.long .L735
	.long .L736
	.long .L737
	.long .L738
	.long .L739
	.long .L740
	.long .L741
.text
	.align 16
	.type	 ConvertPacking__PrintProgram,@function
ConvertPacking__PrintProgram:
	pushl %ebp
	movl %esp,%ebp
	subl $28,%esp
	pushl %edi
	pushl %esi
	pushl %ebx
.L725:
	movl $5,-4(%ebp)
	movl RTThread__handlerStack,%eax
	movl %eax,-8(%ebp)
	leal -8(%ebp),%ecx
	movl %ecx,RTThread__handlerStack
	xorl %edi,%edi
	movl 8(%ebp),%ecx
	movl %edi,-12(%ebp)
	movl 4(%ecx),%edx
	movl (%edx),%eax
	movl 32(%eax),%eax
	pushl %edx
	call *%eax
	pushl $10
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+3980
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4008
	movl %eax,%ebx
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl %edi
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%ebp),%ecx
	movl 4(%ecx),%edx
	movl (%edx),%eax
	addl $36,%esp
	movl 32(%eax),%ebx
	pushl %edx
	call *%ebx
	movl %edi,-16(%ebp)
	decl %eax
	movl %eax,-20(%ebp)
	addl $4,%esp
	jmp .L726
	.align 16
.L727:
	movl 8(%ebp),%ecx
	movl 4(%ecx),%ebx
	movl (%ebx),%eax
	movl -16(%ebp),%ecx
	movl 44(%eax),%edx
	pushl %ecx
	pushl %ebx
	call *%edx
	movl %eax,%ebx
	movl %ebx,%esi
	xorl %eax,%eax
	movb 4(%esi),%al
	addl $8,%esp
	jmp *L_75.8(,%eax,4)
	.align 16
.L728:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4032
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4052
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%eax
	jmp .L765
	.align 16
.L732:
	testl %esi,%esi
	je .L743
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1200
	jg .L744
	movl MM_ConvertPacking+1196,%eax
	cmpl %edx,4(%eax)
	jge .L743
.L744:
	pushl $24645
	call _m3_fault
	.align 16
.L743:
	movl %esi,-24(%ebp)
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4076
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4104
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	movl %eax,%ebx
	pushl $10
	movl 12(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4132
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	movl 16(%esi),%eax
	addl $24,%esp
	testl %eax,%eax
	jne .L745
	pushl $24708
	call _m3_fault
	.align 16
.L745:
	xorl %ebx,%ebx
	movl 4(%eax),%eax
	decl %eax
	movl %eax,-28(%ebp)
	jmp .L746
	.align 16
.L747:
	movl -24(%ebp),%ecx
	movl 16(%ecx),%eax
	testl %eax,%eax
	jne .L748
	pushl $24724
	call _m3_fault
	.align 16
.L748:
	cmpl %ebx,4(%eax)
	ja .L749
	pushl $24722
	call _m3_fault
	.align 16
.L749:
	pushl $10
	movl (%eax),%eax
	movl (%eax,%ebx,4),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	pushl $MM_ConvertPacking+4180
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	incl %ebx
	addl $24,%esp
.L746:
	cmpl %ebx,-28(%ebp)
	jge .L747
	pushl $0
	pushl $MM_ConvertPacking+2500
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%eax
	addl %eax,-12(%ebp)
	addl %eax,%edi
	addl $8,%esp
	jmp .L742
	.align 16
.L729:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4196
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4216
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%esi
	addl %esi,-12(%ebp)
	addl $32,%esp
	jmp .L742
	.align 16
.L730:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4196
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4244
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	addl 8(%esi),%edi
	addl $32,%esp
	jmp .L742
	.align 16
.L731:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4196
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4272
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%eax
	jmp .L765
	.align 16
.L733:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4308
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4328
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%esi
	movl %esi,%eax
	addl %esi,%eax
	jmp .L765
	.align 16
.L734:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4308
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4360
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%esi
	leal 0(,%esi,4),%eax
	jmp .L765
	.align 16
.L735:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4308
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4392
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%esi
	leal 0(,%esi,8),%eax
.L765:
	addl %eax,-12(%ebp)
	addl %eax,%edi
	addl $32,%esp
	jmp .L742
	.align 16
.L736:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4032
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4424
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	addl $32,%esp
	testl %esi,%esi
	je .L751
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1208
	jg .L752
	movl MM_ConvertPacking+1204,%eax
	cmpl %edx,4(%eax)
	jge .L751
.L752:
	pushl $25205
	call _m3_fault
	.align 16
.L751:
	cmpb $0,12(%esi)
	je .L753
	pushl $0
	pushl $MM_ConvertPacking+4452
	jmp .L766
	.align 16
.L753:
	pushl $0
	pushl $MM_ConvertPacking+4472
.L766:
	movl MI_IO+44,%eax
	call *%eax
	addl $8,%esp
	pushl $0
	pushl $MM_ConvertPacking+4496
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%eax
	movl -12(%ebp),%ecx
	leal (%ecx,%eax,4),%ecx
	movl %ecx,-12(%ebp)
	leal (%edi,%eax,8),%edi
	addl $8,%esp
	jmp .L742
	.align 16
.L737:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4032
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4520
	jmp .L767
	.align 16
.L738:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4556
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4584
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%eax
	movl -12(%ebp),%ecx
	leal (%ecx,%eax,4),%ecx
	movl %ecx,-12(%ebp)
	leal (%edi,%eax,8),%edi
	addl $32,%esp
	jmp .L742
	.align 16
.L739:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4556
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4620
.L767:
	movl %eax,%edx
	pushl %edx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%ebx
	pushl %ebx
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%esi),%eax
	movl -12(%ebp),%ecx
	leal (%ecx,%eax,8),%ecx
	movl %ecx,-12(%ebp)
	leal (%edi,%eax,4),%edi
	addl $32,%esp
	jmp .L742
	.align 16
.L740:
	pushl $10
	movl 8(%esi),%eax
	pushl %eax
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%ebx
	pushl %ebx
	pushl $MM_ConvertPacking+4656
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	movl %eax,%edx
	pushl %edx
	movl MI_IO+44,%eax
	call *%eax
	addl $24,%esp
	testl %esi,%esi
	je .L755
	movl -4(%esi),%eax
	sall $11,%eax
	movl %eax,%edx
	shrl $12,%edx
	cmpl %edx,MM_ConvertPacking+1248
	jg .L756
	movl MM_ConvertPacking+1244,%eax
	cmpl %edx,4(%eax)
	jge .L755
.L756:
	pushl $25621
	call _m3_fault
	.align 16
.L755:
	xorl %eax,%eax
	movb 12(%esi),%al
	testl %eax,%eax
	jle .L757
	cmpl $1,%eax
	jle .L758
	cmpl $2,%eax
	jle .L759
.L757:
	pushl $0
	pushl $MM_ConvertPacking+4676
	jmp .L768
	.align 16
.L758:
	pushl $0
	pushl $MM_ConvertPacking+4696
	jmp .L768
	.align 16
.L759:
	pushl $0
	pushl $MM_ConvertPacking+4720
.L768:
	movl MI_IO+44,%eax
	call *%eax
	addl $8,%esp
	pushl $0
	pushl $MM_ConvertPacking+4744
	movl MI_IO+44,%eax
	call *%eax
	movl 8(%ebp),%ecx
	movl 8(%esi),%edx
	addl $8,%esp
	movl 36(%ecx),%eax
	sarl $3,%eax
	imull %edx,%eax
	addl %eax,-12(%ebp)
	movl 52(%ecx),%eax
	sarl $3,%eax
	imull %eax,%edx
	addl %edx,%edi
	jmp .L742
	.align 16
.L741:
	pushl $10
	movl -12(%ebp),%ecx
	pushl %ecx
	movl MI_Fmt+52,%eax
	call *%eax
	movl %eax,%edx
	pushl %edx
	pushl $MM_ConvertPacking+4776
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+4796
	movl %eax,%ebx
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $10
	movl %eax,%ebx
	pushl %edi
	movl MI_Fmt+52,%eax
	call *%eax
	addl $32,%esp
	pushl %eax
	pushl %ebx
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $MM_ConvertPacking+2500
	pushl %eax
	movl MI_RTHooks+76,%eax
	call *%eax
	pushl $0
	pushl %eax
	movl MI_IO+44,%eax
	call *%eax
	addl $24,%esp
.L742:
	incl -16(%ebp)
.L726:
	movl -20(%ebp),%ecx
	cmpl %ecx,-16(%ebp)
	jle .L727
.L764:
	movl -8(%ebp),%eax
	leal -40(%ebp),%esp
	movl %eax,RTThread__handlerStack
	popl %ebx
	popl %esi
	popl %edi
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe39:
	.size	 ConvertPacking__PrintProgram,.Lfe39-ConvertPacking__PrintProgram
	.align 16
	.type	 _INITM_ConvertPacking,@function
_INITM_ConvertPacking:
	pushl %ebp
	movl %esp,%ebp
	movl $0,MM_ConvertPacking+44
	movl MM_ConvertPacking+4816,%eax
	pushl %eax
	movl MI_RTHooks+80,%eax
	call *%eax
	movl %eax,%edx
	movl (%edx),%eax
	movl 24(%eax),%eax
	pushl $0
	pushl %edx
	call *%eax
	movl %eax,MM_ConvertPacking+44
	movl %ebp,%esp
	popl %ebp
	ret
.Lfe40:
	.size	 _INITM_ConvertPacking,.Lfe40-_INITM_ConvertPacking
	.align 16
	.type	 M_ConvertPacking_t97cb6ceb_LINK,@function
M_ConvertPacking_t97cb6ceb_LINK:
	pushl %ebp
	movl %esp,%ebp
	movl MM_ConvertPacking+6036,%eax
	movl MM_ConvertPacking+368,%edx
	movl 52(%eax),%eax
	movl %ebp,%esp
	movl %edx,28(%eax)
	movl MM_ConvertPacking+1104,%edx
	movl %edx,32(%eax)
	movl MM_ConvertPacking+1020,%edx
	movl %edx,36(%eax)
	movl MM_ConvertPacking+1036,%edx
	movl %edx,40(%eax)
	movl MM_ConvertPacking+1040,%edx
	movl %edx,44(%eax)
	movl MM_ConvertPacking+1024,%edx
	movl %edx,48(%eax)
	movl MM_ConvertPacking+1028,%edx
	movl %edx,52(%eax)
	movl MM_ConvertPacking+1032,%edx
	movl %edx,56(%eax)
	movl MM_ConvertPacking+1044,%edx
	movl %edx,60(%eax)
	movl MM_ConvertPacking+1048,%edx
	movl %edx,64(%eax)
	movl MM_ConvertPacking+1052,%edx
	movl %edx,68(%eax)
	movl MM_ConvertPacking+1056,%edx
	movl %edx,72(%eax)
	movl MM_ConvertPacking+1060,%edx
	movl %edx,76(%eax)
	movl MM_ConvertPacking+1064,%edx
	movl %edx,80(%eax)
	movl MM_ConvertPacking+1068,%edx
	movl %edx,84(%eax)
	movl MM_ConvertPacking+1072,%edx
	movl %edx,88(%eax)
	movl MM_ConvertPacking+1076,%edx
	movl %edx,92(%eax)
	movl MM_ConvertPacking+1080,%edx
	movl %edx,96(%eax)
	movl MM_ConvertPacking+1084,%edx
	movl %edx,100(%eax)
	movl MM_ConvertPacking+1100,%edx
	movl %edx,104(%eax)
	movl MM_ConvertPacking+1108,%edx
	movl %edx,108(%eax)
	movl MM_ConvertPacking+1012,%edx
	movl %edx,112(%eax)
	movl MM_ConvertPacking+1096,%edx
	movl %edx,4(%eax)
	movl MM_ConvertPacking+480,%edx
	movl %edx,12(%eax)
	movl MM_ConvertPacking+1008,%edx
	movl %edx,16(%eax)
	movl MM_ConvertPacking+1132,%edx
	movl %edx,20(%eax)
	movl MM_ConvertPacking+1136,%edx
	movl %edx,24(%eax)
	movl MM_ConvertPacking+1088,%edx
	movl %edx,8(%eax)
	popl %ebp
	ret
.Lfe41:
	.size	 M_ConvertPacking_t97cb6ceb_LINK,.Lfe41-M_ConvertPacking_t97cb6ceb_LINK
	.align 16
	.type	 _m3_fault,@function
_m3_fault:
	pushl %ebp
	movl %esp,%ebp
	movl 8(%ebp),%eax
	pushl %eax
	pushl $MM_ConvertPacking
	movl MI_RTHooks+108,%eax
	call *%eax
	.align 16
.Lfe42:
	.size	 _m3_fault,.Lfe42-_m3_fault
.globl MM_ConvertPacking
.data
	.align 4
	.type	 MM_ConvertPacking,@object
	.size	 MM_ConvertPacking,6192
MM_ConvertPacking:
	.long MM_ConvertPacking+5768
	.long MM_ConvertPacking+48
	.long MM_ConvertPacking+1196
	.long MM_ConvertPacking+1148
	.zero	4
	.long MM_ConvertPacking+5280
	.zero	4
	.long MM_ConvertPacking+5764
	.long MM_ConvertPacking+5764
	.zero	4
	.long _INITM_ConvertPacking
	.zero	12
	.long 570427086
.byte 47
.byte 89
.byte 8
.byte 39
.byte 225
.byte 95
.byte 8
.byte 5
	.long 1
	.zero	4
	.long 0
	.long 1
	.zero	4
	.long 0
	.zero	20
	.long MM_ConvertPacking+6137
	.zero	8
	.long 1824518651
	.zero	12
	.long MM_ConvertPacking+6140
	.long MM_ConvertPacking+6165
	.long MM_ConvertPacking+152
	.zero	8
	.long 1516310493
.byte 12
.byte 156
.byte 69
.byte 67
.byte 209
.byte 147
.byte 36
.byte 25
	.long 1
	.zero	4
	.long 0
	.long 1
	.zero	4
	.long 0
	.zero	20
	.long MM_ConvertPacking+6080
	.zero	8
	.long 67464528
	.zero	12
	.long MM_ConvertPacking+6083
	.long MM_ConvertPacking+6109
	.long MM_ConvertPacking+256
	.zero	8
	.long -1748275989
.byte 203
.byte 200
.byte 151
.byte 152
.byte 32
.byte 164
.byte 92
.byte 15
	.long 1
	.zero	4
	.long 80
	.long 4
	.zero	4
	.long 88
	.zero	12
	.long MM_ConvertPacking+5963
	.long MM_ConvertPacking+5989
	.long MM_ConvertPacking+5998
	.zero	4
	.long M_ConvertPacking_t97cb6ceb_LINK
	.long 239389811
	.zero	12
	.long MM_ConvertPacking+6044
	.long MM_ConvertPacking+6063
	.long MM_ConvertPacking+372
	.long 0
	.long -1
	.long ConvertPacking__ExtractSwap
	.zero	8
	.long -1575440424
.byte 76
.byte 254
.byte 53
.byte 186
.byte 148
.byte 81
.byte 45
.byte 24
	.zero	8
	.long 65536
	.long 1
	.zero	20
	.long MM_ConvertPacking+5934
	.zero	36
	.long MM_ConvertPacking+5941
	.long MM_ConvertPacking+484
	.long ConvertPacking__ReadData
	.long ConvertPacking__Convert
	.zero	8
	.long -2107205726
.byte 157
.byte 231
.byte 15
.byte 139
.byte 63
.byte 112
.byte 105
.byte 9
	.zero	8
	.long 4
	.long 1
	.zero	20
	.long MM_ConvertPacking+5929
	.zero	40
	.long MM_ConvertPacking+588
	.zero	8
	.long 508288049
.byte 255
.byte 90
.byte 38
.byte 28
.byte 206
.byte 134
.byte 109
.byte 2
	.zero	8
	.long 2
	.long 2
	.zero	20
	.long MM_ConvertPacking+5927
	.zero	40
	.long MM_ConvertPacking+692
	.zero	8
	.long 364828261
.byte 161
.byte 185
.byte 20
.byte 15
.byte 196
.byte 111
.byte 170
.byte 26
	.zero	8
	.long 4
	.long 4
	.zero	20
	.long MM_ConvertPacking+5925
	.zero	40
	.long MM_ConvertPacking+796
	.zero	8
	.long 1786895172
.byte 25
.byte 6
.byte 196
.byte 119
.byte 93
.byte 221
.byte 69
.byte 29
	.zero	8
	.long 8
	.long 4
	.zero	20
	.long MM_ConvertPacking+5922
	.zero	40
	.long MM_ConvertPacking+900
	.zero	8
	.long 1688789227
.byte 182
.byte 157
.byte 51
.byte 98
.byte 93
.byte 125
.byte 155
.byte 6
	.zero	8
	.long 4
	.long 4
	.zero	20
	.long MM_ConvertPacking+5918
	.long MM_ConvertPacking+5920
	.zero	40
	.long ConvertPacking__WriteData
	.long ConvertPacking__Write
	.long ConvertPacking__AppendProg
	.long ConvertPacking__GetHiKind
	.long ConvertPacking__AddCopy
	.long ConvertPacking__AddPackedSwapFirstField
	.long ConvertPacking__AddPackedSwapNextField
	.long ConvertPacking__AddPackedSwapArray
	.long ConvertPacking__AddCopy32to64
	.long ConvertPacking__AddCopy64to32
	.long ConvertPacking__AddSkipFrom
	.long ConvertPacking__AddSkipTo
	.long ConvertPacking__AddSkipOrCopy
	.long ConvertPacking__AddSkip
	.long ConvertPacking__AddSwap16
	.long ConvertPacking__AddSwap32
	.long ConvertPacking__AddSwap64
	.long ConvertPacking__AddSwap32to64
	.long ConvertPacking__AddSwap64to32
	.long ConvertPacking__AddRef
	.long ConvertPacking__AddDone
	.long ConvertPacking__GetDim
	.long ConvertPacking__RoundUp
	.long ConvertPacking__Init
	.long ConvertPacking__BuildSuper
	.long ConvertPacking__BuildOne
	.long ConvertPacking__BuildFields
	.long ConvertPacking__PrintPacking
	.long ConvertPacking__KindToText
	.long ConvertPacking__BasicTipeToText
	.long ConvertPacking__FieldsToText
	.long ConvertPacking__TipeToText
	.long ConvertPacking__Print
	.long ConvertPacking__PrintProgram
	.long ConvertPacking__New
	.long ConvertPacking__GetKind
	.long 1391291277
	.long 1516310493
	.long -1675799993
	.long 570427086
	.long 239389808
	.long -1748275989
	.zero	4
	.long MI_ConvertPacking+44
	.long MI_Rd+44
	.long MI_Rd+64
	.long MI_Thread+184
	.zero	4
	.long MM_ConvertPacking+1204
	.long 856566960
	.long MM_ConvertPacking+1244
	.long 117619466
	.long 2
	.long MM_ConvertPacking+1224
	.long 20
	.ascii	"Data value too big."
	.zero	1
	.long MM_ConvertPacking+1852
	.long 230625012
	.long MI_ConvertPacking+44
	.long MI_Thread+184
	.long MI_Wr+44
	.zero	4
	.long 2
	.long MM_ConvertPacking+1280
	.long 47
	.ascii	"PklAction.Kind.SwapPacked called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1340
	.long 45
	.ascii	"PklAction.Kind.SkipFrom called during write?"
	.zero	4
	.long 2
	.long MM_ConvertPacking+1400
	.long 43
	.ascii	"PklAction.Kind.SkipTo called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1456
	.long 43
	.ascii	"PklAction.Kind.Swap16 called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1512
	.long 43
	.ascii	"PklAction.Kind.Swap32 called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1568
	.long 43
	.ascii	"PklAction.Kind.Swap64 called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1624
	.long 47
	.ascii	"PklAction.Kind.Copy32to64 called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1684
	.long 47
	.ascii	"PklAction.Kind.Swap32to64 called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1744
	.long 47
	.ascii	"PklAction.Kind.Copy64to32 called during write?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+1804
	.long 47
	.ascii	"PklAction.Kind.Swap64to32 called during write?"
	.zero	2
	.long MM_ConvertPacking+1860
	.long 1234236550
	.long MM_ConvertPacking+1908
	.long -476616643
	.long 2
	.long MM_ConvertPacking+1880
	.long 28
	.ascii	"Invalid conversion program."
	.zero	1
	.long MM_ConvertPacking+1988
	.long 239389808
	.long 2
	.long MM_ConvertPacking+1928
	.long 24
	.ascii	"\"from\" RTTipe.T is NIL."
	.zero	1
	.long 2
	.long MM_ConvertPacking+1964
	.long 22
	.ascii	"\"to\" RTTipe.T is NIL."
	.zero	3
	.long MM_ConvertPacking+2096
	.long 1101661198
	.long 2
	.long MM_ConvertPacking+2008
	.long 33
	.ascii	"Data format (float) not handled."
	.zero	4
	.long 2
	.long MM_ConvertPacking+2056
	.long 37
	.ascii	"Data format (word size) not handled."
	.zero	4
	.long MM_ConvertPacking+2104
	.long -1929221975
	.long MM_ConvertPacking+2120
	.long -2101500047
	.long MI_ConvertPacking+44
	.zero	4
	.long MM_ConvertPacking+2128
	.long 1190547157
	.long MM_ConvertPacking+2136
	.long 2064731599
	.long MM_ConvertPacking+2144
	.long 243314224
	.long MM_ConvertPacking+2152
	.long -1183876889
	.long MM_ConvertPacking+2160
	.long -1738775955
	.long MM_ConvertPacking+2168
	.long 160083678
	.long MM_ConvertPacking+2360
	.long -460255276
	.long 2
	.long MM_ConvertPacking+2188
	.long 23
	.ascii	"Should not get here: 2"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2224
	.long 23
	.ascii	"Should not get here: 1"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2260
	.long 23
	.ascii	"Should not get here: 3"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2296
	.long 23
	.ascii	"Should not get here: 4"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2332
	.long 25
	.ascii	"Builtin but not builtin."
	.zero	4
	.long MM_ConvertPacking+2368
	.long -1651526519
	.long MM_ConvertPacking+4816
	.long -1987139703
	.long 2
	.long MM_ConvertPacking+2388
	.long 39
	.ascii	"UNTRACED ROOT passed to ConvertPacking"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2440
	.long 27
	.ascii	"OpenArray within BuildOne?"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2480
	.long 13
	.ascii	" word_size: "
	.zero	4
	.long 2
	.long MM_ConvertPacking+2508
	.long 2
	.ascii	"\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+2524
	.long 13
	.ascii	" max_align: "
	.zero	4
	.long 2
	.long MM_ConvertPacking+2552
	.long 16
	.ascii	" struct_align: "
	.zero	1
	.long 2
	.long MM_ConvertPacking+2580
	.long 19
	.ascii	" float_kind: IEEE\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2612
	.long 18
	.ascii	" float_kind: VAX\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+2644
	.long 20
	.ascii	" float_kind: other\n"
	.zero	1
	.long 2
	.long MM_ConvertPacking+2676
	.long 17
	.ascii	" little_endian: "
	.zero	4
	.long 2
	.long MM_ConvertPacking+2708
	.long 8
	.ascii	"Address"
	.zero	1
	.long 2
	.long MM_ConvertPacking+2728
	.long 6
	.ascii	"Array"
	.zero	3
	.long 2
	.long MM_ConvertPacking+2748
	.long 8
	.ascii	"Boolean"
	.zero	1
	.long 2
	.long MM_ConvertPacking+2768
	.long 9
	.ascii	"Cardinal"
	.zero	4
	.long 2
	.long MM_ConvertPacking+2792
	.long 5
	.ascii	"Char"
	.zero	4
	.long 2
	.long MM_ConvertPacking+2812
	.long 5
	.ascii	"Enum"
	.zero	4
	.long 2
	.long MM_ConvertPacking+2832
	.long 9
	.ascii	"Extended"
	.zero	4
	.long 2
	.long MM_ConvertPacking+2856
	.long 8
	.ascii	"Integer"
	.zero	1
	.long 2
	.long MM_ConvertPacking+2876
	.long 9
	.ascii	"Longreal"
	.zero	4
	.long 2
	.long MM_ConvertPacking+2900
	.long 5
	.ascii	"Null"
	.zero	4
	.long 2
	.long MM_ConvertPacking+2920
	.long 7
	.ascii	"Object"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2940
	.long 10
	.ascii	"OpenArray"
	.zero	3
	.long 2
	.long MM_ConvertPacking+2964
	.long 7
	.ascii	"Packed"
	.zero	2
	.long 2
	.long MM_ConvertPacking+2984
	.long 5
	.ascii	"Proc"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3004
	.long 5
	.ascii	"Real"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3024
	.long 7
	.ascii	"Record"
	.zero	2
	.long 2
	.long MM_ConvertPacking+3044
	.long 4
	.ascii	"Ref"
	.zero	1
	.long 2
	.long MM_ConvertPacking+3060
	.long 7
	.ascii	"Refany"
	.zero	2
	.long 2
	.long MM_ConvertPacking+3080
	.long 4
	.ascii	"Set"
	.zero	1
	.long 2
	.long MM_ConvertPacking+3096
	.long 9
	.ascii	"Subrange"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3120
	.long 12
	.ascii	"UntracedRef"
	.zero	1
	.long 2
	.long MM_ConvertPacking+3144
	.long 7
	.ascii	"kind: "
	.zero	2
	.long 2
	.long MM_ConvertPacking+3164
	.long 9
	.ascii	", size: "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3188
	.long 2
	.ascii	"+"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3204
	.long 10
	.ascii	", align: "
	.zero	3
	.long 2
	.long MM_ConvertPacking+3228
	.long 12
	.ascii	"<NO FIELDS>"
	.zero	1
	.long 2
	.long MM_ConvertPacking+3252
	.long 9
	.ascii	"offset: "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3276
	.long 3
	.ascii	"  "
	.zero	2
	.long 2
	.long MM_ConvertPacking+3292
	.long 6
	.ascii	"<NIL>"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3312
	.long 11
	.ascii	" (Builtin)"
	.zero	2
	.long 2
	.long MM_ConvertPacking+3336
	.long 19
	.ascii	" (packed elements "
	.zero	2
	.long 2
	.long MM_ConvertPacking+3368
	.long 7
	.ascii	") [1.."
	.zero	2
	.long 2
	.long MM_ConvertPacking+3388
	.long 7
	.ascii	"] of \n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+3408
	.long 5
	.ascii	" of "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3428
	.long 10
	.ascii	" elements"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3452
	.long 3
	.ascii	":\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+3468
	.long 16
	.ascii	"  Super Type = "
	.zero	1
	.long 2
	.long MM_ConvertPacking+3496
	.long 10
	.ascii	"typecode "
	.zero	3
	.long 2
	.long MM_ConvertPacking+3520
	.long 5
	.ascii	"    "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3540
	.long 14
	.ascii	" <NIL> type?\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3568
	.long 18
	.ascii	"  Fields.  size: "
	.zero	3
	.long 2
	.long MM_ConvertPacking+3600
	.long 5
	.ascii	" in "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3620
	.long 21
	.ascii	" dimensions, packed "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3656
	.long 6
	.ascii	" of \n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3676
	.long 10
	.ascii	" bits of\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3700
	.long 6
	.ascii	" of:\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3720
	.long 11
	.ascii	" (traced: "
	.zero	2
	.long 2
	.long MM_ConvertPacking+3744
	.long 8
	.ascii	", uid: "
	.zero	1
	.long 2
	.long MM_ConvertPacking+3764
	.long 6
	.ascii	") to "
	.zero	3
	.long 2
	.long MM_ConvertPacking+3784
	.long 13
	.ascii	"<NIL> type?\n"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3812
	.long 7
	.ascii	" from "
	.zero	2
	.long 2
	.long MM_ConvertPacking+3832
	.long 5
	.ascii	" to "
	.zero	4
	.long 2
	.long MM_ConvertPacking+3852
	.long 26
	.ascii	"Converting from packing:\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+3892
	.long 13
	.ascii	"to packing:\n"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3920
	.long 25
	.ascii	"Converting from RTTipe:\n"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3960
	.long 13
	.ascii	"\nto RTTipe:\n"
	.zero	4
	.long 2
	.long MM_ConvertPacking+3988
	.long 14
	.ascii	"\nDoing it in "
	.zero	3
	.long 2
	.long MM_ConvertPacking+4016
	.long 11
	.ascii	" step(s):\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+4040
	.long 7
	.ascii	" Copy "
	.zero	2
	.long 2
	.long MM_ConvertPacking+4060
	.long 11
	.ascii	" byte(s).\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+4084
	.long 16
	.ascii	" Copy and swap "
	.zero	1
	.long 2
	.long MM_ConvertPacking+4112
	.long 13
	.ascii	" unit(s) of "
	.zero	4
	.long 2
	.long MM_ConvertPacking+4140
	.long 33
	.ascii	" byte(s) with packed bitfields: "
	.zero	4
	.long 2
	.long MM_ConvertPacking+4188
	.long 2
	.ascii	" "
	.zero	3
	.long 2
	.long MM_ConvertPacking+4204
	.long 7
	.ascii	" Skip "
	.zero	2
	.long 2
	.long MM_ConvertPacking+4224
	.long 15
	.ascii	" src byte(s).\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+4252
	.long 15
	.ascii	" dst byte(s).\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+4280
	.long 23
	.ascii	" src and dst byte(s).\n"
	.zero	2
	.long 2
	.long MM_ConvertPacking+4316
	.long 7
	.ascii	" Swap "
	.zero	2
	.long 2
	.long MM_ConvertPacking+4336
	.long 18
	.ascii	" 16-bit word(s).\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4368
	.long 18
	.ascii	" 32-bit word(s).\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4400
	.long 18
	.ascii	" 64-bit word(s).\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4432
	.long 15
	.ascii	" 32 to 64-bit "
	.zero	2
	.long 2
	.long MM_ConvertPacking+4460
	.long 8
	.ascii	"signed "
	.zero	1
	.long 2
	.long MM_ConvertPacking+4480
	.long 10
	.ascii	"unsigned "
	.zero	3
	.long 2
	.long MM_ConvertPacking+4504
	.long 10
	.ascii	"word(s).\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4528
	.long 24
	.ascii	" 64 to 32-bit word(s).\n"
	.zero	1
	.long 2
	.long MM_ConvertPacking+4564
	.long 16
	.ascii	" Copy and Swap "
	.zero	1
	.long 2
	.long MM_ConvertPacking+4592
	.long 22
	.ascii	" 32 to 64-bit words.\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4628
	.long 22
	.ascii	" 64 to 32-bit words.\n"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4664
	.long 7
	.ascii	" Read "
	.zero	2
	.long 2
	.long MM_ConvertPacking+4684
	.long 8
	.ascii	" traced"
	.zero	1
	.long 2
	.long MM_ConvertPacking+4704
	.long 10
	.ascii	" untraced"
	.zero	3
	.long 2
	.long MM_ConvertPacking+4728
	.long 11
	.ascii	" procedure"
	.zero	2
	.long 2
	.long MM_ConvertPacking+4752
	.long 17
	.ascii	" references(s).\n"
	.zero	4
	.long 2
	.long MM_ConvertPacking+4784
	.long 8
	.ascii	"Copied "
	.zero	1
	.long 2
	.long MM_ConvertPacking+4804
	.long 11
	.ascii	" bytes to "
	.zero	2
	.long MM_ConvertPacking+6036
	.long -1912246633
	.ascii	"_INITM_ConvertPacking"
	.zero	1
	.ascii	"PrintProgram"
	.zero	1
	.ascii	"Print"
	.zero	1
	.ascii	"TipeToText"
	.zero	1
	.ascii	"FieldsToText"
	.zero	1
	.ascii	"BasicTipeToText"
	.zero	1
	.ascii	"KindToText"
	.zero	1
	.ascii	"PrintPacking"
	.zero	1
	.ascii	"BuildFields"
	.zero	1
	.ascii	"BuildOne"
	.zero	1
	.ascii	"BuildSuper"
	.zero	1
	.ascii	"GetKind"
	.zero	1
	.ascii	"Init"
	.zero	1
	.ascii	"RoundUp"
	.zero	1
	.ascii	"GetDim"
	.zero	1
	.ascii	"New"
	.zero	1
	.ascii	"AddDone"
	.zero	1
	.ascii	"AddRef"
	.zero	1
	.ascii	"AddSwap64to32"
	.zero	1
	.ascii	"AddSwap32to64"
	.zero	1
	.ascii	"AddSwap64"
	.zero	1
	.ascii	"AddSwap32"
	.zero	1
	.ascii	"AddSwap16"
	.zero	1
	.ascii	"AddSkip"
	.zero	1
	.ascii	"AddSkipOrCopy"
	.zero	1
	.ascii	"AddSkipTo"
	.zero	1
	.ascii	"AddSkipFrom"
	.zero	1
	.ascii	"AddCopy64to32"
	.zero	1
	.ascii	"AddCopy32to64"
	.zero	1
	.ascii	"AddPackedSwapArray"
	.zero	1
	.ascii	"AddPackedSwapNextField"
	.zero	1
	.ascii	"AddPackedSwapFirstField"
	.zero	1
	.ascii	"AddCopy"
	.zero	1
	.ascii	"GetHiKind"
	.zero	1
	.ascii	"AppendProg"
	.zero	1
	.ascii	"Write"
	.zero	1
	.ascii	"WriteData"
	.zero	1
	.ascii	"Convert"
	.zero	1
	.ascii	"ReadData"
	.zero	1
	.ascii	"ExtractSwap"
	.zero	3
	.long _INITM_ConvertPacking
	.long MM_ConvertPacking+4824
	.zero	4
	.long ConvertPacking__PrintProgram
	.long MM_ConvertPacking+4846
	.zero	4
	.long ConvertPacking__Print
	.long MM_ConvertPacking+4859
	.zero	4
	.long ConvertPacking__TipeToText
	.long MM_ConvertPacking+4865
	.zero	4
	.long ConvertPacking__FieldsToText
	.long MM_ConvertPacking+4876
	.zero	4
	.long ConvertPacking__BasicTipeToText
	.long MM_ConvertPacking+4889
	.zero	4
	.long ConvertPacking__KindToText
	.long MM_ConvertPacking+4905
	.zero	4
	.long ConvertPacking__PrintPacking
	.long MM_ConvertPacking+4916
	.zero	4
	.long ConvertPacking__BuildFields
	.long MM_ConvertPacking+4929
	.zero	4
	.long ConvertPacking__BuildOne
	.long MM_ConvertPacking+4941
	.zero	4
	.long ConvertPacking__BuildSuper
	.long MM_ConvertPacking+4950
	.zero	4
	.long ConvertPacking__GetKind
	.long MM_ConvertPacking+4961
	.long MI_ConvertPacking+388
	.long ConvertPacking__Init
	.long MM_ConvertPacking+4969
	.zero	4
	.long ConvertPacking__RoundUp
	.long MM_ConvertPacking+4974
	.zero	4
	.long ConvertPacking__GetDim
	.long MM_ConvertPacking+4982
	.zero	4
	.long ConvertPacking__New
	.long MM_ConvertPacking+4989
	.long MI_ConvertPacking+384
	.long ConvertPacking__AddDone
	.long MM_ConvertPacking+4993
	.zero	4
	.long ConvertPacking__AddRef
	.long MM_ConvertPacking+5001
	.zero	4
	.long ConvertPacking__AddSwap64to32
	.long MM_ConvertPacking+5008
	.zero	4
	.long ConvertPacking__AddSwap32to64
	.long MM_ConvertPacking+5022
	.zero	4
	.long ConvertPacking__AddSwap64
	.long MM_ConvertPacking+5036
	.zero	4
	.long ConvertPacking__AddSwap32
	.long MM_ConvertPacking+5046
	.zero	4
	.long ConvertPacking__AddSwap16
	.long MM_ConvertPacking+5056
	.zero	4
	.long ConvertPacking__AddSkip
	.long MM_ConvertPacking+5066
	.zero	4
	.long ConvertPacking__AddSkipOrCopy
	.long MM_ConvertPacking+5074
	.zero	4
	.long ConvertPacking__AddSkipTo
	.long MM_ConvertPacking+5088
	.zero	4
	.long ConvertPacking__AddSkipFrom
	.long MM_ConvertPacking+5098
	.zero	4
	.long ConvertPacking__AddCopy64to32
	.long MM_ConvertPacking+5110
	.zero	4
	.long ConvertPacking__AddCopy32to64
	.long MM_ConvertPacking+5124
	.zero	4
	.long ConvertPacking__AddPackedSwapArray
	.long MM_ConvertPacking+5138
	.zero	4
	.long ConvertPacking__AddPackedSwapNextField
	.long MM_ConvertPacking+5157
	.zero	4
	.long ConvertPacking__AddPackedSwapFirstField
	.long MM_ConvertPacking+5180
	.zero	4
	.long ConvertPacking__AddCopy
	.long MM_ConvertPacking+5204
	.zero	4
	.long ConvertPacking__GetHiKind
	.long MM_ConvertPacking+5212
	.zero	4
	.long ConvertPacking__AppendProg
	.long MM_ConvertPacking+5222
	.zero	4
	.long ConvertPacking__Write
	.long MM_ConvertPacking+5233
	.zero	4
	.long ConvertPacking__WriteData
	.long MM_ConvertPacking+5239
	.zero	4
	.long ConvertPacking__Convert
	.long MM_ConvertPacking+5249
	.zero	4
	.long ConvertPacking__ReadData
	.long MM_ConvertPacking+5257
	.zero	4
	.long ConvertPacking__ExtractSwap
	.long MM_ConvertPacking+5266
	.zero	8
.byte 42
.byte 44
.byte 4
.byte 0
	.ascii	"/home/ftp/tmp/pm3/tmp/pm3-1.1.15/language/modula3/m3compiler"
	.ascii	"/m3bootstrap/LINUXLIBC6/pm3-LINUXLIBC6/boot-LINUXLIBC6/libm3"
	.ascii	"/src/pickle/ConvertPacking.m3"
	.zero	1
.byte 4
.byte 0
.byte 4
.byte 0
.byte 14
.byte 14
.byte 0
.byte 14
.byte 0
.byte 13
.byte 0
.byte 1
.byte 16
.byte 26
.byte 4
.byte 0
.byte 1
.byte 16
.byte 28
.byte 0
.byte 0
.byte 1
.byte 0
	.ascii	"ConvertPacking.BufPtr"
	.zero	1
.byte 4
.byte 16
.byte 36
.byte 14
.byte 14
.byte 14
.byte 14
.byte 4
.byte 4
.byte 18
.byte 18
.byte 18
.byte 16
.byte 16
.byte 35
.byte 18
.byte 18
.byte 18
.byte 16
.byte 16
.byte 35
.byte 14
.byte 14
.byte 14
.byte 4
.byte 0
.byte 4
.byte 42
.byte 20
.byte 4
.byte 4
.byte 42
.byte 44
.byte 4
.byte 0
.byte 20
.byte 10
.byte 14
.byte 16
.byte 169
.byte 104
.byte 2
.byte 141
.byte 5
.byte 6
.byte 7
.byte 25
.byte 25
.byte 25
.byte 16
.byte 33
.byte 225
.byte 176
.byte 237
.byte 29
.byte 15
.byte 5
.byte 3
.byte 32
.byte 32
.byte 5
.byte 3
.byte 2
.byte 31
.byte 25
.byte 25
.byte 25
.byte 16
.byte 112
.byte 204
.byte 68
.byte 14
	.zero	5
	.long -1748275989
	.ascii	"ConvertPacking 1.0"
	.zero	1
	.ascii	"ConvertPacking.T"
	.zero	1
.byte 1
.byte 10
.byte 0
	.ascii	"Packing Write Visitor 1.0"
	.zero	1
	.ascii	"ConvertPacking.WriteVisitor"
	.zero	1
.byte 1
.byte 10
.byte 0
	.ascii	"Packing Read Visitor 1.0"
	.zero	1
	.ascii	"ConvertPacking.ReadVisitor"
	.zero	1
	.ident	"GCC: (GNU) cygnus-2.7.2-960712"
